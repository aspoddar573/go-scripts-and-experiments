// Code generated by protoc-gen-go. DO NOT EDIT.
// source: parrot.proto

/*
Package parrot is a generated protocol buffer package.

It is generated from these files:
	parrot.proto

It has these top-level messages:
	DispatchPacket
	Packet
	MessageTemplate
	MessageTemplateResolver
	MessageTemplateKey
	CreatePacketRequest
	CreatePacketResponse
	UpdatePacketRequest
	MarkPacketReadRequest
	BulkRemovePacketRequest
	ListPacketsRequest
	PacketEdge
	ListPacketsResponse
	BulkFetchPacketRequest
	BulkFetchPacketResponse
	BulkUpsertMessageTemplateRequest
	BulkRemoveMessageTemplateRequest
	BulkFetchMessageTemplateRequest
	BulkFetchMessageTemplateResponse
	ByteMessage
*/
package parrot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import com_mindtickle_api_governance_common "github.com/MindTickle/governance-protos/pb/common"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DispatchPacket_Action int32

const (
	DispatchPacket_CREATED DispatchPacket_Action = 0
	DispatchPacket_UPDATED DispatchPacket_Action = 1
)

var DispatchPacket_Action_name = map[int32]string{
	0: "CREATED",
	1: "UPDATED",
}
var DispatchPacket_Action_value = map[string]int32{
	"CREATED": 0,
	"UPDATED": 1,
}

func (x DispatchPacket_Action) String() string {
	return proto.EnumName(DispatchPacket_Action_name, int32(x))
}
func (DispatchPacket_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ListPacketsRequest_ListPacketsSortField int32

const (
	ListPacketsRequest_CREATED_ON ListPacketsRequest_ListPacketsSortField = 0
)

var ListPacketsRequest_ListPacketsSortField_name = map[int32]string{
	0: "CREATED_ON",
}
var ListPacketsRequest_ListPacketsSortField_value = map[string]int32{
	"CREATED_ON": 0,
}

func (x ListPacketsRequest_ListPacketsSortField) String() string {
	return proto.EnumName(ListPacketsRequest_ListPacketsSortField_name, int32(x))
}
func (ListPacketsRequest_ListPacketsSortField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0}
}

type ListPacketsRequest_PacketReadState int32

const (
	ListPacketsRequest_READ   ListPacketsRequest_PacketReadState = 0
	ListPacketsRequest_UNREAD ListPacketsRequest_PacketReadState = 1
)

var ListPacketsRequest_PacketReadState_name = map[int32]string{
	0: "READ",
	1: "UNREAD",
}
var ListPacketsRequest_PacketReadState_value = map[string]int32{
	"READ":   0,
	"UNREAD": 1,
}

func (x ListPacketsRequest_PacketReadState) String() string {
	return proto.EnumName(ListPacketsRequest_PacketReadState_name, int32(x))
}
func (ListPacketsRequest_PacketReadState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 1}
}

//
// Packet details which will pe sent to the dispatch channel
type DispatchPacket struct {
	OrgId     string                `protobuf:"bytes,1,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	CompanyId string                `protobuf:"bytes,2,opt,name=company_id,json=companyId" json:"company_id,omitempty"`
	UserId    string                `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PacketId  string                `protobuf:"bytes,4,opt,name=packet_id,json=packetId" json:"packet_id,omitempty"`
	Action    DispatchPacket_Action `protobuf:"varint,5,opt,name=action,enum=com.mindtickle.api.governance.parrot.DispatchPacket_Action" json:"action,omitempty"`
}

func (m *DispatchPacket) Reset()                    { *m = DispatchPacket{} }
func (m *DispatchPacket) String() string            { return proto.CompactTextString(m) }
func (*DispatchPacket) ProtoMessage()               {}
func (*DispatchPacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DispatchPacket) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DispatchPacket) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *DispatchPacket) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DispatchPacket) GetPacketId() string {
	if m != nil {
		return m.PacketId
	}
	return ""
}

func (m *DispatchPacket) GetAction() DispatchPacket_Action {
	if m != nil {
		return m.Action
	}
	return DispatchPacket_CREATED
}

//
// Packet is the basic unit which is propagated in real time
type Packet struct {
	PacketId                 int64                      `protobuf:"varint,1,opt,name=packet_id,json=packetId" json:"packet_id,omitempty"`
	PacketType               string                     `protobuf:"bytes,2,opt,name=packet_type,json=packetType" json:"packet_type,omitempty"`
	Payload                  *google_protobuf.Any       `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	ChannelId                string                     `protobuf:"bytes,4,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	AuthorizerId             int64                      `protobuf:"varint,5,opt,name=authorizer_id,json=authorizerId" json:"authorizer_id,omitempty"`
	CreatedOn                int64                      `protobuf:"varint,6,opt,name=created_on,json=createdOn" json:"created_on,omitempty"`
	UpdatedOn                int64                      `protobuf:"varint,7,opt,name=updated_on,json=updatedOn" json:"updated_on,omitempty"`
	MessageTemplateKey       *MessageTemplateKey        `protobuf:"bytes,8,opt,name=message_template_key,json=messageTemplateKey" json:"message_template_key,omitempty"`
	MessageTemplateResolvers []*MessageTemplateResolver `protobuf:"bytes,9,rep,name=message_template_resolvers,json=messageTemplateResolvers" json:"message_template_resolvers,omitempty"`
	Read                     bool                       `protobuf:"varint,10,opt,name=read" json:"read,omitempty"`
	ActionSource             string                     `protobuf:"bytes,11,opt,name=action_source,json=actionSource" json:"action_source,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Packet) GetPacketId() int64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

func (m *Packet) GetPacketType() string {
	if m != nil {
		return m.PacketType
	}
	return ""
}

func (m *Packet) GetPayload() *google_protobuf.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Packet) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *Packet) GetAuthorizerId() int64 {
	if m != nil {
		return m.AuthorizerId
	}
	return 0
}

func (m *Packet) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *Packet) GetUpdatedOn() int64 {
	if m != nil {
		return m.UpdatedOn
	}
	return 0
}

func (m *Packet) GetMessageTemplateKey() *MessageTemplateKey {
	if m != nil {
		return m.MessageTemplateKey
	}
	return nil
}

func (m *Packet) GetMessageTemplateResolvers() []*MessageTemplateResolver {
	if m != nil {
		return m.MessageTemplateResolvers
	}
	return nil
}

func (m *Packet) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *Packet) GetActionSource() string {
	if m != nil {
		return m.ActionSource
	}
	return ""
}

type MessageTemplate struct {
	MessageTemplateKey *MessageTemplateKey `protobuf:"bytes,1,opt,name=message_template_key,json=messageTemplateKey" json:"message_template_key,omitempty"`
	Template           string              `protobuf:"bytes,2,opt,name=template" json:"template,omitempty"`
	AuthorizerId       string              `protobuf:"bytes,3,opt,name=authorizer_id,json=authorizerId" json:"authorizer_id,omitempty"`
	CreatedOn          int64               `protobuf:"varint,4,opt,name=created_on,json=createdOn" json:"created_on,omitempty"`
	UpdatedOn          int64               `protobuf:"varint,5,opt,name=updated_on,json=updatedOn" json:"updated_on,omitempty"`
	// parameters for handling dynamic templating ie entire components via module federation
	RemoteName string `protobuf:"bytes,6,opt,name=remote_name,json=remoteName" json:"remote_name,omitempty"`
	ModuleName string `protobuf:"bytes,7,opt,name=module_name,json=moduleName" json:"module_name,omitempty"`
	RemoteUrl  string `protobuf:"bytes,8,opt,name=remote_url,json=remoteUrl" json:"remote_url,omitempty"`
}

func (m *MessageTemplate) Reset()                    { *m = MessageTemplate{} }
func (m *MessageTemplate) String() string            { return proto.CompactTextString(m) }
func (*MessageTemplate) ProtoMessage()               {}
func (*MessageTemplate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MessageTemplate) GetMessageTemplateKey() *MessageTemplateKey {
	if m != nil {
		return m.MessageTemplateKey
	}
	return nil
}

func (m *MessageTemplate) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *MessageTemplate) GetAuthorizerId() string {
	if m != nil {
		return m.AuthorizerId
	}
	return ""
}

func (m *MessageTemplate) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *MessageTemplate) GetUpdatedOn() int64 {
	if m != nil {
		return m.UpdatedOn
	}
	return 0
}

func (m *MessageTemplate) GetRemoteName() string {
	if m != nil {
		return m.RemoteName
	}
	return ""
}

func (m *MessageTemplate) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *MessageTemplate) GetRemoteUrl() string {
	if m != nil {
		return m.RemoteUrl
	}
	return ""
}

//
// MessageTemplateResolver is used to resolve variables used in MessageTemplate
type MessageTemplateResolver struct {
	// key is the variable name. eg : "numModules"
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// value is the value to replace the variable name with. eg : "4"
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *MessageTemplateResolver) Reset()                    { *m = MessageTemplateResolver{} }
func (m *MessageTemplateResolver) String() string            { return proto.CompactTextString(m) }
func (*MessageTemplateResolver) ProtoMessage()               {}
func (*MessageTemplateResolver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MessageTemplateResolver) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MessageTemplateResolver) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MessageTemplateKey struct {
	//
	// environment in which application is deployed in
	// limit - 255 chars
	// allowed regex - [a-zA-z0-9._-]
	// eg: prod, staging, checklist etc
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	//
	// application name
	// limit 255 chars
	// allowed regex - [a-zA-z0-9._-]
	// eg: parrot, governance-cam etc
	ApplicationName string `protobuf:"bytes,3,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	//
	// unique identifier for your template
	// limit 255 chars
	// allowed regex - [a-zA-z0-9._-]
	// eg : feedback.BulkModuleCopy.Failed, feedback.BulkModuleCopy.Success etc
	TemplateName string `protobuf:"bytes,4,opt,name=template_name,json=templateName" json:"template_name,omitempty"`
	// version of template for backward compatibility when updating the template
	Version int32 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
}

func (m *MessageTemplateKey) Reset()                    { *m = MessageTemplateKey{} }
func (m *MessageTemplateKey) String() string            { return proto.CompactTextString(m) }
func (*MessageTemplateKey) ProtoMessage()               {}
func (*MessageTemplateKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MessageTemplateKey) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *MessageTemplateKey) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *MessageTemplateKey) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *MessageTemplateKey) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CreatePacketRequest struct {
	PacketType               string                     `protobuf:"bytes,1,opt,name=packet_type,json=packetType" json:"packet_type,omitempty"`
	Payload                  *google_protobuf.Any       `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	ChannelId                string                     `protobuf:"bytes,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	MessageTemplateKey       *MessageTemplateKey        `protobuf:"bytes,4,opt,name=message_template_key,json=messageTemplateKey" json:"message_template_key,omitempty"`
	MessageTemplateResolvers []*MessageTemplateResolver `protobuf:"bytes,5,rep,name=message_template_resolvers,json=messageTemplateResolvers" json:"message_template_resolvers,omitempty"`
	ActionSource             string                     `protobuf:"bytes,6,opt,name=action_source,json=actionSource" json:"action_source,omitempty"`
}

func (m *CreatePacketRequest) Reset()                    { *m = CreatePacketRequest{} }
func (m *CreatePacketRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePacketRequest) ProtoMessage()               {}
func (*CreatePacketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreatePacketRequest) GetPacketType() string {
	if m != nil {
		return m.PacketType
	}
	return ""
}

func (m *CreatePacketRequest) GetPayload() *google_protobuf.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CreatePacketRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *CreatePacketRequest) GetMessageTemplateKey() *MessageTemplateKey {
	if m != nil {
		return m.MessageTemplateKey
	}
	return nil
}

func (m *CreatePacketRequest) GetMessageTemplateResolvers() []*MessageTemplateResolver {
	if m != nil {
		return m.MessageTemplateResolvers
	}
	return nil
}

func (m *CreatePacketRequest) GetActionSource() string {
	if m != nil {
		return m.ActionSource
	}
	return ""
}

type CreatePacketResponse struct {
	PacketId int64 `protobuf:"varint,1,opt,name=packet_id,json=packetId" json:"packet_id,omitempty"`
}

func (m *CreatePacketResponse) Reset()                    { *m = CreatePacketResponse{} }
func (m *CreatePacketResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePacketResponse) ProtoMessage()               {}
func (*CreatePacketResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreatePacketResponse) GetPacketId() int64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

type UpdatePacketRequest struct {
	PacketId                 int64                      `protobuf:"varint,1,opt,name=packet_id,json=packetId" json:"packet_id,omitempty"`
	Payload                  *google_protobuf.Any       `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	MessageTemplateKey       *MessageTemplateKey        `protobuf:"bytes,3,opt,name=message_template_key,json=messageTemplateKey" json:"message_template_key,omitempty"`
	MessageTemplateResolvers []*MessageTemplateResolver `protobuf:"bytes,4,rep,name=message_template_resolvers,json=messageTemplateResolvers" json:"message_template_resolvers,omitempty"`
}

func (m *UpdatePacketRequest) Reset()                    { *m = UpdatePacketRequest{} }
func (m *UpdatePacketRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePacketRequest) ProtoMessage()               {}
func (*UpdatePacketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdatePacketRequest) GetPacketId() int64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

func (m *UpdatePacketRequest) GetPayload() *google_protobuf.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdatePacketRequest) GetMessageTemplateKey() *MessageTemplateKey {
	if m != nil {
		return m.MessageTemplateKey
	}
	return nil
}

func (m *UpdatePacketRequest) GetMessageTemplateResolvers() []*MessageTemplateResolver {
	if m != nil {
		return m.MessageTemplateResolvers
	}
	return nil
}

type MarkPacketReadRequest struct {
	PacketIds []int64 `protobuf:"varint,1,rep,packed,name=packet_ids,json=packetIds" json:"packet_ids,omitempty"`
}

func (m *MarkPacketReadRequest) Reset()                    { *m = MarkPacketReadRequest{} }
func (m *MarkPacketReadRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkPacketReadRequest) ProtoMessage()               {}
func (*MarkPacketReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MarkPacketReadRequest) GetPacketIds() []int64 {
	if m != nil {
		return m.PacketIds
	}
	return nil
}

type BulkRemovePacketRequest struct {
	PacketIds []int64 `protobuf:"varint,1,rep,packed,name=packet_ids,json=packetIds" json:"packet_ids,omitempty"`
}

func (m *BulkRemovePacketRequest) Reset()                    { *m = BulkRemovePacketRequest{} }
func (m *BulkRemovePacketRequest) String() string            { return proto.CompactTextString(m) }
func (*BulkRemovePacketRequest) ProtoMessage()               {}
func (*BulkRemovePacketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BulkRemovePacketRequest) GetPacketIds() []int64 {
	if m != nil {
		return m.PacketIds
	}
	return nil
}

type ListPacketsRequest struct {
	PacketTypes      []string                                                `protobuf:"bytes,1,rep,name=packet_types,json=packetTypes" json:"packet_types,omitempty"`
	Page             *com_mindtickle_api_governance_common.PaginationRequest `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
	SortOrder        com_mindtickle_api_governance_common.SortOrder          `protobuf:"varint,3,opt,name=sort_order,json=sortOrder,enum=com.mindtickle.api.governance.common.SortOrder" json:"sort_order,omitempty"`
	SortField        ListPacketsRequest_ListPacketsSortField                 `protobuf:"varint,4,opt,name=sort_field,json=sortField,enum=com.mindtickle.api.governance.parrot.ListPacketsRequest_ListPacketsSortField" json:"sort_field,omitempty"`
	PacketReadStates []ListPacketsRequest_PacketReadState                    `protobuf:"varint,5,rep,packed,name=packet_read_states,json=packetReadStates,enum=com.mindtickle.api.governance.parrot.ListPacketsRequest_PacketReadState" json:"packet_read_states,omitempty"`
}

func (m *ListPacketsRequest) Reset()                    { *m = ListPacketsRequest{} }
func (m *ListPacketsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPacketsRequest) ProtoMessage()               {}
func (*ListPacketsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListPacketsRequest) GetPacketTypes() []string {
	if m != nil {
		return m.PacketTypes
	}
	return nil
}

func (m *ListPacketsRequest) GetPage() *com_mindtickle_api_governance_common.PaginationRequest {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ListPacketsRequest) GetSortOrder() com_mindtickle_api_governance_common.SortOrder {
	if m != nil {
		return m.SortOrder
	}
	return com_mindtickle_api_governance_common.SortOrder_ASC
}

func (m *ListPacketsRequest) GetSortField() ListPacketsRequest_ListPacketsSortField {
	if m != nil {
		return m.SortField
	}
	return ListPacketsRequest_CREATED_ON
}

func (m *ListPacketsRequest) GetPacketReadStates() []ListPacketsRequest_PacketReadState {
	if m != nil {
		return m.PacketReadStates
	}
	return nil
}

type PacketEdge struct {
	Cursor   int32 `protobuf:"varint,1,opt,name=cursor" json:"cursor,omitempty"`
	PacketId int64 `protobuf:"varint,2,opt,name=packet_id,json=packetId" json:"packet_id,omitempty"`
}

func (m *PacketEdge) Reset()                    { *m = PacketEdge{} }
func (m *PacketEdge) String() string            { return proto.CompactTextString(m) }
func (*PacketEdge) ProtoMessage()               {}
func (*PacketEdge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PacketEdge) GetCursor() int32 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

func (m *PacketEdge) GetPacketId() int64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

type ListPacketsResponse struct {
	PacketEdges []*PacketEdge                                  `protobuf:"bytes,1,rep,name=packet_edges,json=packetEdges" json:"packet_edges,omitempty"`
	Page        *com_mindtickle_api_governance_common.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListPacketsResponse) Reset()                    { *m = ListPacketsResponse{} }
func (m *ListPacketsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPacketsResponse) ProtoMessage()               {}
func (*ListPacketsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ListPacketsResponse) GetPacketEdges() []*PacketEdge {
	if m != nil {
		return m.PacketEdges
	}
	return nil
}

func (m *ListPacketsResponse) GetPage() *com_mindtickle_api_governance_common.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

type BulkFetchPacketRequest struct {
	PacketIds []int64 `protobuf:"varint,1,rep,packed,name=packet_ids,json=packetIds" json:"packet_ids,omitempty"`
}

func (m *BulkFetchPacketRequest) Reset()                    { *m = BulkFetchPacketRequest{} }
func (m *BulkFetchPacketRequest) String() string            { return proto.CompactTextString(m) }
func (*BulkFetchPacketRequest) ProtoMessage()               {}
func (*BulkFetchPacketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BulkFetchPacketRequest) GetPacketIds() []int64 {
	if m != nil {
		return m.PacketIds
	}
	return nil
}

type BulkFetchPacketResponse struct {
	Packets []*Packet `protobuf:"bytes,1,rep,name=packets" json:"packets,omitempty"`
}

func (m *BulkFetchPacketResponse) Reset()                    { *m = BulkFetchPacketResponse{} }
func (m *BulkFetchPacketResponse) String() string            { return proto.CompactTextString(m) }
func (*BulkFetchPacketResponse) ProtoMessage()               {}
func (*BulkFetchPacketResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *BulkFetchPacketResponse) GetPackets() []*Packet {
	if m != nil {
		return m.Packets
	}
	return nil
}

type BulkUpsertMessageTemplateRequest struct {
	MessageTemplates []*MessageTemplate `protobuf:"bytes,1,rep,name=message_templates,json=messageTemplates" json:"message_templates,omitempty"`
}

func (m *BulkUpsertMessageTemplateRequest) Reset()         { *m = BulkUpsertMessageTemplateRequest{} }
func (m *BulkUpsertMessageTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*BulkUpsertMessageTemplateRequest) ProtoMessage()    {}
func (*BulkUpsertMessageTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15}
}

func (m *BulkUpsertMessageTemplateRequest) GetMessageTemplates() []*MessageTemplate {
	if m != nil {
		return m.MessageTemplates
	}
	return nil
}

type BulkRemoveMessageTemplateRequest struct {
	MessageTemplateKeys []*MessageTemplateKey `protobuf:"bytes,1,rep,name=message_template_keys,json=messageTemplateKeys" json:"message_template_keys,omitempty"`
}

func (m *BulkRemoveMessageTemplateRequest) Reset()         { *m = BulkRemoveMessageTemplateRequest{} }
func (m *BulkRemoveMessageTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*BulkRemoveMessageTemplateRequest) ProtoMessage()    {}
func (*BulkRemoveMessageTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16}
}

func (m *BulkRemoveMessageTemplateRequest) GetMessageTemplateKeys() []*MessageTemplateKey {
	if m != nil {
		return m.MessageTemplateKeys
	}
	return nil
}

type BulkFetchMessageTemplateRequest struct {
	MessageTemplateKeys []*MessageTemplateKey `protobuf:"bytes,1,rep,name=message_template_keys,json=messageTemplateKeys" json:"message_template_keys,omitempty"`
}

func (m *BulkFetchMessageTemplateRequest) Reset()         { *m = BulkFetchMessageTemplateRequest{} }
func (m *BulkFetchMessageTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*BulkFetchMessageTemplateRequest) ProtoMessage()    {}
func (*BulkFetchMessageTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17}
}

func (m *BulkFetchMessageTemplateRequest) GetMessageTemplateKeys() []*MessageTemplateKey {
	if m != nil {
		return m.MessageTemplateKeys
	}
	return nil
}

type BulkFetchMessageTemplateResponse struct {
	MessageTemplates []*MessageTemplate `protobuf:"bytes,1,rep,name=message_templates,json=messageTemplates" json:"message_templates,omitempty"`
}

func (m *BulkFetchMessageTemplateResponse) Reset()         { *m = BulkFetchMessageTemplateResponse{} }
func (m *BulkFetchMessageTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*BulkFetchMessageTemplateResponse) ProtoMessage()    {}
func (*BulkFetchMessageTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *BulkFetchMessageTemplateResponse) GetMessageTemplates() []*MessageTemplate {
	if m != nil {
		return m.MessageTemplates
	}
	return nil
}

// Will be used for payload
type ByteMessage struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ByteMessage) Reset()                    { *m = ByteMessage{} }
func (m *ByteMessage) String() string            { return proto.CompactTextString(m) }
func (*ByteMessage) ProtoMessage()               {}
func (*ByteMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ByteMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*DispatchPacket)(nil), "com.mindtickle.api.governance.parrot.DispatchPacket")
	proto.RegisterType((*Packet)(nil), "com.mindtickle.api.governance.parrot.Packet")
	proto.RegisterType((*MessageTemplate)(nil), "com.mindtickle.api.governance.parrot.MessageTemplate")
	proto.RegisterType((*MessageTemplateResolver)(nil), "com.mindtickle.api.governance.parrot.MessageTemplateResolver")
	proto.RegisterType((*MessageTemplateKey)(nil), "com.mindtickle.api.governance.parrot.MessageTemplateKey")
	proto.RegisterType((*CreatePacketRequest)(nil), "com.mindtickle.api.governance.parrot.CreatePacketRequest")
	proto.RegisterType((*CreatePacketResponse)(nil), "com.mindtickle.api.governance.parrot.CreatePacketResponse")
	proto.RegisterType((*UpdatePacketRequest)(nil), "com.mindtickle.api.governance.parrot.UpdatePacketRequest")
	proto.RegisterType((*MarkPacketReadRequest)(nil), "com.mindtickle.api.governance.parrot.MarkPacketReadRequest")
	proto.RegisterType((*BulkRemovePacketRequest)(nil), "com.mindtickle.api.governance.parrot.BulkRemovePacketRequest")
	proto.RegisterType((*ListPacketsRequest)(nil), "com.mindtickle.api.governance.parrot.ListPacketsRequest")
	proto.RegisterType((*PacketEdge)(nil), "com.mindtickle.api.governance.parrot.PacketEdge")
	proto.RegisterType((*ListPacketsResponse)(nil), "com.mindtickle.api.governance.parrot.ListPacketsResponse")
	proto.RegisterType((*BulkFetchPacketRequest)(nil), "com.mindtickle.api.governance.parrot.BulkFetchPacketRequest")
	proto.RegisterType((*BulkFetchPacketResponse)(nil), "com.mindtickle.api.governance.parrot.BulkFetchPacketResponse")
	proto.RegisterType((*BulkUpsertMessageTemplateRequest)(nil), "com.mindtickle.api.governance.parrot.BulkUpsertMessageTemplateRequest")
	proto.RegisterType((*BulkRemoveMessageTemplateRequest)(nil), "com.mindtickle.api.governance.parrot.BulkRemoveMessageTemplateRequest")
	proto.RegisterType((*BulkFetchMessageTemplateRequest)(nil), "com.mindtickle.api.governance.parrot.BulkFetchMessageTemplateRequest")
	proto.RegisterType((*BulkFetchMessageTemplateResponse)(nil), "com.mindtickle.api.governance.parrot.BulkFetchMessageTemplateResponse")
	proto.RegisterType((*ByteMessage)(nil), "com.mindtickle.api.governance.parrot.ByteMessage")
	proto.RegisterEnum("com.mindtickle.api.governance.parrot.DispatchPacket_Action", DispatchPacket_Action_name, DispatchPacket_Action_value)
	proto.RegisterEnum("com.mindtickle.api.governance.parrot.ListPacketsRequest_ListPacketsSortField", ListPacketsRequest_ListPacketsSortField_name, ListPacketsRequest_ListPacketsSortField_value)
	proto.RegisterEnum("com.mindtickle.api.governance.parrot.ListPacketsRequest_PacketReadState", ListPacketsRequest_PacketReadState_name, ListPacketsRequest_PacketReadState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ParrotService service

type ParrotServiceClient interface {
	//
	// Create notification packet for a particular user which will be available
	// on the socket connection
	//
	// params  - packetType, channelId, payload, messageTemplateKey, messageTemplateResolver[]
	// returns - id of the packet
	CreatePacket(ctx context.Context, in *CreatePacketRequest, opts ...grpc.CallOption) (*CreatePacketResponse, error)
	//
	// Update the packet with progress, status etc which will be propagated
	// in real time.
	// Update of fields is optional if payload is present and messageTemplateKey is absent then
	// only payload will be updated
	//
	// params  - id, payload, messageTemplateKey, messageTemplateResolver[]
	// returns - empty response
	UpdatePacket(ctx context.Context, in *UpdatePacketRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	//
	// Marks the packet read for the user
	//
	// params  - id[]
	// returns - empty response
	MarkPacketRead(ctx context.Context, in *MarkPacketReadRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	//
	// Marks all packet read for the user
	//
	// params  - empty
	// returns - empty
	MarkAllPacketRead(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	//
	// Remove the packet in bulk
	//
	// params  - id[]
	// returns - empty response
	BulkRemovePacket(ctx context.Context, in *BulkRemovePacketRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	//
	// List paginated packet ids for the particular user id
	//
	// params - packetType, paginationRequest, sortMeta
	// returns - id[], paginationResponse
	ListPackets(ctx context.Context, in *ListPacketsRequest, opts ...grpc.CallOption) (*ListPacketsResponse, error)
	//
	// Bulk fetch packet details by ids
	//
	// params - id[]
	// returns - Packet[]
	BulkFetchPacket(ctx context.Context, in *BulkFetchPacketRequest, opts ...grpc.CallOption) (*BulkFetchPacketResponse, error)
	//
	// Bulk upsert message templates which will be used to display messages corresponding to packet
	// template keys consist of namespace, application, key_name, version
	// template variables are enclosed in ${}
	// eg : "Copying ${numModules} modules to ${numSeries} series"
	//
	// params - MessageTemplate[]
	// returns - empty response
	BulkUpsertMessageTemplate(ctx context.Context, in *BulkUpsertMessageTemplateRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	//
	// Bulk remove message templates
	//
	// params - MessageTemplateKey[]
	// returns - empty response
	BulkRemoveMessageTemplate(ctx context.Context, in *BulkRemoveMessageTemplateRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	//
	// Bulk fetch message templates
	//
	// params - MessageTemplateKey[]
	// returns - MessageTemplate[]
	BulkFetchMessageTemplate(ctx context.Context, in *BulkFetchMessageTemplateRequest, opts ...grpc.CallOption) (*BulkFetchMessageTemplateResponse, error)
}

type parrotServiceClient struct {
	cc *grpc.ClientConn
}

func NewParrotServiceClient(cc *grpc.ClientConn) ParrotServiceClient {
	return &parrotServiceClient{cc}
}

func (c *parrotServiceClient) CreatePacket(ctx context.Context, in *CreatePacketRequest, opts ...grpc.CallOption) (*CreatePacketResponse, error) {
	out := new(CreatePacketResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.api.governance.parrot.ParrotService/CreatePacket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parrotServiceClient) UpdatePacket(ctx context.Context, in *UpdatePacketRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/com.mindtickle.api.governance.parrot.ParrotService/UpdatePacket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parrotServiceClient) MarkPacketRead(ctx context.Context, in *MarkPacketReadRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/com.mindtickle.api.governance.parrot.ParrotService/MarkPacketRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parrotServiceClient) MarkAllPacketRead(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/com.mindtickle.api.governance.parrot.ParrotService/MarkAllPacketRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parrotServiceClient) BulkRemovePacket(ctx context.Context, in *BulkRemovePacketRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/com.mindtickle.api.governance.parrot.ParrotService/BulkRemovePacket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parrotServiceClient) ListPackets(ctx context.Context, in *ListPacketsRequest, opts ...grpc.CallOption) (*ListPacketsResponse, error) {
	out := new(ListPacketsResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.api.governance.parrot.ParrotService/ListPackets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parrotServiceClient) BulkFetchPacket(ctx context.Context, in *BulkFetchPacketRequest, opts ...grpc.CallOption) (*BulkFetchPacketResponse, error) {
	out := new(BulkFetchPacketResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.api.governance.parrot.ParrotService/BulkFetchPacket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parrotServiceClient) BulkUpsertMessageTemplate(ctx context.Context, in *BulkUpsertMessageTemplateRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/com.mindtickle.api.governance.parrot.ParrotService/BulkUpsertMessageTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parrotServiceClient) BulkRemoveMessageTemplate(ctx context.Context, in *BulkRemoveMessageTemplateRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/com.mindtickle.api.governance.parrot.ParrotService/BulkRemoveMessageTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parrotServiceClient) BulkFetchMessageTemplate(ctx context.Context, in *BulkFetchMessageTemplateRequest, opts ...grpc.CallOption) (*BulkFetchMessageTemplateResponse, error) {
	out := new(BulkFetchMessageTemplateResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.api.governance.parrot.ParrotService/BulkFetchMessageTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ParrotService service

type ParrotServiceServer interface {
	//
	// Create notification packet for a particular user which will be available
	// on the socket connection
	//
	// params  - packetType, channelId, payload, messageTemplateKey, messageTemplateResolver[]
	// returns - id of the packet
	CreatePacket(context.Context, *CreatePacketRequest) (*CreatePacketResponse, error)
	//
	// Update the packet with progress, status etc which will be propagated
	// in real time.
	// Update of fields is optional if payload is present and messageTemplateKey is absent then
	// only payload will be updated
	//
	// params  - id, payload, messageTemplateKey, messageTemplateResolver[]
	// returns - empty response
	UpdatePacket(context.Context, *UpdatePacketRequest) (*google_protobuf1.Empty, error)
	//
	// Marks the packet read for the user
	//
	// params  - id[]
	// returns - empty response
	MarkPacketRead(context.Context, *MarkPacketReadRequest) (*google_protobuf1.Empty, error)
	//
	// Marks all packet read for the user
	//
	// params  - empty
	// returns - empty
	MarkAllPacketRead(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
	//
	// Remove the packet in bulk
	//
	// params  - id[]
	// returns - empty response
	BulkRemovePacket(context.Context, *BulkRemovePacketRequest) (*google_protobuf1.Empty, error)
	//
	// List paginated packet ids for the particular user id
	//
	// params - packetType, paginationRequest, sortMeta
	// returns - id[], paginationResponse
	ListPackets(context.Context, *ListPacketsRequest) (*ListPacketsResponse, error)
	//
	// Bulk fetch packet details by ids
	//
	// params - id[]
	// returns - Packet[]
	BulkFetchPacket(context.Context, *BulkFetchPacketRequest) (*BulkFetchPacketResponse, error)
	//
	// Bulk upsert message templates which will be used to display messages corresponding to packet
	// template keys consist of namespace, application, key_name, version
	// template variables are enclosed in ${}
	// eg : "Copying ${numModules} modules to ${numSeries} series"
	//
	// params - MessageTemplate[]
	// returns - empty response
	BulkUpsertMessageTemplate(context.Context, *BulkUpsertMessageTemplateRequest) (*google_protobuf1.Empty, error)
	//
	// Bulk remove message templates
	//
	// params - MessageTemplateKey[]
	// returns - empty response
	BulkRemoveMessageTemplate(context.Context, *BulkRemoveMessageTemplateRequest) (*google_protobuf1.Empty, error)
	//
	// Bulk fetch message templates
	//
	// params - MessageTemplateKey[]
	// returns - MessageTemplate[]
	BulkFetchMessageTemplate(context.Context, *BulkFetchMessageTemplateRequest) (*BulkFetchMessageTemplateResponse, error)
}

func RegisterParrotServiceServer(s *grpc.Server, srv ParrotServiceServer) {
	s.RegisterService(&_ParrotService_serviceDesc, srv)
}

func _ParrotService_CreatePacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParrotServiceServer).CreatePacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.api.governance.parrot.ParrotService/CreatePacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParrotServiceServer).CreatePacket(ctx, req.(*CreatePacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParrotService_UpdatePacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParrotServiceServer).UpdatePacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.api.governance.parrot.ParrotService/UpdatePacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParrotServiceServer).UpdatePacket(ctx, req.(*UpdatePacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParrotService_MarkPacketRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkPacketReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParrotServiceServer).MarkPacketRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.api.governance.parrot.ParrotService/MarkPacketRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParrotServiceServer).MarkPacketRead(ctx, req.(*MarkPacketReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParrotService_MarkAllPacketRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParrotServiceServer).MarkAllPacketRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.api.governance.parrot.ParrotService/MarkAllPacketRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParrotServiceServer).MarkAllPacketRead(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParrotService_BulkRemovePacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRemovePacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParrotServiceServer).BulkRemovePacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.api.governance.parrot.ParrotService/BulkRemovePacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParrotServiceServer).BulkRemovePacket(ctx, req.(*BulkRemovePacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParrotService_ListPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParrotServiceServer).ListPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.api.governance.parrot.ParrotService/ListPackets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParrotServiceServer).ListPackets(ctx, req.(*ListPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParrotService_BulkFetchPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkFetchPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParrotServiceServer).BulkFetchPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.api.governance.parrot.ParrotService/BulkFetchPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParrotServiceServer).BulkFetchPacket(ctx, req.(*BulkFetchPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParrotService_BulkUpsertMessageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpsertMessageTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParrotServiceServer).BulkUpsertMessageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.api.governance.parrot.ParrotService/BulkUpsertMessageTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParrotServiceServer).BulkUpsertMessageTemplate(ctx, req.(*BulkUpsertMessageTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParrotService_BulkRemoveMessageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRemoveMessageTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParrotServiceServer).BulkRemoveMessageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.api.governance.parrot.ParrotService/BulkRemoveMessageTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParrotServiceServer).BulkRemoveMessageTemplate(ctx, req.(*BulkRemoveMessageTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParrotService_BulkFetchMessageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkFetchMessageTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParrotServiceServer).BulkFetchMessageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.api.governance.parrot.ParrotService/BulkFetchMessageTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParrotServiceServer).BulkFetchMessageTemplate(ctx, req.(*BulkFetchMessageTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ParrotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.mindtickle.api.governance.parrot.ParrotService",
	HandlerType: (*ParrotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePacket",
			Handler:    _ParrotService_CreatePacket_Handler,
		},
		{
			MethodName: "UpdatePacket",
			Handler:    _ParrotService_UpdatePacket_Handler,
		},
		{
			MethodName: "MarkPacketRead",
			Handler:    _ParrotService_MarkPacketRead_Handler,
		},
		{
			MethodName: "MarkAllPacketRead",
			Handler:    _ParrotService_MarkAllPacketRead_Handler,
		},
		{
			MethodName: "BulkRemovePacket",
			Handler:    _ParrotService_BulkRemovePacket_Handler,
		},
		{
			MethodName: "ListPackets",
			Handler:    _ParrotService_ListPackets_Handler,
		},
		{
			MethodName: "BulkFetchPacket",
			Handler:    _ParrotService_BulkFetchPacket_Handler,
		},
		{
			MethodName: "BulkUpsertMessageTemplate",
			Handler:    _ParrotService_BulkUpsertMessageTemplate_Handler,
		},
		{
			MethodName: "BulkRemoveMessageTemplate",
			Handler:    _ParrotService_BulkRemoveMessageTemplate_Handler,
		},
		{
			MethodName: "BulkFetchMessageTemplate",
			Handler:    _ParrotService_BulkFetchMessageTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parrot.proto",
}

func init() { proto.RegisterFile("parrot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x36, 0xad, 0x8b, 0xcd, 0x23, 0x59, 0x56, 0xc6, 0x4e, 0xa2, 0x28, 0x7f, 0x60, 0x87, 0xf9,
	0xd1, 0xb8, 0x40, 0x4b, 0xa5, 0x0a, 0x8a, 0xdc, 0x17, 0x76, 0x22, 0xa3, 0x42, 0xea, 0x0b, 0x68,
	0x7b, 0xd3, 0x8d, 0x30, 0x26, 0x27, 0x32, 0x6b, 0x92, 0xc3, 0xce, 0x50, 0x06, 0xd4, 0xa2, 0xbb,
	0xa2, 0x5d, 0x74, 0xd1, 0x00, 0xdd, 0xf6, 0x09, 0x5a, 0xa0, 0xaf, 0xd2, 0x67, 0xe8, 0xa2, 0x8f,
	0xd0, 0x7d, 0xc1, 0x99, 0xa1, 0xee, 0x92, 0x69, 0x15, 0x09, 0xba, 0x12, 0xe7, 0xcc, 0xb9, 0x5f,
	0xbe, 0x39, 0x82, 0x62, 0x88, 0x19, 0xa3, 0x91, 0x19, 0x32, 0x1a, 0x51, 0xf4, 0x7f, 0x9b, 0xfa,
	0xa6, 0xef, 0x06, 0x4e, 0xe4, 0xda, 0xe7, 0x1e, 0x31, 0x71, 0xe8, 0x9a, 0x6d, 0x7a, 0x41, 0x58,
	0x80, 0x03, 0x9b, 0x98, 0x92, 0xb7, 0xba, 0x66, 0x53, 0xdf, 0xa7, 0x41, 0x4d, 0xfe, 0x48, 0xd1,
	0xea, 0xad, 0x36, 0xa5, 0x6d, 0x8f, 0xd4, 0xc4, 0xe9, 0xb4, 0xf3, 0xa6, 0x86, 0x83, 0xae, 0xba,
	0xba, 0x3d, 0x7a, 0x45, 0xfc, 0x30, 0x52, 0x97, 0xc6, 0xdf, 0x1a, 0x94, 0x5e, 0xb9, 0x3c, 0xc4,
	0x91, 0x7d, 0x76, 0x88, 0xed, 0x73, 0x12, 0xa1, 0xeb, 0x90, 0xa7, 0xac, 0xdd, 0x72, 0x9d, 0x8a,
	0xb6, 0xa9, 0x6d, 0xe9, 0x56, 0x8e, 0xb2, 0x76, 0xd3, 0x41, 0x77, 0x00, 0x6c, 0xea, 0x87, 0x38,
	0xe8, 0xc6, 0x57, 0x8b, 0xe2, 0x4a, 0x57, 0x94, 0xa6, 0x83, 0x6e, 0xc2, 0x52, 0x87, 0x13, 0x16,
	0xdf, 0x65, 0xc4, 0x5d, 0x3e, 0x3e, 0x36, 0x1d, 0x74, 0x1b, 0xf4, 0x50, 0x28, 0x8e, 0xaf, 0xb2,
	0xe2, 0x6a, 0x59, 0x12, 0x9a, 0x0e, 0x3a, 0x82, 0x3c, 0xb6, 0x23, 0x97, 0x06, 0x95, 0xdc, 0xa6,
	0xb6, 0x55, 0xaa, 0x3f, 0x33, 0xd3, 0xa4, 0xc0, 0x1c, 0xf6, 0xd8, 0xdc, 0x16, 0x2a, 0x2c, 0xa5,
	0xca, 0x30, 0x20, 0x2f, 0x29, 0xa8, 0x00, 0x4b, 0x2f, 0xad, 0xc6, 0xf6, 0x71, 0xe3, 0x55, 0x79,
	0x21, 0x3e, 0x9c, 0x1c, 0xbe, 0x12, 0x07, 0xcd, 0xf8, 0x35, 0x0b, 0x79, 0x15, 0xef, 0xc6, 0xa0,
	0x83, 0x71, 0xc8, 0x99, 0x9d, 0xc5, 0x07, 0xda, 0x80, 0x93, 0x1b, 0x50, 0x50, 0x0c, 0x51, 0x37,
	0x24, 0x2a, 0x74, 0x90, 0xa4, 0xe3, 0x6e, 0x48, 0x90, 0x09, 0x4b, 0x21, 0xee, 0x7a, 0x14, 0xcb,
	0xd8, 0x0b, 0xf5, 0x75, 0x53, 0xe6, 0xdc, 0x4c, 0x72, 0x6e, 0x6e, 0x07, 0x5d, 0x2b, 0x61, 0x12,
	0xa9, 0x3c, 0xc3, 0x41, 0x40, 0xbc, 0x7e, 0x4e, 0x74, 0x45, 0x69, 0x3a, 0xe8, 0x3e, 0xac, 0xe0,
	0x4e, 0x74, 0x46, 0x99, 0xfb, 0xb5, 0x4c, 0x68, 0xae, 0xe7, 0x54, 0xb1, 0x7f, 0xd1, 0x74, 0xd0,
	0x5d, 0x00, 0x9b, 0x11, 0x1c, 0x11, 0xa7, 0x45, 0x83, 0x4a, 0xbe, 0xc7, 0xa5, 0x2b, 0xea, 0x41,
	0x10, 0xb3, 0x74, 0x42, 0x27, 0x61, 0x59, 0xea, 0xb3, 0x28, 0xea, 0x41, 0x80, 0xbe, 0x84, 0x75,
	0x9f, 0x70, 0x8e, 0xdb, 0xa4, 0x15, 0x11, 0x3f, 0xf4, 0x70, 0x44, 0x5a, 0xe7, 0xa4, 0x5b, 0x59,
	0x16, 0xa1, 0x3c, 0x4e, 0x57, 0x91, 0x3d, 0xa9, 0xe1, 0x58, 0x29, 0x78, 0x4d, 0xba, 0x16, 0xf2,
	0xc7, 0x68, 0xe8, 0x1b, 0xa8, 0x8e, 0xd9, 0x62, 0x84, 0x53, 0xef, 0x82, 0x30, 0x5e, 0xd1, 0x37,
	0x33, 0x5b, 0x85, 0xfa, 0x8b, 0xb9, 0x2c, 0x5a, 0x4a, 0x8b, 0x55, 0xf1, 0x27, 0x5f, 0x70, 0x84,
	0x20, 0xcb, 0x08, 0x76, 0x2a, 0xb0, 0xa9, 0x6d, 0x2d, 0x5b, 0xe2, 0x1b, 0xdd, 0x83, 0x15, 0xd9,
	0x35, 0x2d, 0x4e, 0x3b, 0xcc, 0x26, 0x95, 0x82, 0xa8, 0x46, 0x51, 0x12, 0x8f, 0x04, 0xcd, 0xf8,
	0x6b, 0x11, 0x56, 0x47, 0xcc, 0x4d, 0xcd, 0x9a, 0xf6, 0x0e, 0xb2, 0x56, 0x85, 0xe5, 0xc4, 0x86,
	0xea, 0xbe, 0xde, 0x59, 0x04, 0x30, 0xd4, 0x2c, 0x19, 0x15, 0xc0, 0xf4, 0x46, 0xc9, 0x5e, 0xde,
	0x28, 0xb9, 0x49, 0x8d, 0xb2, 0x01, 0x05, 0x46, 0x7c, 0x1a, 0x91, 0x56, 0x80, 0x7d, 0x22, 0xfa,
	0x4d, 0xb7, 0x40, 0x92, 0xf6, 0xb1, 0x4f, 0x62, 0x06, 0x9f, 0x3a, 0x1d, 0x4f, 0x31, 0x2c, 0x49,
	0x06, 0x49, 0x12, 0x0c, 0x77, 0x40, 0xb1, 0xb7, 0x3a, 0xcc, 0x13, 0x0d, 0xa6, 0x5b, 0xba, 0xa4,
	0x9c, 0x30, 0xcf, 0xd8, 0x86, 0x9b, 0x53, 0xaa, 0x8a, 0xca, 0x90, 0x49, 0xb2, 0xab, 0x5b, 0xf1,
	0x27, 0x5a, 0x87, 0xdc, 0x05, 0xf6, 0x3a, 0x49, 0x46, 0xe4, 0xc1, 0xf8, 0x45, 0x03, 0x34, 0x9e,
	0x55, 0xf4, 0x3f, 0xd0, 0x63, 0x97, 0x78, 0x88, 0x6d, 0xa2, 0x94, 0xf4, 0x09, 0xe8, 0x43, 0x28,
	0xe3, 0x30, 0xf4, 0x5c, 0x1b, 0x8b, 0x4e, 0x10, 0xce, 0xcb, 0x34, 0xae, 0x0e, 0xd0, 0x45, 0x04,
	0xf7, 0x60, 0xa5, 0x57, 0x6e, 0xc1, 0x27, 0xa7, 0xb7, 0x98, 0x10, 0x05, 0x53, 0x05, 0x96, 0xe2,
	0x86, 0x4b, 0x60, 0x2d, 0x67, 0x25, 0x47, 0xe3, 0xe7, 0x0c, 0xac, 0xbd, 0x14, 0x39, 0x97, 0xe0,
	0x63, 0x91, 0xaf, 0x3a, 0x84, 0x47, 0xa3, 0x10, 0xa3, 0xcd, 0x82, 0x98, 0xc5, 0xab, 0x43, 0x4c,
	0x66, 0x14, 0x62, 0xa6, 0x75, 0x6f, 0xf6, 0xbd, 0xcf, 0x7c, 0xee, 0xdd, 0xce, 0xfc, 0xd8, 0x7c,
	0xe7, 0x27, 0xcc, 0xf7, 0x23, 0x58, 0x1f, 0x2e, 0x0a, 0x0f, 0x69, 0xc0, 0xc9, 0xa5, 0x2f, 0x83,
	0xf1, 0xc7, 0x22, 0xac, 0x9d, 0x88, 0xf9, 0x18, 0x2d, 0xe7, 0x25, 0x4f, 0xca, 0x55, 0xcb, 0x39,
	0xad, 0x5e, 0x99, 0xf7, 0x5e, 0xaf, 0xec, 0x3b, 0xad, 0x97, 0xf1, 0x14, 0xae, 0xef, 0x61, 0x76,
	0x9e, 0xa4, 0x13, 0x3b, 0x49, 0x4a, 0xef, 0x02, 0xf4, 0x52, 0xca, 0x2b, 0xda, 0x66, 0x26, 0xc1,
	0xa7, 0x24, 0xa7, 0xdc, 0x78, 0x0e, 0x37, 0x77, 0x3a, 0xde, 0xb9, 0x45, 0x7c, 0x7a, 0x31, 0x52,
	0x90, 0x14, 0xd2, 0x3f, 0x66, 0x01, 0x7d, 0xee, 0xf2, 0x48, 0x0a, 0xf2, 0xbe, 0x64, 0x71, 0x60,
	0x32, 0xa5, 0xac, 0x6e, 0x15, 0xfa, 0xa3, 0xc9, 0xd1, 0x6b, 0xc8, 0x86, 0xb8, 0x4d, 0x54, 0x25,
	0x1f, 0x5d, 0x92, 0x1a, 0xb5, 0xb6, 0x1d, 0xe2, 0xb6, 0x1b, 0x08, 0x5c, 0x51, 0x96, 0x2c, 0xa1,
	0x04, 0xed, 0x03, 0x70, 0xca, 0xa2, 0x16, 0x65, 0x0e, 0x61, 0xa2, 0xbe, 0xa5, 0x7a, 0x2d, 0x9d,
	0xca, 0x23, 0xca, 0xa2, 0x83, 0x58, 0xcc, 0xd2, 0x79, 0xf2, 0x89, 0x3c, 0xa5, 0xef, 0x8d, 0x4b,
	0x3c, 0xb9, 0x6b, 0x94, 0xea, 0x7b, 0xe9, 0xaa, 0x37, 0x9e, 0x8d, 0x41, 0x52, 0x6c, 0x6d, 0x37,
	0x56, 0x2a, 0xad, 0x89, 0x4f, 0x74, 0x01, 0x48, 0x65, 0x2b, 0x7e, 0x5d, 0x5b, 0x3c, 0xc2, 0x11,
	0x91, 0x33, 0x5e, 0xaa, 0x7f, 0x36, 0xb7, 0xd5, 0x7e, 0x37, 0x1c, 0xc5, 0x0a, 0xad, 0x72, 0x38,
	0x4c, 0xe0, 0xc6, 0x07, 0xb0, 0x3e, 0xc9, 0x35, 0x54, 0x02, 0x50, 0x0b, 0x60, 0xeb, 0x60, 0xbf,
	0xbc, 0x60, 0xdc, 0x87, 0xd5, 0x11, 0x65, 0x68, 0x19, 0xb2, 0x56, 0x63, 0x3b, 0x5e, 0x10, 0x01,
	0xf2, 0x27, 0xfb, 0xe2, 0x5b, 0x33, 0x1a, 0x00, 0x92, 0xb1, 0xe1, 0xb4, 0x09, 0xba, 0x01, 0x79,
	0xbb, 0xc3, 0x38, 0x65, 0x62, 0x98, 0x73, 0x96, 0x3a, 0x0d, 0xcf, 0xf9, 0xe2, 0x04, 0x80, 0xf8,
	0x5d, 0x83, 0xb5, 0xa1, 0x80, 0x14, 0xb2, 0x1c, 0xf5, 0xba, 0x8a, 0x38, 0x6d, 0xd5, 0x55, 0x85,
	0xfa, 0x83, 0x74, 0x19, 0xea, 0x3b, 0x96, 0xf4, 0x61, 0xfc, 0xcd, 0xd1, 0xce, 0x50, 0x1f, 0x9a,
	0xa9, 0xfb, 0x90, 0x34, 0x83, 0x37, 0x54, 0xb6, 0x9f, 0xf1, 0x0c, 0x6e, 0xc4, 0x33, 0xb4, 0x4b,
	0x7a, 0xdb, 0xf5, 0x15, 0x46, 0x08, 0xcb, 0x01, 0x1c, 0x12, 0x56, 0x01, 0xef, 0xc6, 0x80, 0x27,
	0x72, 0xa0, 0x62, 0xfd, 0xe8, 0x2a, 0xb1, 0x5a, 0x89, 0xb0, 0xf1, 0xbd, 0x06, 0x9b, 0xb1, 0x8d,
	0x93, 0x90, 0x13, 0x16, 0x8d, 0xe1, 0x8b, 0x74, 0xf5, 0x14, 0xae, 0x8d, 0x22, 0x58, 0x62, 0xf6,
	0xd3, 0xf9, 0x80, 0xab, 0x3c, 0x02, 0x58, 0xdc, 0x78, 0xab, 0x1c, 0x91, 0x68, 0x33, 0xc5, 0x11,
	0x0f, 0xae, 0x4f, 0x82, 0xed, 0xc4, 0x99, 0xf9, 0x71, 0x7b, 0x6d, 0x1c, 0xb7, 0xb9, 0xf1, 0x93,
	0x06, 0x1b, 0xbd, 0xfc, 0xff, 0x27, 0x3c, 0x4a, 0xaa, 0x35, 0xd9, 0x23, 0xd5, 0x1a, 0xef, 0xa3,
	0x5a, 0xf7, 0xa1, 0xb0, 0xd3, 0x8d, 0x92, 0x32, 0xc5, 0x0b, 0x9a, 0x62, 0x51, 0xab, 0x56, 0x72,
	0xac, 0xff, 0xa9, 0xc3, 0xca, 0xa1, 0xd0, 0x7a, 0x44, 0xd8, 0x85, 0x6b, 0x13, 0xf4, 0x83, 0x06,
	0xc5, 0xc1, 0xed, 0x00, 0x3d, 0x49, 0xe7, 0xd4, 0x84, 0x35, 0xaf, 0xfa, 0x74, 0x1e, 0x51, 0x99,
	0x26, 0x63, 0x01, 0xd9, 0x50, 0x1c, 0x5c, 0x36, 0xd2, 0x3a, 0x32, 0x61, 0x41, 0xa9, 0xde, 0x18,
	0x5b, 0x37, 0x1a, 0x7e, 0x18, 0x75, 0x8d, 0x05, 0xd4, 0x86, 0xd2, 0xf0, 0x03, 0x8c, 0x52, 0xfe,
	0x27, 0x9f, 0xf8, 0x6c, 0xcf, 0x30, 0xd4, 0x80, 0x6b, 0xb1, 0xc8, 0xb6, 0xe7, 0x0d, 0xd8, 0x9a,
	0xc2, 0x3e, 0x43, 0xcd, 0x39, 0x94, 0x47, 0x1f, 0x7d, 0x94, 0x72, 0x3b, 0x99, 0xb2, 0x2c, 0xcc,
	0x30, 0xf6, 0x9d, 0x06, 0x85, 0x01, 0x38, 0x47, 0x8f, 0xe7, 0x7d, 0xd2, 0xaa, 0x4f, 0xe6, 0x90,
	0xec, 0x35, 0xc2, 0x5b, 0x0d, 0x56, 0x47, 0x80, 0x16, 0x3d, 0x4f, 0x1f, 0xf3, 0x38, 0xb8, 0x57,
	0x5f, 0xcc, 0x29, 0xdd, 0x73, 0xe9, 0x5b, 0xb8, 0x35, 0x15, 0x96, 0xd1, 0x6e, 0x7a, 0xed, 0xb3,
	0x70, 0x7d, 0x46, 0x61, 0x94, 0xf9, 0x89, 0x60, 0x7c, 0x15, 0xf3, 0xb3, 0xd0, 0x7c, 0x86, 0xf9,
	0xdf, 0x34, 0xa8, 0x4c, 0xc3, 0x39, 0xd4, 0xb8, 0x62, 0x6e, 0xa7, 0x58, 0xdf, 0xfd, 0xb7, 0x6a,
	0x92, 0x5a, 0xed, 0x3c, 0xfc, 0xe2, 0x93, 0xb6, 0x1b, 0x9d, 0x75, 0x4e, 0x63, 0x8d, 0xb5, 0x3d,
	0x37, 0x70, 0x8e, 0x85, 0xc6, 0x5a, 0x5f, 0xdb, 0xc7, 0x22, 0x44, 0x5e, 0x0b, 0x4f, 0x6b, 0x52,
	0xef, 0x69, 0x5e, 0x50, 0x1e, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x19, 0xbe, 0xc3, 0xb2,
	0x14, 0x00, 0x00,
}
