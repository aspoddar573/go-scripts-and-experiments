// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feedback.proto

/*
Package feedback is a generated protocol buffer package.

It is generated from these files:
	feedback.proto

It has these top-level messages:
	Feedback
	Progress
	Details
*/
package feedback

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ParrotPacketType int32

const (
	ParrotPacketType_FEEDBACK ParrotPacketType = 0
)

var ParrotPacketType_name = map[int32]string{
	0: "FEEDBACK",
}
var ParrotPacketType_value = map[string]int32{
	"FEEDBACK": 0,
}

func (x ParrotPacketType) String() string {
	return proto.EnumName(ParrotPacketType_name, int32(x))
}
func (ParrotPacketType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Status int32

const (
	Status_NOT_STARTED      Status = 0
	Status_IN_PROGRESS      Status = 1
	Status_SUCCESS          Status = 2
	Status_FAILED           Status = 3
	Status_PARTIALLY_FAILED Status = 4
)

var Status_name = map[int32]string{
	0: "NOT_STARTED",
	1: "IN_PROGRESS",
	2: "SUCCESS",
	3: "FAILED",
	4: "PARTIALLY_FAILED",
}
var Status_value = map[string]int32{
	"NOT_STARTED":      0,
	"IN_PROGRESS":      1,
	"SUCCESS":          2,
	"FAILED":           3,
	"PARTIALLY_FAILED": 4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Feedback struct {
	Status                         Status    `protobuf:"varint,3,opt,name=status,enum=com.mindtickle.api.governance.feedback.Status" json:"status,omitempty"`
	Progress                       *Progress `protobuf:"bytes,4,opt,name=progress" json:"progress,omitempty"`
	Details                        *Details  `protobuf:"bytes,5,opt,name=details" json:"details,omitempty"`
	EstimatedCompletionTimeSeconds int32     `protobuf:"varint,6,opt,name=estimated_completion_time_seconds,json=estimatedCompletionTimeSeconds" json:"estimated_completion_time_seconds,omitempty"`
}

func (m *Feedback) Reset()                    { *m = Feedback{} }
func (m *Feedback) String() string            { return proto.CompactTextString(m) }
func (*Feedback) ProtoMessage()               {}
func (*Feedback) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Feedback) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_NOT_STARTED
}

func (m *Feedback) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *Feedback) GetDetails() *Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Feedback) GetEstimatedCompletionTimeSeconds() int32 {
	if m != nil {
		return m.EstimatedCompletionTimeSeconds
	}
	return 0
}

type Progress struct {
	IsEnabled bool  `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	Total     int32 `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Completed int32 `protobuf:"varint,3,opt,name=completed" json:"completed,omitempty"`
	Failed    int32 `protobuf:"varint,4,opt,name=failed" json:"failed,omitempty"`
}

func (m *Progress) Reset()                    { *m = Progress{} }
func (m *Progress) String() string            { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()               {}
func (*Progress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Progress) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *Progress) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Progress) GetCompleted() int32 {
	if m != nil {
		return m.Completed
	}
	return 0
}

func (m *Progress) GetFailed() int32 {
	if m != nil {
		return m.Failed
	}
	return 0
}

type Details struct {
	IsEnabled       bool                 `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	DetailsExpanded *google_protobuf.Any `protobuf:"bytes,2,opt,name=details_expanded,json=detailsExpanded" json:"details_expanded,omitempty"`
}

func (m *Details) Reset()                    { *m = Details{} }
func (m *Details) String() string            { return proto.CompactTextString(m) }
func (*Details) ProtoMessage()               {}
func (*Details) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Details) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *Details) GetDetailsExpanded() *google_protobuf.Any {
	if m != nil {
		return m.DetailsExpanded
	}
	return nil
}

func init() {
	proto.RegisterType((*Feedback)(nil), "com.mindtickle.api.governance.feedback.Feedback")
	proto.RegisterType((*Progress)(nil), "com.mindtickle.api.governance.feedback.Progress")
	proto.RegisterType((*Details)(nil), "com.mindtickle.api.governance.feedback.Details")
	proto.RegisterEnum("com.mindtickle.api.governance.feedback.ParrotPacketType", ParrotPacketType_name, ParrotPacketType_value)
	proto.RegisterEnum("com.mindtickle.api.governance.feedback.Status", Status_name, Status_value)
}

func init() { proto.RegisterFile("feedback.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xd1, 0x8e, 0xd2, 0x40,
	0x14, 0xdd, 0xb2, 0x50, 0xd8, 0x8b, 0xd9, 0x6d, 0x26, 0xc4, 0x54, 0xa3, 0x06, 0x79, 0x30, 0x64,
	0x13, 0xa7, 0x86, 0x8d, 0xcf, 0xa6, 0x0b, 0xc5, 0x10, 0x71, 0x97, 0x4c, 0xeb, 0xc3, 0xfa, 0xd2,
	0x4c, 0xdb, 0x0b, 0x4e, 0x68, 0x3b, 0x4d, 0x67, 0x30, 0xf2, 0x63, 0x7e, 0x9f, 0xa1, 0x2d, 0xec,
	0xa3, 0x3c, 0xde, 0xd3, 0x73, 0xce, 0x9c, 0xdb, 0x73, 0xe1, 0x7a, 0x8d, 0x98, 0x44, 0x3c, 0xde,
	0xd2, 0xa2, 0x94, 0x5a, 0x92, 0x0f, 0xb1, 0xcc, 0x68, 0x26, 0xf2, 0x44, 0x8b, 0x78, 0x9b, 0x22,
	0xe5, 0x85, 0xa0, 0x1b, 0xf9, 0x1b, 0xcb, 0x9c, 0xe7, 0x31, 0xd2, 0x23, 0xfb, 0xf5, 0xab, 0x8d,
	0x94, 0x9b, 0x14, 0x9d, 0x4a, 0x15, 0xed, 0xd6, 0x0e, 0xcf, 0xf7, 0xb5, 0xc5, 0xe8, 0x6f, 0x0b,
	0x7a, 0xf3, 0x86, 0x47, 0xe6, 0x60, 0x2a, 0xcd, 0xf5, 0x4e, 0xd9, 0x97, 0x43, 0x63, 0x7c, 0x3d,
	0xa1, 0xf4, 0xbc, 0x07, 0xa8, 0x5f, 0xa9, 0x58, 0xa3, 0x26, 0x4b, 0xe8, 0x15, 0xa5, 0xdc, 0x94,
	0xa8, 0x94, 0xdd, 0x1e, 0x1a, 0xe3, 0xfe, 0xe4, 0xd3, 0xb9, 0x4e, 0xab, 0x46, 0xc7, 0x4e, 0x0e,
	0x64, 0x01, 0xdd, 0x04, 0x35, 0x17, 0xa9, 0xb2, 0x3b, 0x95, 0x99, 0x73, 0xae, 0xd9, 0xac, 0x96,
	0xb1, 0xa3, 0x9e, 0x2c, 0xe0, 0x3d, 0x2a, 0x2d, 0x32, 0xae, 0x31, 0x09, 0x63, 0x99, 0x15, 0x29,
	0x6a, 0x21, 0xf3, 0x50, 0x8b, 0x0c, 0x43, 0x85, 0xb1, 0xcc, 0x13, 0x65, 0x9b, 0x43, 0x63, 0xdc,
	0x61, 0xef, 0x4e, 0xc4, 0xe9, 0x89, 0x17, 0x88, 0x0c, 0xfd, 0x9a, 0x35, 0xda, 0x41, 0xef, 0x98,
	0x95, 0xbc, 0x05, 0x10, 0x2a, 0xc4, 0x9c, 0x47, 0x29, 0x26, 0xb6, 0x31, 0x34, 0xc6, 0x3d, 0x76,
	0x25, 0x94, 0x57, 0x03, 0x64, 0x00, 0x1d, 0x2d, 0x35, 0x4f, 0xed, 0x56, 0xe5, 0x5c, 0x0f, 0xe4,
	0x0d, 0x5c, 0x35, 0x09, 0x30, 0xa9, 0xfe, 0x77, 0x87, 0x3d, 0x03, 0xe4, 0x25, 0x98, 0x6b, 0x2e,
	0x0e, 0x76, 0xed, 0xea, 0x53, 0x33, 0x8d, 0x04, 0x74, 0x9b, 0xad, 0xfe, 0xf7, 0xea, 0x17, 0xb0,
	0x9a, 0xb5, 0x43, 0xfc, 0x53, 0xf0, 0x3c, 0xc1, 0xa4, 0x0a, 0xd0, 0x9f, 0x0c, 0x68, 0x7d, 0x0f,
	0xf4, 0x78, 0x0f, 0xd4, 0xcd, 0xf7, 0xec, 0xa6, 0x61, 0x7b, 0x0d, 0xf9, 0x76, 0x08, 0xd6, 0x8a,
	0x97, 0xa5, 0xd4, 0x2b, 0x1e, 0x6f, 0x51, 0x07, 0xfb, 0x02, 0xc9, 0x0b, 0xe8, 0xcd, 0x3d, 0x6f,
	0x76, 0xef, 0x4e, 0xbf, 0x59, 0x17, 0xb7, 0x4f, 0x60, 0xd6, 0xcd, 0x93, 0x1b, 0xe8, 0x3f, 0x3c,
	0x06, 0xa1, 0x1f, 0xb8, 0x2c, 0xf0, 0x66, 0xd6, 0xc5, 0x01, 0x58, 0x3c, 0x84, 0x2b, 0xf6, 0xf8,
	0x95, 0x79, 0xbe, 0x6f, 0x19, 0xa4, 0x0f, 0x5d, 0xff, 0xc7, 0x74, 0x7a, 0x18, 0x5a, 0x04, 0xc0,
	0x9c, 0xbb, 0x8b, 0xa5, 0x37, 0xb3, 0x2e, 0xc9, 0x00, 0xac, 0x95, 0xcb, 0x82, 0x85, 0xbb, 0x5c,
	0x3e, 0x85, 0x0d, 0xda, 0xbe, 0xff, 0xfc, 0xf3, 0x6e, 0x23, 0xf4, 0xaf, 0x5d, 0x74, 0xe8, 0xda,
	0xf9, 0x2e, 0xf2, 0x24, 0xa8, 0xba, 0x76, 0x9e, 0x7b, 0xfe, 0x58, 0xc5, 0x57, 0x4e, 0x11, 0x39,
	0xc7, 0xc6, 0x23, 0xb3, 0xc2, 0xee, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x05, 0x5d, 0x21, 0xac,
	0x2a, 0x03, 0x00, 0x00,
}
