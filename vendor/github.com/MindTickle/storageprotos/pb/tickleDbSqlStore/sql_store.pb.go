// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sql_store.proto

/*
Package tickleDbSqlStore is a generated protocol buffer package.

It is generated from these files:
	sql_store.proto

It has these top-level messages:
	BulkModifyRowsResponse
	ModifyRowsRequest
	ModifyRowsOneOf
	RowWithMask
	RequestContext
	UpdateRowsByIdRequest
	UpdateRowByIdRequest
	DeleteRowByIdRequest
	DeleteRowsByIdRequest
	UpdateRowsByQueryRequest
	UpdateRowsByQueryResponse
	UpdateRowByIdResponse
	DeleteRowsByQueryRequest
	ModifyRowsResponse
	CreateRowsRequest
	CreateRowsResponse
	ReplaceRowsRequest
	UpsertRowsRequest
	UpsertRowRequest
	DeleteRowsByQueryResponse
	DeleteRowByIdResponse
	Query
	Filter
	StringArray
	Int64Array
	Int32Array
	DoubleArray
	Value
	Mask
	UpsertRowsResponse
	UpsertRowResponse
	RowValue
	RowMeta
	AuthMeta
	Row
	ExecRequest
	ExecResponse
	SearchByQueryRequest
	SortBy
	SortField
	SearchRequest
	SearchResponse
	SqlRow
*/
package tickleDbSqlStore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Scope int32

const (
	Scope_SCOPE_UNSPECIFIED Scope = 0
	Scope_SINGLE_ROW        Scope = 1
	Scope_MULTI_ROW         Scope = 2
	Scope_ONE_ROW_OR_NONE   Scope = 3
	// when it is set to MULTI_ROW_BULK multiple write requests are sent at once to mysql, No ACK for each row.
	Scope_MULTI_ROW_NO_ACK Scope = 4
)

var Scope_name = map[int32]string{
	0: "SCOPE_UNSPECIFIED",
	1: "SINGLE_ROW",
	2: "MULTI_ROW",
	3: "ONE_ROW_OR_NONE",
	4: "MULTI_ROW_NO_ACK",
}
var Scope_value = map[string]int32{
	"SCOPE_UNSPECIFIED": 0,
	"SINGLE_ROW":        1,
	"MULTI_ROW":         2,
	"ONE_ROW_OR_NONE":   3,
	"MULTI_ROW_NO_ACK":  4,
}

func (x Scope) String() string {
	return proto.EnumName(Scope_name, int32(x))
}
func (Scope) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RequestContext_RowEventsFlag int32

const (
	RequestContext_ROW_EVENTS_UNSPECIFIED RequestContext_RowEventsFlag = 0
	RequestContext_ROW_EVENTS_DISABLED    RequestContext_RowEventsFlag = 1
	RequestContext_ROW_EVENTS_ENABLED     RequestContext_RowEventsFlag = 2
)

var RequestContext_RowEventsFlag_name = map[int32]string{
	0: "ROW_EVENTS_UNSPECIFIED",
	1: "ROW_EVENTS_DISABLED",
	2: "ROW_EVENTS_ENABLED",
}
var RequestContext_RowEventsFlag_value = map[string]int32{
	"ROW_EVENTS_UNSPECIFIED": 0,
	"ROW_EVENTS_DISABLED":    1,
	"ROW_EVENTS_ENABLED":     2,
}

func (x RequestContext_RowEventsFlag) String() string {
	return proto.EnumName(RequestContext_RowEventsFlag_name, int32(x))
}
func (RequestContext_RowEventsFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

// *
// List of supported logical operators for querying doc(s)
type Query_LogicalOperator int32

const (
	Query_LOGICAL_OPERATOR_UNSPECIFIED Query_LogicalOperator = 0
	Query_AND                          Query_LogicalOperator = 1
	Query_OR                           Query_LogicalOperator = 2
)

var Query_LogicalOperator_name = map[int32]string{
	0: "LOGICAL_OPERATOR_UNSPECIFIED",
	1: "AND",
	2: "OR",
}
var Query_LogicalOperator_value = map[string]int32{
	"LOGICAL_OPERATOR_UNSPECIFIED": 0,
	"AND": 1,
	"OR":  2,
}

func (x Query_LogicalOperator) String() string {
	return proto.EnumName(Query_LogicalOperator_name, int32(x))
}
func (Query_LogicalOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

// *
// List of supported predicates for querying doc(s)
type Filter_Predicate int32

const (
	Filter_PREDICATE_UNSPECIFIED Filter_Predicate = 0
	Filter_EQUAL                 Filter_Predicate = 1
	Filter_NOT_EQUAL             Filter_Predicate = 2
	Filter_GREATER               Filter_Predicate = 3
	Filter_LESSER                Filter_Predicate = 4
	Filter_IN                    Filter_Predicate = 5
	Filter_NOT_IN                Filter_Predicate = 6
	Filter_MATCH                 Filter_Predicate = 7
	Filter_GREATER_THAN_EQUAL    Filter_Predicate = 8
	Filter_LESSER_THAN_EQUAL     Filter_Predicate = 9
)

var Filter_Predicate_name = map[int32]string{
	0: "PREDICATE_UNSPECIFIED",
	1: "EQUAL",
	2: "NOT_EQUAL",
	3: "GREATER",
	4: "LESSER",
	5: "IN",
	6: "NOT_IN",
	7: "MATCH",
	8: "GREATER_THAN_EQUAL",
	9: "LESSER_THAN_EQUAL",
}
var Filter_Predicate_value = map[string]int32{
	"PREDICATE_UNSPECIFIED": 0,
	"EQUAL":                 1,
	"NOT_EQUAL":             2,
	"GREATER":               3,
	"LESSER":                4,
	"IN":                    5,
	"NOT_IN":                6,
	"MATCH":                 7,
	"GREATER_THAN_EQUAL":    8,
	"LESSER_THAN_EQUAL":     9,
}

func (x Filter_Predicate) String() string {
	return proto.EnumName(Filter_Predicate_name, int32(x))
}
func (Filter_Predicate) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 0} }

type SortField_SortOrder int32

const (
	SortField_SORT_ORDER_UNDEFINED SortField_SortOrder = 0
	SortField_DESC                 SortField_SortOrder = 1
	SortField_ASC                  SortField_SortOrder = 2
)

var SortField_SortOrder_name = map[int32]string{
	0: "SORT_ORDER_UNDEFINED",
	1: "DESC",
	2: "ASC",
}
var SortField_SortOrder_value = map[string]int32{
	"SORT_ORDER_UNDEFINED": 0,
	"DESC":                 1,
	"ASC":                  2,
}

func (x SortField_SortOrder) String() string {
	return proto.EnumName(SortField_SortOrder_name, int32(x))
}
func (SortField_SortOrder) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{39, 0} }

type BulkModifyRowsResponse struct {
}

func (m *BulkModifyRowsResponse) Reset()                    { *m = BulkModifyRowsResponse{} }
func (m *BulkModifyRowsResponse) String() string            { return proto.CompactTextString(m) }
func (*BulkModifyRowsResponse) ProtoMessage()               {}
func (*BulkModifyRowsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ModifyRowsRequest struct {
	Requests       []*ModifyRowsOneOf `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
	RequestContext *RequestContext    `protobuf:"bytes,2,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
}

func (m *ModifyRowsRequest) Reset()                    { *m = ModifyRowsRequest{} }
func (m *ModifyRowsRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyRowsRequest) ProtoMessage()               {}
func (*ModifyRowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ModifyRowsRequest) GetRequests() []*ModifyRowsOneOf {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *ModifyRowsRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

type ModifyRowsOneOf struct {
	// Types that are valid to be assigned to Request:
	//	*ModifyRowsOneOf_CreateRowsRequest
	//	*ModifyRowsOneOf_UpsertRowsRequest
	//	*ModifyRowsOneOf_UpdateRowsByQueryRequest
	//	*ModifyRowsOneOf_DeleteRowsByQueryRequest
	//	*ModifyRowsOneOf_UpdateRowsByIdRequest
	//	*ModifyRowsOneOf_DeleteRowsByIdRequest
	//	*ModifyRowsOneOf_ReplaceRowsRequest
	Request isModifyRowsOneOf_Request `protobuf_oneof:"Request"`
}

func (m *ModifyRowsOneOf) Reset()                    { *m = ModifyRowsOneOf{} }
func (m *ModifyRowsOneOf) String() string            { return proto.CompactTextString(m) }
func (*ModifyRowsOneOf) ProtoMessage()               {}
func (*ModifyRowsOneOf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isModifyRowsOneOf_Request interface {
	isModifyRowsOneOf_Request()
}

type ModifyRowsOneOf_CreateRowsRequest struct {
	CreateRowsRequest *CreateRowsRequest `protobuf:"bytes,1,opt,name=create_rows_request,json=createRowsRequest,oneof"`
}
type ModifyRowsOneOf_UpsertRowsRequest struct {
	UpsertRowsRequest *UpsertRowsRequest `protobuf:"bytes,2,opt,name=upsert_rows_request,json=upsertRowsRequest,oneof"`
}
type ModifyRowsOneOf_UpdateRowsByQueryRequest struct {
	UpdateRowsByQueryRequest *UpdateRowsByQueryRequest `protobuf:"bytes,3,opt,name=update_rows_by_query_request,json=updateRowsByQueryRequest,oneof"`
}
type ModifyRowsOneOf_DeleteRowsByQueryRequest struct {
	DeleteRowsByQueryRequest *DeleteRowsByQueryRequest `protobuf:"bytes,4,opt,name=delete_rows_by_query_request,json=deleteRowsByQueryRequest,oneof"`
}
type ModifyRowsOneOf_UpdateRowsByIdRequest struct {
	UpdateRowsByIdRequest *UpdateRowsByIdRequest `protobuf:"bytes,5,opt,name=update_rows_by_id_request,json=updateRowsByIdRequest,oneof"`
}
type ModifyRowsOneOf_DeleteRowsByIdRequest struct {
	DeleteRowsByIdRequest *DeleteRowsByIdRequest `protobuf:"bytes,6,opt,name=delete_rows_by_id_request,json=deleteRowsByIdRequest,oneof"`
}
type ModifyRowsOneOf_ReplaceRowsRequest struct {
	ReplaceRowsRequest *ReplaceRowsRequest `protobuf:"bytes,7,opt,name=replace_rows_request,json=replaceRowsRequest,oneof"`
}

func (*ModifyRowsOneOf_CreateRowsRequest) isModifyRowsOneOf_Request()        {}
func (*ModifyRowsOneOf_UpsertRowsRequest) isModifyRowsOneOf_Request()        {}
func (*ModifyRowsOneOf_UpdateRowsByQueryRequest) isModifyRowsOneOf_Request() {}
func (*ModifyRowsOneOf_DeleteRowsByQueryRequest) isModifyRowsOneOf_Request() {}
func (*ModifyRowsOneOf_UpdateRowsByIdRequest) isModifyRowsOneOf_Request()    {}
func (*ModifyRowsOneOf_DeleteRowsByIdRequest) isModifyRowsOneOf_Request()    {}
func (*ModifyRowsOneOf_ReplaceRowsRequest) isModifyRowsOneOf_Request()       {}

func (m *ModifyRowsOneOf) GetRequest() isModifyRowsOneOf_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ModifyRowsOneOf) GetCreateRowsRequest() *CreateRowsRequest {
	if x, ok := m.GetRequest().(*ModifyRowsOneOf_CreateRowsRequest); ok {
		return x.CreateRowsRequest
	}
	return nil
}

func (m *ModifyRowsOneOf) GetUpsertRowsRequest() *UpsertRowsRequest {
	if x, ok := m.GetRequest().(*ModifyRowsOneOf_UpsertRowsRequest); ok {
		return x.UpsertRowsRequest
	}
	return nil
}

func (m *ModifyRowsOneOf) GetUpdateRowsByQueryRequest() *UpdateRowsByQueryRequest {
	if x, ok := m.GetRequest().(*ModifyRowsOneOf_UpdateRowsByQueryRequest); ok {
		return x.UpdateRowsByQueryRequest
	}
	return nil
}

func (m *ModifyRowsOneOf) GetDeleteRowsByQueryRequest() *DeleteRowsByQueryRequest {
	if x, ok := m.GetRequest().(*ModifyRowsOneOf_DeleteRowsByQueryRequest); ok {
		return x.DeleteRowsByQueryRequest
	}
	return nil
}

func (m *ModifyRowsOneOf) GetUpdateRowsByIdRequest() *UpdateRowsByIdRequest {
	if x, ok := m.GetRequest().(*ModifyRowsOneOf_UpdateRowsByIdRequest); ok {
		return x.UpdateRowsByIdRequest
	}
	return nil
}

func (m *ModifyRowsOneOf) GetDeleteRowsByIdRequest() *DeleteRowsByIdRequest {
	if x, ok := m.GetRequest().(*ModifyRowsOneOf_DeleteRowsByIdRequest); ok {
		return x.DeleteRowsByIdRequest
	}
	return nil
}

func (m *ModifyRowsOneOf) GetReplaceRowsRequest() *ReplaceRowsRequest {
	if x, ok := m.GetRequest().(*ModifyRowsOneOf_ReplaceRowsRequest); ok {
		return x.ReplaceRowsRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ModifyRowsOneOf) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ModifyRowsOneOf_OneofMarshaler, _ModifyRowsOneOf_OneofUnmarshaler, _ModifyRowsOneOf_OneofSizer, []interface{}{
		(*ModifyRowsOneOf_CreateRowsRequest)(nil),
		(*ModifyRowsOneOf_UpsertRowsRequest)(nil),
		(*ModifyRowsOneOf_UpdateRowsByQueryRequest)(nil),
		(*ModifyRowsOneOf_DeleteRowsByQueryRequest)(nil),
		(*ModifyRowsOneOf_UpdateRowsByIdRequest)(nil),
		(*ModifyRowsOneOf_DeleteRowsByIdRequest)(nil),
		(*ModifyRowsOneOf_ReplaceRowsRequest)(nil),
	}
}

func _ModifyRowsOneOf_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ModifyRowsOneOf)
	// Request
	switch x := m.Request.(type) {
	case *ModifyRowsOneOf_CreateRowsRequest:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateRowsRequest); err != nil {
			return err
		}
	case *ModifyRowsOneOf_UpsertRowsRequest:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpsertRowsRequest); err != nil {
			return err
		}
	case *ModifyRowsOneOf_UpdateRowsByQueryRequest:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateRowsByQueryRequest); err != nil {
			return err
		}
	case *ModifyRowsOneOf_DeleteRowsByQueryRequest:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteRowsByQueryRequest); err != nil {
			return err
		}
	case *ModifyRowsOneOf_UpdateRowsByIdRequest:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateRowsByIdRequest); err != nil {
			return err
		}
	case *ModifyRowsOneOf_DeleteRowsByIdRequest:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteRowsByIdRequest); err != nil {
			return err
		}
	case *ModifyRowsOneOf_ReplaceRowsRequest:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplaceRowsRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ModifyRowsOneOf.Request has unexpected type %T", x)
	}
	return nil
}

func _ModifyRowsOneOf_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ModifyRowsOneOf)
	switch tag {
	case 1: // Request.create_rows_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateRowsRequest)
		err := b.DecodeMessage(msg)
		m.Request = &ModifyRowsOneOf_CreateRowsRequest{msg}
		return true, err
	case 2: // Request.upsert_rows_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpsertRowsRequest)
		err := b.DecodeMessage(msg)
		m.Request = &ModifyRowsOneOf_UpsertRowsRequest{msg}
		return true, err
	case 3: // Request.update_rows_by_query_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateRowsByQueryRequest)
		err := b.DecodeMessage(msg)
		m.Request = &ModifyRowsOneOf_UpdateRowsByQueryRequest{msg}
		return true, err
	case 4: // Request.delete_rows_by_query_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteRowsByQueryRequest)
		err := b.DecodeMessage(msg)
		m.Request = &ModifyRowsOneOf_DeleteRowsByQueryRequest{msg}
		return true, err
	case 5: // Request.update_rows_by_id_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateRowsByIdRequest)
		err := b.DecodeMessage(msg)
		m.Request = &ModifyRowsOneOf_UpdateRowsByIdRequest{msg}
		return true, err
	case 6: // Request.delete_rows_by_id_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteRowsByIdRequest)
		err := b.DecodeMessage(msg)
		m.Request = &ModifyRowsOneOf_DeleteRowsByIdRequest{msg}
		return true, err
	case 7: // Request.replace_rows_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReplaceRowsRequest)
		err := b.DecodeMessage(msg)
		m.Request = &ModifyRowsOneOf_ReplaceRowsRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ModifyRowsOneOf_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ModifyRowsOneOf)
	// Request
	switch x := m.Request.(type) {
	case *ModifyRowsOneOf_CreateRowsRequest:
		s := proto.Size(x.CreateRowsRequest)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ModifyRowsOneOf_UpsertRowsRequest:
		s := proto.Size(x.UpsertRowsRequest)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ModifyRowsOneOf_UpdateRowsByQueryRequest:
		s := proto.Size(x.UpdateRowsByQueryRequest)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ModifyRowsOneOf_DeleteRowsByQueryRequest:
		s := proto.Size(x.DeleteRowsByQueryRequest)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ModifyRowsOneOf_UpdateRowsByIdRequest:
		s := proto.Size(x.UpdateRowsByIdRequest)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ModifyRowsOneOf_DeleteRowsByIdRequest:
		s := proto.Size(x.DeleteRowsByIdRequest)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ModifyRowsOneOf_ReplaceRowsRequest:
		s := proto.Size(x.ReplaceRowsRequest)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RowWithMask struct {
	Row *Row `protobuf:"bytes,1,opt,name=row" json:"row,omitempty"`
}

func (m *RowWithMask) Reset()                    { *m = RowWithMask{} }
func (m *RowWithMask) String() string            { return proto.CompactTextString(m) }
func (*RowWithMask) ProtoMessage()               {}
func (*RowWithMask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RowWithMask) GetRow() *Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type RequestContext struct {
	TenantId      int64                        `protobuf:"varint,1,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	Namespace     string                       `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Env           string                       `protobuf:"bytes,3,opt,name=env" json:"env,omitempty"`
	RowEventsFlag RequestContext_RowEventsFlag `protobuf:"varint,4,opt,name=row_events_flag,json=rowEventsFlag,enum=com.mindtickle.storage.pb.tickleDbSqlStore.RequestContext_RowEventsFlag" json:"row_events_flag,omitempty"`
}

func (m *RequestContext) Reset()                    { *m = RequestContext{} }
func (m *RequestContext) String() string            { return proto.CompactTextString(m) }
func (*RequestContext) ProtoMessage()               {}
func (*RequestContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RequestContext) GetTenantId() int64 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

func (m *RequestContext) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RequestContext) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *RequestContext) GetRowEventsFlag() RequestContext_RowEventsFlag {
	if m != nil {
		return m.RowEventsFlag
	}
	return RequestContext_ROW_EVENTS_UNSPECIFIED
}

type UpdateRowsByIdRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Rows           []*Row          `protobuf:"bytes,4,rep,name=rows" json:"rows,omitempty"`
	Mask           *Mask           `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
	Scope          Scope           `protobuf:"varint,6,opt,name=scope,enum=com.mindtickle.storage.pb.tickleDbSqlStore.Scope" json:"scope,omitempty"`
}

func (m *UpdateRowsByIdRequest) Reset()                    { *m = UpdateRowsByIdRequest{} }
func (m *UpdateRowsByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRowsByIdRequest) ProtoMessage()               {}
func (*UpdateRowsByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateRowsByIdRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *UpdateRowsByIdRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *UpdateRowsByIdRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *UpdateRowsByIdRequest) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *UpdateRowsByIdRequest) GetMask() *Mask {
	if m != nil {
		return m.Mask
	}
	return nil
}

func (m *UpdateRowsByIdRequest) GetScope() Scope {
	if m != nil {
		return m.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

type UpdateRowByIdRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Row            *Row            `protobuf:"bytes,4,opt,name=row" json:"row,omitempty"`
	Mask           *Mask           `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
}

func (m *UpdateRowByIdRequest) Reset()                    { *m = UpdateRowByIdRequest{} }
func (m *UpdateRowByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRowByIdRequest) ProtoMessage()               {}
func (*UpdateRowByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateRowByIdRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *UpdateRowByIdRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *UpdateRowByIdRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *UpdateRowByIdRequest) GetRow() *Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *UpdateRowByIdRequest) GetMask() *Mask {
	if m != nil {
		return m.Mask
	}
	return nil
}

type DeleteRowByIdRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Id             string          `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	AuthMeta       *AuthMeta       `protobuf:"bytes,5,opt,name=auth_meta,json=authMeta" json:"auth_meta,omitempty"`
}

func (m *DeleteRowByIdRequest) Reset()                    { *m = DeleteRowByIdRequest{} }
func (m *DeleteRowByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRowByIdRequest) ProtoMessage()               {}
func (*DeleteRowByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteRowByIdRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *DeleteRowByIdRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *DeleteRowByIdRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *DeleteRowByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteRowByIdRequest) GetAuthMeta() *AuthMeta {
	if m != nil {
		return m.AuthMeta
	}
	return nil
}

type DeleteRowsByIdRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Ids            []string        `protobuf:"bytes,4,rep,name=ids" json:"ids,omitempty"`
	AuthMeta       *AuthMeta       `protobuf:"bytes,5,opt,name=auth_meta,json=authMeta" json:"auth_meta,omitempty"`
	Scope          Scope           `protobuf:"varint,6,opt,name=scope,enum=com.mindtickle.storage.pb.tickleDbSqlStore.Scope" json:"scope,omitempty"`
}

func (m *DeleteRowsByIdRequest) Reset()                    { *m = DeleteRowsByIdRequest{} }
func (m *DeleteRowsByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRowsByIdRequest) ProtoMessage()               {}
func (*DeleteRowsByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteRowsByIdRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *DeleteRowsByIdRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *DeleteRowsByIdRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *DeleteRowsByIdRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *DeleteRowsByIdRequest) GetAuthMeta() *AuthMeta {
	if m != nil {
		return m.AuthMeta
	}
	return nil
}

func (m *DeleteRowsByIdRequest) GetScope() Scope {
	if m != nil {
		return m.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

type UpdateRowsByQueryRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Query          *Query          `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	RowValue       *RowValue       `protobuf:"bytes,5,opt,name=row_value,json=rowValue" json:"row_value,omitempty"`
	Mask           *Mask           `protobuf:"bytes,8,opt,name=mask" json:"mask,omitempty"`
	Scope          Scope           `protobuf:"varint,9,opt,name=scope,enum=com.mindtickle.storage.pb.tickleDbSqlStore.Scope" json:"scope,omitempty"`
	BatchSize      int32           `protobuf:"varint,10,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
}

func (m *UpdateRowsByQueryRequest) Reset()                    { *m = UpdateRowsByQueryRequest{} }
func (m *UpdateRowsByQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRowsByQueryRequest) ProtoMessage()               {}
func (*UpdateRowsByQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateRowsByQueryRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *UpdateRowsByQueryRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *UpdateRowsByQueryRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *UpdateRowsByQueryRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *UpdateRowsByQueryRequest) GetRowValue() *RowValue {
	if m != nil {
		return m.RowValue
	}
	return nil
}

func (m *UpdateRowsByQueryRequest) GetMask() *Mask {
	if m != nil {
		return m.Mask
	}
	return nil
}

func (m *UpdateRowsByQueryRequest) GetScope() Scope {
	if m != nil {
		return m.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

func (m *UpdateRowsByQueryRequest) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

type UpdateRowsByQueryResponse struct {
	RowsAffected int32 `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected" json:"rows_affected,omitempty"`
}

func (m *UpdateRowsByQueryResponse) Reset()                    { *m = UpdateRowsByQueryResponse{} }
func (m *UpdateRowsByQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRowsByQueryResponse) ProtoMessage()               {}
func (*UpdateRowsByQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateRowsByQueryResponse) GetRowsAffected() int32 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

type UpdateRowByIdResponse struct {
}

func (m *UpdateRowByIdResponse) Reset()                    { *m = UpdateRowByIdResponse{} }
func (m *UpdateRowByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRowByIdResponse) ProtoMessage()               {}
func (*UpdateRowByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type DeleteRowsByQueryRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Query          *Query          `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Scope          Scope           `protobuf:"varint,5,opt,name=scope,enum=com.mindtickle.storage.pb.tickleDbSqlStore.Scope" json:"scope,omitempty"`
	BatchSize      int32           `protobuf:"varint,6,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	AuthMeta       *AuthMeta       `protobuf:"bytes,7,opt,name=auth_meta,json=authMeta" json:"auth_meta,omitempty"`
}

func (m *DeleteRowsByQueryRequest) Reset()                    { *m = DeleteRowsByQueryRequest{} }
func (m *DeleteRowsByQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRowsByQueryRequest) ProtoMessage()               {}
func (*DeleteRowsByQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteRowsByQueryRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *DeleteRowsByQueryRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *DeleteRowsByQueryRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *DeleteRowsByQueryRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *DeleteRowsByQueryRequest) GetScope() Scope {
	if m != nil {
		return m.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

func (m *DeleteRowsByQueryRequest) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *DeleteRowsByQueryRequest) GetAuthMeta() *AuthMeta {
	if m != nil {
		return m.AuthMeta
	}
	return nil
}

type ModifyRowsResponse struct {
}

func (m *ModifyRowsResponse) Reset()                    { *m = ModifyRowsResponse{} }
func (m *ModifyRowsResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyRowsResponse) ProtoMessage()               {}
func (*ModifyRowsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type CreateRowsRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Rows           []*Row          `protobuf:"bytes,4,rep,name=rows" json:"rows,omitempty"`
}

func (m *CreateRowsRequest) Reset()                    { *m = CreateRowsRequest{} }
func (m *CreateRowsRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRowsRequest) ProtoMessage()               {}
func (*CreateRowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateRowsRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *CreateRowsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *CreateRowsRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *CreateRowsRequest) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type CreateRowsResponse struct {
	RowsAffected int32 `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected" json:"rows_affected,omitempty"`
}

func (m *CreateRowsResponse) Reset()                    { *m = CreateRowsResponse{} }
func (m *CreateRowsResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRowsResponse) ProtoMessage()               {}
func (*CreateRowsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CreateRowsResponse) GetRowsAffected() int32 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

// this is for migration use case only
type ReplaceRowsRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Rows           []*Row          `protobuf:"bytes,4,rep,name=rows" json:"rows,omitempty"`
}

func (m *ReplaceRowsRequest) Reset()                    { *m = ReplaceRowsRequest{} }
func (m *ReplaceRowsRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplaceRowsRequest) ProtoMessage()               {}
func (*ReplaceRowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReplaceRowsRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *ReplaceRowsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ReplaceRowsRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *ReplaceRowsRequest) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type UpsertRowsRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Rows           []*Row          `protobuf:"bytes,4,rep,name=rows" json:"rows,omitempty"`
	Mask           *Mask           `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
}

func (m *UpsertRowsRequest) Reset()                    { *m = UpsertRowsRequest{} }
func (m *UpsertRowsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertRowsRequest) ProtoMessage()               {}
func (*UpsertRowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpsertRowsRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *UpsertRowsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *UpsertRowsRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *UpsertRowsRequest) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *UpsertRowsRequest) GetMask() *Mask {
	if m != nil {
		return m.Mask
	}
	return nil
}

type UpsertRowRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Row            *Row            `protobuf:"bytes,4,opt,name=row" json:"row,omitempty"`
	Mask           *Mask           `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
}

func (m *UpsertRowRequest) Reset()                    { *m = UpsertRowRequest{} }
func (m *UpsertRowRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertRowRequest) ProtoMessage()               {}
func (*UpsertRowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpsertRowRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *UpsertRowRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *UpsertRowRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *UpsertRowRequest) GetRow() *Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *UpsertRowRequest) GetMask() *Mask {
	if m != nil {
		return m.Mask
	}
	return nil
}

type DeleteRowsByQueryResponse struct {
	RowsAffected int32 `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected" json:"rows_affected,omitempty"`
}

func (m *DeleteRowsByQueryResponse) Reset()                    { *m = DeleteRowsByQueryResponse{} }
func (m *DeleteRowsByQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRowsByQueryResponse) ProtoMessage()               {}
func (*DeleteRowsByQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DeleteRowsByQueryResponse) GetRowsAffected() int32 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

type DeleteRowByIdResponse struct {
}

func (m *DeleteRowByIdResponse) Reset()                    { *m = DeleteRowByIdResponse{} }
func (m *DeleteRowByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRowByIdResponse) ProtoMessage()               {}
func (*DeleteRowByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

// *
// Query is for filtering doc(s). Query is composed of filters and queries itself.
// Logical operator joins filters and queries together.
// Example:
//  1.  (col1 EQUAL val1) OR ((col2 GREATER val2) AND (col3 IN [val31, val32]))
//       In the above example:
//         * "(col1 EQUAL val1)" is filter
//         * OR/AND are logical operator
//         * "((col2 GREATER val2) AND (col3 IN [val31, val32]))" is query which is
//            again composed of filter "(col2 GREATER val2)" and "(col3 IN [val31, val32])"
//
// Fields:
//  * repeated Filter: list of filter expressions. Please refer filter
//  * repeated Query: list of queries
//  * LogicalOperator: logical operator that joins filter and queries together
//  * negate: Setting it true fetches results that are not matched by query
//            Example:
//              If the query is "((col2 GREATER val2) AND (col3 IN [val31, val32]))", setting negate
//              makes it "NOT ((col2 GREATER val2) AND (col3 IN [val31, val32]))"
type Query struct {
	Filters         []*Filter             `protobuf:"bytes,1,rep,name=filters" json:"filters,omitempty"`
	Queries         []*Query              `protobuf:"bytes,2,rep,name=queries" json:"queries,omitempty"`
	LogicalOperator Query_LogicalOperator `protobuf:"varint,3,opt,name=logical_operator,json=logicalOperator,enum=com.mindtickle.storage.pb.tickleDbSqlStore.Query_LogicalOperator" json:"logical_operator,omitempty"`
	Negate          bool                  `protobuf:"varint,4,opt,name=negate" json:"negate,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Query) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Query) GetQueries() []*Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *Query) GetLogicalOperator() Query_LogicalOperator {
	if m != nil {
		return m.LogicalOperator
	}
	return Query_LOGICAL_OPERATOR_UNSPECIFIED
}

func (m *Query) GetNegate() bool {
	if m != nil {
		return m.Negate
	}
	return false
}

// *
// Expressions to filter out docs based on certain criteria.
//  Filters are the smallest filtering criteria. It is composed to make queries
// Fields:
//  * Field: The field which needs to be evaluated. It is the complete field path in json doc.
//  * Values: The value(s) on which field should be checked against
//  * Predicate: The predicate against which Field and value should be evaluated.
//  * negate: filters doc(s) that doesn't matches filter
// Examples:
//  * (col2 GREATER val2)
//  * (col1 EQUAL val1)
type Filter struct {
	Predicate Filter_Predicate `protobuf:"varint,1,opt,name=predicate,enum=com.mindtickle.storage.pb.tickleDbSqlStore.Filter_Predicate" json:"predicate,omitempty"`
	Field     string           `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
	Value     *Value           `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Negate    bool             `protobuf:"varint,4,opt,name=negate" json:"negate,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Filter) GetPredicate() Filter_Predicate {
	if m != nil {
		return m.Predicate
	}
	return Filter_PREDICATE_UNSPECIFIED
}

func (m *Filter) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *Filter) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Filter) GetNegate() bool {
	if m != nil {
		return m.Negate
	}
	return false
}

type StringArray struct {
	StringArray []string `protobuf:"bytes,1,rep,name=string_array,json=stringArray" json:"string_array,omitempty"`
}

func (m *StringArray) Reset()                    { *m = StringArray{} }
func (m *StringArray) String() string            { return proto.CompactTextString(m) }
func (*StringArray) ProtoMessage()               {}
func (*StringArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *StringArray) GetStringArray() []string {
	if m != nil {
		return m.StringArray
	}
	return nil
}

type Int64Array struct {
	Int64Array []int64 `protobuf:"varint,1,rep,packed,name=int64_array,json=int64Array" json:"int64_array,omitempty"`
}

func (m *Int64Array) Reset()                    { *m = Int64Array{} }
func (m *Int64Array) String() string            { return proto.CompactTextString(m) }
func (*Int64Array) ProtoMessage()               {}
func (*Int64Array) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Int64Array) GetInt64Array() []int64 {
	if m != nil {
		return m.Int64Array
	}
	return nil
}

type Int32Array struct {
	Int32Array []int32 `protobuf:"varint,1,rep,packed,name=int32_array,json=int32Array" json:"int32_array,omitempty"`
}

func (m *Int32Array) Reset()                    { *m = Int32Array{} }
func (m *Int32Array) String() string            { return proto.CompactTextString(m) }
func (*Int32Array) ProtoMessage()               {}
func (*Int32Array) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Int32Array) GetInt32Array() []int32 {
	if m != nil {
		return m.Int32Array
	}
	return nil
}

type DoubleArray struct {
	DoubleArray []float64 `protobuf:"fixed64,1,rep,packed,name=double_array,json=doubleArray" json:"double_array,omitempty"`
}

func (m *DoubleArray) Reset()                    { *m = DoubleArray{} }
func (m *DoubleArray) String() string            { return proto.CompactTextString(m) }
func (*DoubleArray) ProtoMessage()               {}
func (*DoubleArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *DoubleArray) GetDoubleArray() []float64 {
	if m != nil {
		return m.DoubleArray
	}
	return nil
}

type Value struct {
	// Must have a value set.
	//
	// Types that are valid to be assigned to ValueType:
	//	*Value_BooleanValue
	//	*Value_Int32Value
	//	*Value_Int64Value
	//	*Value_DoubleValue
	//	*Value_StringValue
	//	*Value_NullValue
	//	*Value_Int32ArrayValue
	//	*Value_Int64ArrayValue
	//	*Value_StringArrayValue
	//	*Value_DoubleArrayValue
	ValueType isValue_ValueType `protobuf_oneof:"value_type"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type isValue_ValueType interface {
	isValue_ValueType()
}

type Value_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,1,opt,name=boolean_value,json=booleanValue,oneof"`
}
type Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,2,opt,name=int32_value,json=int32Value,oneof"`
}
type Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,oneof"`
}
type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,oneof"`
}
type Value_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,oneof"`
}
type Value_NullValue struct {
	NullValue google_protobuf.NullValue `protobuf:"varint,6,opt,name=null_value,json=nullValue,enum=google.protobuf.NullValue,oneof"`
}
type Value_Int32ArrayValue struct {
	Int32ArrayValue *Int32Array `protobuf:"bytes,7,opt,name=int32_array_value,json=int32ArrayValue,oneof"`
}
type Value_Int64ArrayValue struct {
	Int64ArrayValue *Int64Array `protobuf:"bytes,8,opt,name=int64_array_value,json=int64ArrayValue,oneof"`
}
type Value_StringArrayValue struct {
	StringArrayValue *StringArray `protobuf:"bytes,9,opt,name=string_array_value,json=stringArrayValue,oneof"`
}
type Value_DoubleArrayValue struct {
	DoubleArrayValue *DoubleArray `protobuf:"bytes,10,opt,name=double_array_value,json=doubleArrayValue,oneof"`
}

func (*Value_BooleanValue) isValue_ValueType()     {}
func (*Value_Int32Value) isValue_ValueType()       {}
func (*Value_Int64Value) isValue_ValueType()       {}
func (*Value_DoubleValue) isValue_ValueType()      {}
func (*Value_StringValue) isValue_ValueType()      {}
func (*Value_NullValue) isValue_ValueType()        {}
func (*Value_Int32ArrayValue) isValue_ValueType()  {}
func (*Value_Int64ArrayValue) isValue_ValueType()  {}
func (*Value_StringArrayValue) isValue_ValueType() {}
func (*Value_DoubleArrayValue) isValue_ValueType() {}

func (m *Value) GetValueType() isValue_ValueType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

func (m *Value) GetBooleanValue() bool {
	if x, ok := m.GetValueType().(*Value_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (m *Value) GetInt32Value() int32 {
	if x, ok := m.GetValueType().(*Value_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *Value) GetInt64Value() int64 {
	if x, ok := m.GetValueType().(*Value_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if x, ok := m.GetValueType().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Value) GetStringValue() string {
	if x, ok := m.GetValueType().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Value) GetNullValue() google_protobuf.NullValue {
	if x, ok := m.GetValueType().(*Value_NullValue); ok {
		return x.NullValue
	}
	return google_protobuf.NullValue_NULL_VALUE
}

func (m *Value) GetInt32ArrayValue() *Int32Array {
	if x, ok := m.GetValueType().(*Value_Int32ArrayValue); ok {
		return x.Int32ArrayValue
	}
	return nil
}

func (m *Value) GetInt64ArrayValue() *Int64Array {
	if x, ok := m.GetValueType().(*Value_Int64ArrayValue); ok {
		return x.Int64ArrayValue
	}
	return nil
}

func (m *Value) GetStringArrayValue() *StringArray {
	if x, ok := m.GetValueType().(*Value_StringArrayValue); ok {
		return x.StringArrayValue
	}
	return nil
}

func (m *Value) GetDoubleArrayValue() *DoubleArray {
	if x, ok := m.GetValueType().(*Value_DoubleArrayValue); ok {
		return x.DoubleArrayValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_BooleanValue)(nil),
		(*Value_Int32Value)(nil),
		(*Value_Int64Value)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_NullValue)(nil),
		(*Value_Int32ArrayValue)(nil),
		(*Value_Int64ArrayValue)(nil),
		(*Value_StringArrayValue)(nil),
		(*Value_DoubleArrayValue)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// value_type
	switch x := m.ValueType.(type) {
	case *Value_BooleanValue:
		t := uint64(0)
		if x.BooleanValue {
			t = 1
		}
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Value_Int32Value:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int32Value))
	case *Value_Int64Value:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *Value_DoubleValue:
		b.EncodeVarint(4<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Value_StringValue:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *Value_NullValue:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.NullValue))
	case *Value_Int32ArrayValue:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int32ArrayValue); err != nil {
			return err
		}
	case *Value_Int64ArrayValue:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64ArrayValue); err != nil {
			return err
		}
	case *Value_StringArrayValue:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringArrayValue); err != nil {
			return err
		}
	case *Value_DoubleArrayValue:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoubleArrayValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Value.ValueType has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // value_type.boolean_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueType = &Value_BooleanValue{x != 0}
		return true, err
	case 2: // value_type.int32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueType = &Value_Int32Value{int32(x)}
		return true, err
	case 3: // value_type.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueType = &Value_Int64Value{int64(x)}
		return true, err
	case 4: // value_type.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.ValueType = &Value_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 5: // value_type.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ValueType = &Value_StringValue{x}
		return true, err
	case 6: // value_type.null_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueType = &Value_NullValue{google_protobuf.NullValue(x)}
		return true, err
	case 7: // value_type.int32_array_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int32Array)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_Int32ArrayValue{msg}
		return true, err
	case 8: // value_type.int64_array_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int64Array)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_Int64ArrayValue{msg}
		return true, err
	case 9: // value_type.string_array_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringArray)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_StringArrayValue{msg}
		return true, err
	case 10: // value_type.double_array_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DoubleArray)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_DoubleArrayValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// value_type
	switch x := m.ValueType.(type) {
	case *Value_BooleanValue:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *Value_Int32Value:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int32Value))
	case *Value_Int64Value:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *Value_DoubleValue:
		n += proto.SizeVarint(4<<3 | proto.WireFixed64)
		n += 8
	case *Value_StringValue:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Value_NullValue:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.NullValue))
	case *Value_Int32ArrayValue:
		s := proto.Size(x.Int32ArrayValue)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_Int64ArrayValue:
		s := proto.Size(x.Int64ArrayValue)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_StringArrayValue:
		s := proto.Size(x.StringArrayValue)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_DoubleArrayValue:
		s := proto.Size(x.DoubleArrayValue)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Mask struct {
	//    oneof MaskValue {
	//        string MASK_UNSPECIFIED = 0;
	//    }
	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (m *Mask) Reset()                    { *m = Mask{} }
func (m *Mask) String() string            { return proto.CompactTextString(m) }
func (*Mask) ProtoMessage()               {}
func (*Mask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Mask) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpsertRowsResponse struct {
	RowsAffected int32 `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected" json:"rows_affected,omitempty"`
}

func (m *UpsertRowsResponse) Reset()                    { *m = UpsertRowsResponse{} }
func (m *UpsertRowsResponse) String() string            { return proto.CompactTextString(m) }
func (*UpsertRowsResponse) ProtoMessage()               {}
func (*UpsertRowsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *UpsertRowsResponse) GetRowsAffected() int32 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

type UpsertRowResponse struct {
	RowsAffected int32 `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected" json:"rows_affected,omitempty"`
}

func (m *UpsertRowResponse) Reset()                    { *m = UpsertRowResponse{} }
func (m *UpsertRowResponse) String() string            { return proto.CompactTextString(m) }
func (*UpsertRowResponse) ProtoMessage()               {}
func (*UpsertRowResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *UpsertRowResponse) GetRowsAffected() int32 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

type RowValue struct {
	RowInBytes []byte    `protobuf:"bytes,1,opt,name=row_in_bytes,json=rowInBytes,proto3" json:"row_in_bytes,omitempty"`
	RowMeta    *RowMeta  `protobuf:"bytes,2,opt,name=row_meta,json=rowMeta" json:"row_meta,omitempty"`
	AuthMeta   *AuthMeta `protobuf:"bytes,3,opt,name=auth_meta,json=authMeta" json:"auth_meta,omitempty"`
}

func (m *RowValue) Reset()                    { *m = RowValue{} }
func (m *RowValue) String() string            { return proto.CompactTextString(m) }
func (*RowValue) ProtoMessage()               {}
func (*RowValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *RowValue) GetRowInBytes() []byte {
	if m != nil {
		return m.RowInBytes
	}
	return nil
}

func (m *RowValue) GetRowMeta() *RowMeta {
	if m != nil {
		return m.RowMeta
	}
	return nil
}

func (m *RowValue) GetAuthMeta() *AuthMeta {
	if m != nil {
		return m.AuthMeta
	}
	return nil
}

type RowMeta struct {
	CreateTime *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Version    int64                       `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *RowMeta) Reset()                    { *m = RowMeta{} }
func (m *RowMeta) String() string            { return proto.CompactTextString(m) }
func (*RowMeta) ProtoMessage()               {}
func (*RowMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *RowMeta) GetCreateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *RowMeta) GetUpdateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *RowMeta) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type AuthMeta struct {
	GlobalContextId string `protobuf:"bytes,1,opt,name=global_context_id,json=globalContextId" json:"global_context_id,omitempty"`
	AuthId          string `protobuf:"bytes,2,opt,name=auth_id,json=authId" json:"auth_id,omitempty"`
}

func (m *AuthMeta) Reset()                    { *m = AuthMeta{} }
func (m *AuthMeta) String() string            { return proto.CompactTextString(m) }
func (*AuthMeta) ProtoMessage()               {}
func (*AuthMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *AuthMeta) GetGlobalContextId() string {
	if m != nil {
		return m.GlobalContextId
	}
	return ""
}

func (m *AuthMeta) GetAuthId() string {
	if m != nil {
		return m.AuthId
	}
	return ""
}

type Row struct {
	Id       string    `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	RowValue *RowValue `protobuf:"bytes,1,opt,name=row_value,json=rowValue" json:"row_value,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Row) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Row) GetRowValue() *RowValue {
	if m != nil {
		return m.RowValue
	}
	return nil
}

type ExecRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	SqlStatements  []string        `protobuf:"bytes,2,rep,name=sql_statements,json=sqlStatements" json:"sql_statements,omitempty"`
	Project        string          `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (m *ExecRequest) Reset()                    { *m = ExecRequest{} }
func (m *ExecRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()               {}
func (*ExecRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ExecRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *ExecRequest) GetSqlStatements() []string {
	if m != nil {
		return m.SqlStatements
	}
	return nil
}

func (m *ExecRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

// *
// value given here is extracted as it is from mysql-driver,
// all mysql limitations are applicable on rows_affected.
// Note rows affected is cumulative value of all the individual exec statements
type ExecResponse struct {
	RowsAffected int64 `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected" json:"rows_affected,omitempty"`
}

func (m *ExecResponse) Reset()                    { *m = ExecResponse{} }
func (m *ExecResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecResponse) ProtoMessage()               {}
func (*ExecResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ExecResponse) GetRowsAffected() int64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

type SearchByQueryRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	TableName      string          `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	// To make things backward compatible we are still we fallback to query if QueryOneOf is not set
	// this will be removed in future releases
	Query *Query `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	// this is the recommended field to pass the query in input
	//
	// Types that are valid to be assigned to QueryOneOf:
	//	*SearchByQueryRequest_StructuredWhereClause
	//	*SearchByQueryRequest_UnstructuredWhereClause
	QueryOneOf isSearchByQueryRequest_QueryOneOf `protobuf_oneof:"QueryOneOf"`
	// sort and pagination
	Skip   int64   `protobuf:"varint,5,opt,name=skip" json:"skip,omitempty"`
	Limit  int64   `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	SortBy *SortBy `protobuf:"bytes,7,opt,name=sort_by,json=sortBy" json:"sort_by,omitempty"`
}

func (m *SearchByQueryRequest) Reset()                    { *m = SearchByQueryRequest{} }
func (m *SearchByQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchByQueryRequest) ProtoMessage()               {}
func (*SearchByQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

type isSearchByQueryRequest_QueryOneOf interface {
	isSearchByQueryRequest_QueryOneOf()
}

type SearchByQueryRequest_StructuredWhereClause struct {
	StructuredWhereClause *Query `protobuf:"bytes,8,opt,name=structured_where_clause,json=structuredWhereClause,oneof"`
}
type SearchByQueryRequest_UnstructuredWhereClause struct {
	UnstructuredWhereClause string `protobuf:"bytes,9,opt,name=unstructured_where_clause,json=unstructuredWhereClause,oneof"`
}

func (*SearchByQueryRequest_StructuredWhereClause) isSearchByQueryRequest_QueryOneOf()   {}
func (*SearchByQueryRequest_UnstructuredWhereClause) isSearchByQueryRequest_QueryOneOf() {}

func (m *SearchByQueryRequest) GetQueryOneOf() isSearchByQueryRequest_QueryOneOf {
	if m != nil {
		return m.QueryOneOf
	}
	return nil
}

func (m *SearchByQueryRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *SearchByQueryRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *SearchByQueryRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *SearchByQueryRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SearchByQueryRequest) GetStructuredWhereClause() *Query {
	if x, ok := m.GetQueryOneOf().(*SearchByQueryRequest_StructuredWhereClause); ok {
		return x.StructuredWhereClause
	}
	return nil
}

func (m *SearchByQueryRequest) GetUnstructuredWhereClause() string {
	if x, ok := m.GetQueryOneOf().(*SearchByQueryRequest_UnstructuredWhereClause); ok {
		return x.UnstructuredWhereClause
	}
	return ""
}

func (m *SearchByQueryRequest) GetSkip() int64 {
	if m != nil {
		return m.Skip
	}
	return 0
}

func (m *SearchByQueryRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchByQueryRequest) GetSortBy() *SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SearchByQueryRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SearchByQueryRequest_OneofMarshaler, _SearchByQueryRequest_OneofUnmarshaler, _SearchByQueryRequest_OneofSizer, []interface{}{
		(*SearchByQueryRequest_StructuredWhereClause)(nil),
		(*SearchByQueryRequest_UnstructuredWhereClause)(nil),
	}
}

func _SearchByQueryRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SearchByQueryRequest)
	// QueryOneOf
	switch x := m.QueryOneOf.(type) {
	case *SearchByQueryRequest_StructuredWhereClause:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructuredWhereClause); err != nil {
			return err
		}
	case *SearchByQueryRequest_UnstructuredWhereClause:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.UnstructuredWhereClause)
	case nil:
	default:
		return fmt.Errorf("SearchByQueryRequest.QueryOneOf has unexpected type %T", x)
	}
	return nil
}

func _SearchByQueryRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SearchByQueryRequest)
	switch tag {
	case 8: // QueryOneOf.structured_where_clause
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Query)
		err := b.DecodeMessage(msg)
		m.QueryOneOf = &SearchByQueryRequest_StructuredWhereClause{msg}
		return true, err
	case 9: // QueryOneOf.unstructured_where_clause
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.QueryOneOf = &SearchByQueryRequest_UnstructuredWhereClause{x}
		return true, err
	default:
		return false, nil
	}
}

func _SearchByQueryRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SearchByQueryRequest)
	// QueryOneOf
	switch x := m.QueryOneOf.(type) {
	case *SearchByQueryRequest_StructuredWhereClause:
		s := proto.Size(x.StructuredWhereClause)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchByQueryRequest_UnstructuredWhereClause:
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.UnstructuredWhereClause)))
		n += len(x.UnstructuredWhereClause)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SortBy struct {
	SortFields []*SortField `protobuf:"bytes,1,rep,name=sort_fields,json=sortFields" json:"sort_fields,omitempty"`
}

func (m *SortBy) Reset()                    { *m = SortBy{} }
func (m *SortBy) String() string            { return proto.CompactTextString(m) }
func (*SortBy) ProtoMessage()               {}
func (*SortBy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *SortBy) GetSortFields() []*SortField {
	if m != nil {
		return m.SortFields
	}
	return nil
}

type SortField struct {
	SortOrder SortField_SortOrder `protobuf:"varint,1,opt,name=sort_order,json=sortOrder,enum=com.mindtickle.storage.pb.tickleDbSqlStore.SortField_SortOrder" json:"sort_order,omitempty"`
	Field     string              `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
}

func (m *SortField) Reset()                    { *m = SortField{} }
func (m *SortField) String() string            { return proto.CompactTextString(m) }
func (*SortField) ProtoMessage()               {}
func (*SortField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *SortField) GetSortOrder() SortField_SortOrder {
	if m != nil {
		return m.SortOrder
	}
	return SortField_SORT_ORDER_UNDEFINED
}

func (m *SortField) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type SearchRequest struct {
	RequestContext *RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	SqlStatement   string          `protobuf:"bytes,3,opt,name=sql_statement,json=sqlStatement" json:"sql_statement,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *SearchRequest) GetRequestContext() *RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *SearchRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *SearchRequest) GetSqlStatement() string {
	if m != nil {
		return m.SqlStatement
	}
	return ""
}

type SearchResponse struct {
	// this field contains rows with columns from one or more than one table while joins.
	Rows []*SqlRow `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	// when search request is made using SearchByQueryRequest, result set belongs to a single table.
	// apart from the domain object this field can be used to extract row meta, auth meta, version
	// this field helps to achieve optimistic locking.
	ResultSet []*Row `protobuf:"bytes,2,rep,name=resultSet" json:"resultSet,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *SearchResponse) GetRows() []*SqlRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *SearchResponse) GetResultSet() []*Row {
	if m != nil {
		return m.ResultSet
	}
	return nil
}

type SqlRow struct {
	// this will be deprecated in the long term.
	Data map[string][]byte `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// It is recommended to use this field, this byte array
	// can be directly de-serialized into domain object in respective languages
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SqlRow) Reset()                    { *m = SqlRow{} }
func (m *SqlRow) String() string            { return proto.CompactTextString(m) }
func (*SqlRow) ProtoMessage()               {}
func (*SqlRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *SqlRow) GetData() map[string][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SqlRow) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*BulkModifyRowsResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.BulkModifyRowsResponse")
	proto.RegisterType((*ModifyRowsRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.ModifyRowsRequest")
	proto.RegisterType((*ModifyRowsOneOf)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.ModifyRowsOneOf")
	proto.RegisterType((*RowWithMask)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.RowWithMask")
	proto.RegisterType((*RequestContext)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.RequestContext")
	proto.RegisterType((*UpdateRowsByIdRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.UpdateRowsByIdRequest")
	proto.RegisterType((*UpdateRowByIdRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.UpdateRowByIdRequest")
	proto.RegisterType((*DeleteRowByIdRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.DeleteRowByIdRequest")
	proto.RegisterType((*DeleteRowsByIdRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.DeleteRowsByIdRequest")
	proto.RegisterType((*UpdateRowsByQueryRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.UpdateRowsByQueryRequest")
	proto.RegisterType((*UpdateRowsByQueryResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.UpdateRowsByQueryResponse")
	proto.RegisterType((*UpdateRowByIdResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.UpdateRowByIdResponse")
	proto.RegisterType((*DeleteRowsByQueryRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.DeleteRowsByQueryRequest")
	proto.RegisterType((*ModifyRowsResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.ModifyRowsResponse")
	proto.RegisterType((*CreateRowsRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.CreateRowsRequest")
	proto.RegisterType((*CreateRowsResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.CreateRowsResponse")
	proto.RegisterType((*ReplaceRowsRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.ReplaceRowsRequest")
	proto.RegisterType((*UpsertRowsRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.UpsertRowsRequest")
	proto.RegisterType((*UpsertRowRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.UpsertRowRequest")
	proto.RegisterType((*DeleteRowsByQueryResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.DeleteRowsByQueryResponse")
	proto.RegisterType((*DeleteRowByIdResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.DeleteRowByIdResponse")
	proto.RegisterType((*Query)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.Query")
	proto.RegisterType((*Filter)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.Filter")
	proto.RegisterType((*StringArray)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.StringArray")
	proto.RegisterType((*Int64Array)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.Int64Array")
	proto.RegisterType((*Int32Array)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.Int32Array")
	proto.RegisterType((*DoubleArray)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.DoubleArray")
	proto.RegisterType((*Value)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.Value")
	proto.RegisterType((*Mask)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.Mask")
	proto.RegisterType((*UpsertRowsResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.UpsertRowsResponse")
	proto.RegisterType((*UpsertRowResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.UpsertRowResponse")
	proto.RegisterType((*RowValue)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.RowValue")
	proto.RegisterType((*RowMeta)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.RowMeta")
	proto.RegisterType((*AuthMeta)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.AuthMeta")
	proto.RegisterType((*Row)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.Row")
	proto.RegisterType((*ExecRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.ExecRequest")
	proto.RegisterType((*ExecResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.ExecResponse")
	proto.RegisterType((*SearchByQueryRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.SearchByQueryRequest")
	proto.RegisterType((*SortBy)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.SortBy")
	proto.RegisterType((*SortField)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.SortField")
	proto.RegisterType((*SearchRequest)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.SearchResponse")
	proto.RegisterType((*SqlRow)(nil), "com.mindtickle.storage.pb.tickleDbSqlStore.SqlRow")
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDbSqlStore.Scope", Scope_name, Scope_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDbSqlStore.RequestContext_RowEventsFlag", RequestContext_RowEventsFlag_name, RequestContext_RowEventsFlag_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDbSqlStore.Query_LogicalOperator", Query_LogicalOperator_name, Query_LogicalOperator_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDbSqlStore.Filter_Predicate", Filter_Predicate_name, Filter_Predicate_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDbSqlStore.SortField_SortOrder", SortField_SortOrder_name, SortField_SortOrder_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SqlStore service

type SqlStoreClient interface {
	CreateRows(ctx context.Context, in *CreateRowsRequest, opts ...grpc.CallOption) (*CreateRowsResponse, error)
	UpdateRowsByQuery(ctx context.Context, in *UpdateRowsByQueryRequest, opts ...grpc.CallOption) (*UpdateRowsByQueryResponse, error)
	UpdateRowById(ctx context.Context, in *UpdateRowByIdRequest, opts ...grpc.CallOption) (*UpdateRowByIdResponse, error)
	DeleteRowsByQuery(ctx context.Context, in *DeleteRowsByQueryRequest, opts ...grpc.CallOption) (*DeleteRowsByQueryResponse, error)
	DeleteRowById(ctx context.Context, in *DeleteRowByIdRequest, opts ...grpc.CallOption) (*DeleteRowByIdResponse, error)
	UpsertRow(ctx context.Context, in *UpsertRowRequest, opts ...grpc.CallOption) (*UpsertRowResponse, error)
	// accepts asql string for now, can add the recursive query object here. Need clarity on this
	// since searchDocs is being used in services, where they send query object rather than sql string
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// accepts query object - for integration team use csae
	SearchByQuery(ctx context.Context, in *SearchByQueryRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	ModifyRows(ctx context.Context, in *ModifyRowsRequest, opts ...grpc.CallOption) (*ModifyRowsResponse, error)
	// can use this for create table
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
}

type sqlStoreClient struct {
	cc *grpc.ClientConn
}

func NewSqlStoreClient(cc *grpc.ClientConn) SqlStoreClient {
	return &sqlStoreClient{cc}
}

func (c *sqlStoreClient) CreateRows(ctx context.Context, in *CreateRowsRequest, opts ...grpc.CallOption) (*CreateRowsResponse, error) {
	out := new(CreateRowsResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/CreateRows", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlStoreClient) UpdateRowsByQuery(ctx context.Context, in *UpdateRowsByQueryRequest, opts ...grpc.CallOption) (*UpdateRowsByQueryResponse, error) {
	out := new(UpdateRowsByQueryResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/UpdateRowsByQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlStoreClient) UpdateRowById(ctx context.Context, in *UpdateRowByIdRequest, opts ...grpc.CallOption) (*UpdateRowByIdResponse, error) {
	out := new(UpdateRowByIdResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/UpdateRowById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlStoreClient) DeleteRowsByQuery(ctx context.Context, in *DeleteRowsByQueryRequest, opts ...grpc.CallOption) (*DeleteRowsByQueryResponse, error) {
	out := new(DeleteRowsByQueryResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/DeleteRowsByQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlStoreClient) DeleteRowById(ctx context.Context, in *DeleteRowByIdRequest, opts ...grpc.CallOption) (*DeleteRowByIdResponse, error) {
	out := new(DeleteRowByIdResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/DeleteRowById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlStoreClient) UpsertRow(ctx context.Context, in *UpsertRowRequest, opts ...grpc.CallOption) (*UpsertRowResponse, error) {
	out := new(UpsertRowResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/UpsertRow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlStoreClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlStoreClient) SearchByQuery(ctx context.Context, in *SearchByQueryRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/SearchByQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlStoreClient) ModifyRows(ctx context.Context, in *ModifyRowsRequest, opts ...grpc.CallOption) (*ModifyRowsResponse, error) {
	out := new(ModifyRowsResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/ModifyRows", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlStoreClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SqlStore service

type SqlStoreServer interface {
	CreateRows(context.Context, *CreateRowsRequest) (*CreateRowsResponse, error)
	UpdateRowsByQuery(context.Context, *UpdateRowsByQueryRequest) (*UpdateRowsByQueryResponse, error)
	UpdateRowById(context.Context, *UpdateRowByIdRequest) (*UpdateRowByIdResponse, error)
	DeleteRowsByQuery(context.Context, *DeleteRowsByQueryRequest) (*DeleteRowsByQueryResponse, error)
	DeleteRowById(context.Context, *DeleteRowByIdRequest) (*DeleteRowByIdResponse, error)
	UpsertRow(context.Context, *UpsertRowRequest) (*UpsertRowResponse, error)
	// accepts asql string for now, can add the recursive query object here. Need clarity on this
	// since searchDocs is being used in services, where they send query object rather than sql string
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// accepts query object - for integration team use csae
	SearchByQuery(context.Context, *SearchByQueryRequest) (*SearchResponse, error)
	ModifyRows(context.Context, *ModifyRowsRequest) (*ModifyRowsResponse, error)
	// can use this for create table
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
}

func RegisterSqlStoreServer(s *grpc.Server, srv SqlStoreServer) {
	s.RegisterService(&_SqlStore_serviceDesc, srv)
}

func _SqlStore_CreateRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlStoreServer).CreateRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/CreateRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlStoreServer).CreateRows(ctx, req.(*CreateRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlStore_UpdateRowsByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowsByQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlStoreServer).UpdateRowsByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/UpdateRowsByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlStoreServer).UpdateRowsByQuery(ctx, req.(*UpdateRowsByQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlStore_UpdateRowById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlStoreServer).UpdateRowById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/UpdateRowById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlStoreServer).UpdateRowById(ctx, req.(*UpdateRowByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlStore_DeleteRowsByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowsByQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlStoreServer).DeleteRowsByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/DeleteRowsByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlStoreServer).DeleteRowsByQuery(ctx, req.(*DeleteRowsByQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlStore_DeleteRowById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlStoreServer).DeleteRowById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/DeleteRowById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlStoreServer).DeleteRowById(ctx, req.(*DeleteRowByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlStore_UpsertRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlStoreServer).UpsertRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/UpsertRow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlStoreServer).UpsertRow(ctx, req.(*UpsertRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlStore_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlStoreServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlStoreServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlStore_SearchByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlStoreServer).SearchByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/SearchByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlStoreServer).SearchByQuery(ctx, req.(*SearchByQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlStore_ModifyRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlStoreServer).ModifyRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/ModifyRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlStoreServer).ModifyRows(ctx, req.(*ModifyRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlStore_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlStoreServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlStoreServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SqlStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.mindtickle.storage.pb.tickleDbSqlStore.SqlStore",
	HandlerType: (*SqlStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRows",
			Handler:    _SqlStore_CreateRows_Handler,
		},
		{
			MethodName: "UpdateRowsByQuery",
			Handler:    _SqlStore_UpdateRowsByQuery_Handler,
		},
		{
			MethodName: "UpdateRowById",
			Handler:    _SqlStore_UpdateRowById_Handler,
		},
		{
			MethodName: "DeleteRowsByQuery",
			Handler:    _SqlStore_DeleteRowsByQuery_Handler,
		},
		{
			MethodName: "DeleteRowById",
			Handler:    _SqlStore_DeleteRowById_Handler,
		},
		{
			MethodName: "UpsertRow",
			Handler:    _SqlStore_UpsertRow_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _SqlStore_Search_Handler,
		},
		{
			MethodName: "SearchByQuery",
			Handler:    _SqlStore_SearchByQuery_Handler,
		},
		{
			MethodName: "ModifyRows",
			Handler:    _SqlStore_ModifyRows_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _SqlStore_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sql_store.proto",
}

func init() { proto.RegisterFile("sql_store.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0x37, 0x45, 0x7d, 0xf1, 0xc9, 0x1f, 0xf2, 0xac, 0xed, 0x28, 0x46, 0xda, 0x64, 0x19, 0x2c,
	0x10, 0x04, 0xa8, 0x9c, 0x3a, 0x69, 0x92, 0x4d, 0xb2, 0xdb, 0xc8, 0x12, 0x1d, 0x0b, 0x6b, 0x4b,
	0xce, 0xc8, 0x49, 0x80, 0x45, 0x51, 0x96, 0x12, 0xc7, 0x32, 0x6b, 0x8a, 0x54, 0x48, 0x2a, 0x5e,
	0xa5, 0xe8, 0xa1, 0x0b, 0xb4, 0x40, 0x0b, 0x14, 0xbd, 0xb5, 0xa7, 0x5e, 0x7a, 0x59, 0xf4, 0xd0,
	0x43, 0xd1, 0x53, 0xd1, 0xed, 0xb5, 0xd7, 0xa2, 0x7f, 0x43, 0xef, 0x3d, 0xb6, 0xd7, 0x62, 0x3e,
	0x48, 0x51, 0xb2, 0xdc, 0x2e, 0x65, 0xb7, 0xc8, 0x22, 0x7b, 0xd2, 0x7c, 0xbc, 0xf7, 0x7b, 0x8f,
	0x6f, 0xde, 0xbc, 0x79, 0x6f, 0x46, 0xb0, 0xe4, 0xbf, 0xb4, 0x75, 0x3f, 0x70, 0x3d, 0x52, 0xee,
	0x7b, 0x6e, 0xe0, 0xa2, 0x9b, 0x1d, 0xb7, 0x57, 0xee, 0x59, 0x8e, 0x19, 0x58, 0x9d, 0x63, 0x9b,
	0x94, 0xe9, 0x9c, 0xd1, 0x25, 0xe5, 0x7e, 0xbb, 0xcc, 0x47, 0x6a, 0xed, 0xd6, 0x4b, 0xbb, 0x45,
	0x39, 0xd6, 0xaf, 0x74, 0x5d, 0xb7, 0x6b, 0x93, 0x0d, 0xc6, 0xd9, 0x1e, 0x1c, 0x6e, 0xf8, 0x81,
	0x37, 0xe8, 0x04, 0x1c, 0x69, 0xfd, 0xea, 0xe4, 0x6c, 0x60, 0xf5, 0x88, 0x1f, 0x18, 0xbd, 0x3e,
	0x27, 0x50, 0x4b, 0xb0, 0xb6, 0x35, 0xb0, 0x8f, 0xf7, 0x5c, 0xd3, 0x3a, 0x1c, 0x62, 0xf7, 0xc4,
	0xc7, 0xc4, 0xef, 0xbb, 0x8e, 0x4f, 0xd4, 0xbf, 0x49, 0xb0, 0x1c, 0x1f, 0x7e, 0x39, 0x20, 0x7e,
	0x80, 0x5e, 0x40, 0xde, 0xe3, 0x4d, 0xbf, 0x24, 0x5d, 0x93, 0x6f, 0x14, 0x36, 0x1f, 0x96, 0xbf,
	0xb8, 0xb6, 0xe5, 0x11, 0x60, 0xd3, 0x21, 0xcd, 0x43, 0x1c, 0x81, 0xa1, 0x0e, 0x2c, 0x89, 0xb6,
	0xde, 0x71, 0x9d, 0x80, 0x7c, 0x12, 0x94, 0x52, 0xd7, 0xa4, 0x1b, 0x85, 0xcd, 0x07, 0x49, 0xf0,
	0x85, 0x9a, 0x55, 0x8e, 0x80, 0x17, 0xbd, 0xb1, 0xbe, 0xfa, 0x69, 0x0e, 0x96, 0x26, 0x54, 0x40,
	0x2e, 0xbc, 0xd3, 0xf1, 0x88, 0x11, 0x10, 0xdd, 0x73, 0x4f, 0x7c, 0x5d, 0x70, 0x94, 0x24, 0x26,
	0xfc, 0x83, 0x24, 0xc2, 0xab, 0x0c, 0x26, 0x66, 0xad, 0x9d, 0x39, 0xbc, 0xdc, 0x99, 0x1c, 0xa4,
	0x02, 0x07, 0x7d, 0x9f, 0x78, 0xc1, 0xb8, 0xc0, 0x54, 0x72, 0x81, 0xcf, 0x18, 0xcc, 0x84, 0xc0,
	0xc1, 0xe4, 0x20, 0xfa, 0x89, 0x04, 0x57, 0x06, 0x7d, 0x33, 0xfa, 0xc4, 0xf6, 0x50, 0x7f, 0x39,
	0x20, 0xde, 0x30, 0x12, 0x2d, 0x33, 0xd1, 0xb5, 0x64, 0xa2, 0x4d, 0xf1, 0x59, 0x5b, 0xc3, 0xa7,
	0x14, 0x6c, 0xa4, 0x41, 0x69, 0x70, 0xc6, 0x1c, 0x53, 0xc4, 0x24, 0x36, 0x39, 0x53, 0x91, 0x74,
	0x72, 0x45, 0x6a, 0x0c, 0x6f, 0xba, 0x22, 0xe6, 0x19, 0x73, 0xe8, 0x87, 0x70, 0x79, 0xc2, 0x20,
	0x96, 0x19, 0x29, 0x91, 0x61, 0x4a, 0x54, 0x66, 0xb5, 0x46, 0xdd, 0x1c, 0x69, 0xb0, 0x3a, 0x98,
	0x36, 0x41, 0xc5, 0x4f, 0x98, 0x21, 0x26, 0x3e, 0x9b, 0x5c, 0x7c, 0xdc, 0x06, 0x63, 0xe2, 0xcd,
	0x69, 0x13, 0xc8, 0x83, 0x15, 0x8f, 0xf4, 0x6d, 0xa3, 0x33, 0xe1, 0xf2, 0x39, 0x26, 0xf9, 0xc3,
	0x64, 0xfb, 0x8d, 0xe1, 0x8c, 0xbb, 0x20, 0xf2, 0x4e, 0x8d, 0x6e, 0x29, 0x90, 0x13, 0x4d, 0x75,
	0x1f, 0x0a, 0xd8, 0x3d, 0x79, 0x61, 0x05, 0x47, 0x7b, 0x86, 0x7f, 0x8c, 0x2a, 0x20, 0x7b, 0xee,
	0x89, 0xd8, 0x6f, 0x1b, 0x89, 0x84, 0xbb, 0x27, 0x98, 0xf2, 0xaa, 0xbf, 0x4f, 0xc1, 0xe2, 0xf8,
	0xce, 0x47, 0x57, 0x41, 0x09, 0x88, 0x63, 0x38, 0x81, 0x6e, 0x99, 0x0c, 0x5b, 0xde, 0x4a, 0xdd,
	0x92, 0x70, 0x9e, 0x0f, 0xd6, 0x4d, 0x74, 0x05, 0x14, 0xc7, 0xe8, 0x11, 0xbf, 0x6f, 0x74, 0x08,
	0xdb, 0x7b, 0x0a, 0x1e, 0x0d, 0xa0, 0x22, 0xc8, 0xc4, 0x79, 0xc5, 0x36, 0x86, 0x82, 0x69, 0x13,
	0xf5, 0x61, 0xc9, 0x73, 0x4f, 0x74, 0xf2, 0x8a, 0x38, 0x81, 0xaf, 0x1f, 0xda, 0x46, 0x97, 0x79,
	0xeb, 0xe2, 0xe6, 0xce, 0xec, 0xf1, 0x89, 0x7e, 0x81, 0xc6, 0x00, 0xb7, 0x6d, 0xa3, 0x8b, 0x17,
	0xbc, 0x78, 0x57, 0xfd, 0x0e, 0x2c, 0x8c, 0xcd, 0xa3, 0x75, 0x58, 0xc3, 0xcd, 0x17, 0xba, 0xf6,
	0x5c, 0x6b, 0x1c, 0xb4, 0xf4, 0x67, 0x8d, 0xd6, 0xbe, 0x56, 0xad, 0x6f, 0xd7, 0xb5, 0x5a, 0x71,
	0x0e, 0x5d, 0x82, 0x77, 0x62, 0x73, 0xb5, 0x7a, 0xab, 0xb2, 0xb5, 0xab, 0xd5, 0x8a, 0x12, 0x5a,
	0x03, 0x14, 0x9b, 0xd0, 0x1a, 0x7c, 0x3c, 0xa5, 0xfe, 0x54, 0x86, 0xd5, 0xa9, 0x6e, 0x3b, 0x2d,
	0x12, 0x4b, 0x17, 0x1d, 0x89, 0x51, 0x09, 0x72, 0x7d, 0xcf, 0xfd, 0x3e, 0xe9, 0x04, 0xc2, 0xf8,
	0x61, 0x17, 0x7d, 0x0d, 0x20, 0x30, 0xda, 0x36, 0xd1, 0xe9, 0x6a, 0x88, 0x15, 0x50, 0xd8, 0x48,
	0xc3, 0xe8, 0x11, 0x54, 0x85, 0x34, 0x75, 0xda, 0x52, 0x9a, 0x1d, 0x3e, 0x89, 0xfd, 0x85, 0x31,
	0xa3, 0x1a, 0xa4, 0x7b, 0x86, 0x7f, 0x2c, 0xb6, 0xfa, 0xad, 0x44, 0x27, 0x98, 0xe1, 0x1f, 0x63,
	0xc6, 0x8d, 0x9e, 0x40, 0xc6, 0xef, 0xb8, 0x7d, 0xc2, 0xb6, 0xec, 0xe2, 0xe6, 0x37, 0x93, 0xc0,
	0xb4, 0x28, 0x23, 0xe6, 0xfc, 0xea, 0x9f, 0x53, 0xb0, 0x12, 0xad, 0xc5, 0x97, 0x67, 0x29, 0xc4,
	0xce, 0x4d, 0xcf, 0xbe, 0x73, 0x2f, 0x66, 0x21, 0xd4, 0x5f, 0xa5, 0x60, 0x25, 0x8a, 0x81, 0x5f,
	0x1e, 0xfb, 0x2d, 0x42, 0xca, 0x32, 0x99, 0xf9, 0x14, 0x9c, 0xb2, 0x4c, 0xf4, 0x14, 0x14, 0x63,
	0x10, 0x1c, 0xe9, 0x3d, 0x12, 0x18, 0xc2, 0x22, 0x77, 0x92, 0xe8, 0x59, 0x19, 0x04, 0x47, 0x7b,
	0x24, 0x30, 0x70, 0xde, 0x10, 0x2d, 0xf5, 0xef, 0x29, 0x58, 0x9d, 0x7a, 0x3a, 0xbc, 0xe1, 0xa6,
	0x29, 0x82, 0x6c, 0x99, 0x7c, 0x93, 0x2b, 0x98, 0x36, 0xff, 0x07, 0xc6, 0xb9, 0xb8, 0xfd, 0xfb,
	0x69, 0x1a, 0x4a, 0x67, 0x25, 0x44, 0x6f, 0xb8, 0xa1, 0x9f, 0x40, 0x86, 0xa5, 0x60, 0x62, 0x17,
	0x27, 0xb2, 0x01, 0xff, 0x4c, 0xce, 0x4f, 0xd7, 0x87, 0x9e, 0x8f, 0xaf, 0x0c, 0x7b, 0x40, 0x66,
	0x59, 0x1f, 0xec, 0x9e, 0x3c, 0xa7, 0xbc, 0x38, 0xef, 0x89, 0x56, 0x14, 0x1c, 0xf2, 0x17, 0x13,
	0xa5, 0x95, 0xf3, 0xad, 0x32, 0xb5, 0x64, 0xdb, 0x08, 0x3a, 0x47, 0xba, 0x6f, 0xbd, 0x26, 0x25,
	0xb8, 0x26, 0xdd, 0xc8, 0x60, 0x85, 0x8d, 0xb4, 0xac, 0xd7, 0x44, 0x7d, 0x0c, 0x97, 0xa7, 0xf8,
	0x00, 0x2f, 0xa6, 0xd0, 0x75, 0x58, 0x60, 0xa9, 0x96, 0x71, 0x78, 0x48, 0x3a, 0x01, 0xe1, 0x29,
	0x49, 0x06, 0xcf, 0xd3, 0xc1, 0x8a, 0x18, 0x53, 0x2f, 0xc5, 0x4e, 0x64, 0xbe, 0x55, 0x45, 0x29,
	0xf6, 0xb9, 0x0c, 0xa5, 0xb3, 0xf2, 0xdc, 0xb7, 0xc5, 0xbf, 0xa2, 0x65, 0xcc, 0x5c, 0xe8, 0x32,
	0x66, 0x27, 0x96, 0x71, 0x3c, 0xce, 0xe4, 0x2e, 0x24, 0x08, 0xaf, 0x00, 0x9a, 0x52, 0x5f, 0xff,
	0x53, 0x82, 0xe5, 0x53, 0x15, 0xe3, 0x5b, 0x90, 0x7c, 0xa9, 0xef, 0x03, 0x8a, 0x7f, 0x77, 0x92,
	0x1d, 0xf2, 0x2f, 0x09, 0xd0, 0xe9, 0x92, 0xe3, 0x6d, 0x30, 0xda, 0xe7, 0x29, 0x58, 0x3e, 0x55,
	0xee, 0x7f, 0x95, 0xaa, 0x7f, 0xd1, 0x0c, 0xf1, 0x8f, 0x29, 0x28, 0x46, 0xe6, 0xfb, 0x2a, 0xbb,
	0x4e, 0x64, 0xbb, 0xc7, 0x70, 0x79, 0xca, 0xe1, 0x93, 0xf0, 0x60, 0x9b, 0x48, 0xcf, 0x45, 0x0c,
	0xfc, 0x47, 0x0a, 0x32, 0x0c, 0x0f, 0xed, 0x42, 0xee, 0xd0, 0xb2, 0x03, 0xe2, 0x85, 0xd7, 0x8a,
	0x9b, 0x49, 0xb4, 0xdd, 0x66, 0xac, 0x38, 0x84, 0x40, 0x1f, 0x41, 0x8e, 0x9e, 0x1a, 0x16, 0xf1,
	0x4b, 0x29, 0x86, 0x36, 0xc3, 0xb9, 0x13, 0x22, 0x20, 0x1b, 0x8a, 0xb6, 0xdb, 0xb5, 0x3a, 0x86,
	0xad, 0xbb, 0x7d, 0xe2, 0x19, 0x81, 0xeb, 0xb1, 0xd5, 0x5a, 0x4c, 0x76, 0x49, 0xc3, 0x50, 0xcb,
	0xbb, 0x1c, 0xa9, 0x29, 0x80, 0xf0, 0x92, 0x3d, 0x3e, 0x80, 0xd6, 0x20, 0xeb, 0x90, 0xae, 0x11,
	0x10, 0xb6, 0xf2, 0x79, 0x2c, 0x7a, 0x6a, 0x0d, 0x96, 0x26, 0x78, 0xd1, 0x35, 0xb8, 0xb2, 0xdb,
	0x7c, 0x52, 0xaf, 0x56, 0x76, 0xf5, 0xe6, 0xbe, 0x86, 0x2b, 0x07, 0x4d, 0x3c, 0x71, 0x2b, 0x90,
	0x03, 0xb9, 0xd2, 0xa8, 0x15, 0x25, 0x94, 0x85, 0x54, 0x13, 0x17, 0x53, 0xea, 0x8f, 0x65, 0xc8,
	0x72, 0x63, 0xa1, 0x8f, 0x41, 0xe9, 0x7b, 0xc4, 0xb4, 0x3a, 0x54, 0x96, 0xc4, 0xbe, 0xe7, 0x51,
	0x72, 0x9b, 0x97, 0xf7, 0x43, 0x0c, 0x3c, 0x82, 0x43, 0x2b, 0x90, 0x39, 0xb4, 0x88, 0x6d, 0x0a,
	0x97, 0xe7, 0x1d, 0x7a, 0x84, 0xf3, 0xf4, 0x50, 0x4e, 0x9e, 0x0b, 0xf0, 0xdc, 0x90, 0xf3, 0x9f,
	0x69, 0xa3, 0xcf, 0x24, 0x50, 0x22, 0x7d, 0xd0, 0x65, 0x58, 0xdd, 0xc7, 0x5a, 0xad, 0x5e, 0xad,
	0x1c, 0x68, 0x13, 0x76, 0x51, 0x20, 0xa3, 0x3d, 0x7d, 0x56, 0xd9, 0x2d, 0x4a, 0x68, 0x01, 0x94,
	0x46, 0xf3, 0x40, 0xe7, 0xdd, 0x14, 0x2a, 0x40, 0xee, 0x09, 0xd6, 0x2a, 0x07, 0x1a, 0x2e, 0xca,
	0x08, 0x20, 0xbb, 0xab, 0xb5, 0x5a, 0x1a, 0x2e, 0xa6, 0xa9, 0x05, 0xeb, 0x8d, 0x62, 0x86, 0x8e,
	0x51, 0xfa, 0x7a, 0xa3, 0x98, 0xa5, 0x30, 0x7b, 0x95, 0x83, 0xea, 0x4e, 0x31, 0x87, 0xd6, 0x00,
	0x09, 0x3e, 0xfd, 0x60, 0xa7, 0xd2, 0x10, 0x78, 0x79, 0xb4, 0x0a, 0xcb, 0x1c, 0x22, 0x3e, 0xac,
	0xa8, 0xb7, 0xa0, 0xd0, 0x0a, 0x3c, 0xcb, 0xe9, 0x56, 0x3c, 0xcf, 0x18, 0xa2, 0x77, 0x61, 0xde,
	0x67, 0x5d, 0xdd, 0xa0, 0x7d, 0xb6, 0x05, 0x14, 0x5c, 0xf0, 0x47, 0x24, 0xea, 0x37, 0x00, 0xea,
	0x4e, 0x70, 0xf7, 0x0e, 0x67, 0xb8, 0x0a, 0x05, 0x8b, 0xf6, 0x62, 0xf4, 0x32, 0x06, 0x2b, 0x22,
	0x10, 0xe4, 0xb7, 0x37, 0xe3, 0xe4, 0xb7, 0x37, 0x63, 0xe4, 0x19, 0x46, 0x2e, 0x08, 0xa8, 0x3e,
	0x35, 0x77, 0xd0, 0xb6, 0x49, 0xa4, 0x8f, 0xc9, 0xba, 0x31, 0x06, 0x09, 0x17, 0xcc, 0x11, 0x89,
	0xfa, 0x59, 0x06, 0x32, 0x3c, 0x4d, 0x7f, 0x0f, 0x16, 0xda, 0xae, 0x6b, 0x13, 0xc3, 0x11, 0xd9,
	0x3f, 0x75, 0xa6, 0xfc, 0xce, 0x1c, 0x9e, 0x17, 0xc3, 0x9c, 0xec, 0xdd, 0x50, 0x07, 0x4e, 0x44,
	0x3d, 0x23, 0xb3, 0x33, 0x27, 0xb4, 0x88, 0x93, 0xdc, 0xbd, 0xa3, 0x8f, 0xdc, 0x44, 0x16, 0x24,
	0x77, 0xef, 0x70, 0x92, 0xeb, 0x91, 0x66, 0x9c, 0x86, 0x3a, 0x80, 0xb4, 0x33, 0x17, 0xea, 0x16,
	0x11, 0x09, 0x73, 0x8e, 0xca, 0x11, 0x85, 0x12, 0xf1, 0x51, 0x4e, 0xf4, 0x10, 0xc0, 0x19, 0xd8,
	0xb6, 0x20, 0xe1, 0x25, 0xe0, 0x7a, 0x99, 0xbf, 0x97, 0x94, 0xc3, 0xf7, 0x92, 0x72, 0x63, 0x60,
	0xdb, 0x8c, 0x7e, 0x67, 0x0e, 0x2b, 0x4e, 0xd8, 0x41, 0x26, 0x2c, 0xc7, 0x0c, 0x2a, 0x30, 0x78,
	0xb6, 0x78, 0x37, 0x89, 0x5b, 0x8f, 0xd6, 0x68, 0x67, 0x0e, 0x2f, 0x8d, 0x16, 0x24, 0x2e, 0x25,
	0x5c, 0x65, 0x21, 0x25, 0x3f, 0x93, 0x14, 0xe1, 0x17, 0x42, 0x8a, 0xe8, 0x71, 0x29, 0x5d, 0x40,
	0x71, 0xe7, 0x13, 0x62, 0x14, 0x26, 0xe6, 0x5e, 0xa2, 0x34, 0x7b, 0xe4, 0xae, 0x3b, 0x73, 0xb8,
	0x18, 0xf3, 0xde, 0x48, 0x50, 0xdc, 0xab, 0x84, 0x20, 0x48, 0x2e, 0x28, 0xe6, 0xaa, 0x54, 0x50,
	0xcc, 0x2d, 0x99, 0xa0, 0xad, 0x79, 0x00, 0x86, 0xad, 0x07, 0xc3, 0x3e, 0x51, 0xbf, 0x0e, 0x69,
	0x76, 0xd1, 0xbc, 0x06, 0x59, 0x16, 0x87, 0x7c, 0xb1, 0xbd, 0x44, 0x8f, 0xe6, 0xa3, 0xf1, 0xcc,
	0x2a, 0xc9, 0xc1, 0x76, 0x3f, 0x96, 0x94, 0x25, 0xe3, 0xfc, 0xab, 0x04, 0xf9, 0xb0, 0xe4, 0x45,
	0xd7, 0x80, 0x4e, 0xea, 0x96, 0xa3, 0xb7, 0x87, 0x01, 0xf1, 0x19, 0xc3, 0x3c, 0x06, 0xcf, 0x3d,
	0xa9, 0x3b, 0x5b, 0x74, 0x04, 0x35, 0x80, 0x96, 0xc5, 0xbc, 0x28, 0xe1, 0x0f, 0x45, 0xb7, 0x13,
	0x66, 0x04, 0xac, 0x26, 0xc9, 0x79, 0xbc, 0x31, 0x5e, 0xe5, 0xc8, 0x17, 0x52, 0xe5, 0xfc, 0x5a,
	0x82, 0x9c, 0x90, 0x83, 0x1e, 0x42, 0x41, 0xbc, 0xa9, 0x05, 0x56, 0x8f, 0x88, 0xac, 0xea, 0xf4,
	0xe6, 0x3a, 0x08, 0x1f, 0x23, 0x31, 0x70, 0x72, 0x3a, 0x40, 0x99, 0xc5, 0xe3, 0x0c, 0x63, 0x4e,
	0xfd, 0x77, 0x66, 0x4e, 0xce, 0x98, 0x4b, 0x90, 0x7b, 0x45, 0x3c, 0xdf, 0x72, 0x1d, 0x1e, 0x3e,
	0x70, 0xd8, 0x55, 0x9b, 0x90, 0x0f, 0xb5, 0x46, 0x37, 0x61, 0xb9, 0x6b, 0xbb, 0x6d, 0xc3, 0x0e,
	0x13, 0xbf, 0xf0, 0x95, 0x40, 0xc1, 0x4b, 0x7c, 0x42, 0xa4, 0x6f, 0x75, 0x13, 0x5d, 0x82, 0x1c,
	0x33, 0x95, 0x15, 0x9e, 0x66, 0x59, 0xda, 0xad, 0x9b, 0xea, 0x11, 0xc8, 0xd8, 0x3d, 0x99, 0x76,
	0x8b, 0x37, 0xba, 0x08, 0x91, 0x2e, 0xe2, 0x22, 0x44, 0xfd, 0x83, 0x04, 0x05, 0xed, 0x13, 0xd2,
	0xf9, 0xbf, 0x26, 0xae, 0xef, 0xc1, 0x22, 0x7f, 0x97, 0x36, 0x02, 0xd2, 0x23, 0x4e, 0xc0, 0x53,
	0x29, 0x05, 0x2f, 0xf8, 0x14, 0x20, 0x1c, 0x8c, 0xe7, 0xb7, 0xf2, 0x58, 0x7e, 0xab, 0xde, 0x86,
	0x79, 0xae, 0xf4, 0x7f, 0xda, 0x17, 0xf2, 0xc4, 0xbe, 0xf8, 0x5d, 0x1a, 0x56, 0x5a, 0xc4, 0xf0,
	0x3a, 0x47, 0x6f, 0xe7, 0x35, 0xc7, 0x31, 0x5c, 0xe2, 0x0f, 0xf8, 0x03, 0x8f, 0x98, 0xfa, 0xc9,
	0x11, 0xf1, 0x88, 0xde, 0xb1, 0x8d, 0x81, 0x1f, 0x06, 0xfe, 0xe4, 0xd0, 0x3b, 0x73, 0x78, 0x75,
	0x84, 0xf9, 0x82, 0x42, 0x56, 0x19, 0x22, 0x7a, 0x04, 0x97, 0x07, 0xce, 0x59, 0xe2, 0x14, 0x71,
	0x68, 0x5e, 0x8a, 0x93, 0xc4, 0xb9, 0x11, 0xa4, 0xfd, 0x63, 0xab, 0xcf, 0x4e, 0x57, 0x19, 0xb3,
	0x36, 0x4d, 0xfc, 0x6c, 0xab, 0x67, 0xf1, 0x57, 0x4c, 0x19, 0xf3, 0x0e, 0x4d, 0xc7, 0x7d, 0xd7,
	0x0b, 0xf4, 0xf6, 0x50, 0x9c, 0x91, 0x89, 0x92, 0xfb, 0x96, 0xeb, 0x05, 0x5b, 0x43, 0x9c, 0xf5,
	0xd9, 0x2f, 0x0d, 0xee, 0xec, 0xb3, 0xd8, 0xeb, 0xbd, 0xfa, 0x3d, 0xc8, 0xf2, 0x79, 0xf4, 0x1c,
	0x0a, 0x4c, 0x48, 0x2c, 0xc6, 0x17, 0x36, 0xbf, 0x95, 0x54, 0xd0, 0x36, 0xe5, 0xc6, 0xe0, 0x87,
	0x4d, 0x5f, 0xfd, 0x93, 0x04, 0x4a, 0x34, 0x83, 0xbe, 0x0b, 0x6c, 0x4e, 0x77, 0x3d, 0x93, 0x78,
	0x22, 0x6d, 0xfe, 0xf6, 0x4c, 0x42, 0x58, 0xab, 0x49, 0x61, 0xb0, 0xe2, 0x87, 0xcd, 0xe9, 0x99,
	0xb3, 0x7a, 0x9f, 0xab, 0xc0, 0x49, 0x4a, 0xb0, 0xd2, 0x6a, 0xe2, 0x03, 0xbd, 0x89, 0x6b, 0x1a,
	0x4d, 0xf8, 0x6b, 0xda, 0x76, 0xbd, 0xc1, 0xd2, 0xda, 0x3c, 0xa4, 0x6b, 0x5a, 0xab, 0x5a, 0x94,
	0x58, 0xe2, 0xdf, 0xaa, 0x16, 0x53, 0x34, 0x74, 0x2c, 0xf0, 0xfd, 0xf4, 0x86, 0x6c, 0xa4, 0xeb,
	0xb0, 0x30, 0x16, 0x56, 0xc4, 0x5e, 0x9a, 0x8f, 0x47, 0x15, 0x9a, 0xc8, 0x2f, 0x86, 0x5a, 0x8b,
	0xe8, 0xb1, 0x2d, 0x2e, 0x13, 0x66, 0xa8, 0x0e, 0x5b, 0x2f, 0xed, 0xd1, 0x7d, 0xc2, 0x1e, 0x28,
	0x1e, 0xf1, 0x07, 0x76, 0xd0, 0x22, 0x81, 0x28, 0x0e, 0x13, 0x17, 0xd7, 0x23, 0x04, 0xf5, 0xb7,
	0x12, 0x64, 0x39, 0x3e, 0xda, 0x87, 0xb4, 0x69, 0x04, 0x86, 0xd0, 0xf0, 0x51, 0x72, 0x0d, 0xcb,
	0x35, 0x23, 0x30, 0x34, 0x27, 0xf0, 0x86, 0x98, 0x21, 0x51, 0x67, 0x18, 0x25, 0xcb, 0xf3, 0xa2,
	0xfa, 0x59, 0xbf, 0x07, 0x4a, 0x44, 0x88, 0x8a, 0x20, 0x1f, 0x93, 0xa1, 0x38, 0xbb, 0x68, 0x73,
	0x3a, 0xd3, 0x83, 0xd4, 0x7d, 0xe9, 0xe6, 0x11, 0x64, 0xd8, 0x4d, 0x28, 0x2d, 0x4a, 0x5a, 0xd5,
	0xe6, 0xfe, 0x64, 0x55, 0xb4, 0x08, 0xd0, 0xaa, 0x37, 0x9e, 0xec, 0x6a, 0x3a, 0x6e, 0xbe, 0xe0,
	0xa5, 0xd1, 0xde, 0xb3, 0xdd, 0x83, 0x3a, 0xeb, 0xa6, 0xd0, 0x3b, 0xb0, 0xd4, 0x6c, 0xb0, 0x39,
	0xbd, 0x89, 0xf5, 0x46, 0xb3, 0xa1, 0x15, 0x65, 0xb4, 0x02, 0xc5, 0x88, 0x46, 0x6f, 0x34, 0xf5,
	0x4a, 0xf5, 0xa3, 0x62, 0x7a, 0xf3, 0x2f, 0x05, 0xc8, 0x87, 0x1f, 0x87, 0x7e, 0x2e, 0x01, 0x8c,
	0x2e, 0xfc, 0xd0, 0xf9, 0xfe, 0x52, 0xb3, 0xfe, 0xe1, 0xac, 0xec, 0xe2, 0xca, 0x61, 0x0e, 0xfd,
	0x46, 0xa2, 0x59, 0xdb, 0xc4, 0x4d, 0x3d, 0xba, 0x90, 0x7f, 0xbf, 0xac, 0x6b, 0xe7, 0x44, 0x89,
	0x94, 0xfc, 0xa5, 0x04, 0x0b, 0x63, 0x8f, 0x01, 0xe8, 0xf1, 0x4c, 0xd0, 0xb1, 0x27, 0xbf, 0xf5,
	0xca, 0x39, 0x10, 0xc6, 0xac, 0x77, 0xea, 0x3a, 0x08, 0x5d, 0xc8, 0x5f, 0x76, 0x92, 0x59, 0xef,
	0xcc, 0x3b, 0x29, 0x61, 0xbd, 0xb1, 0x1b, 0xa7, 0x64, 0xd6, 0x9b, 0xf6, 0x96, 0xbc, 0x5e, 0x39,
	0x07, 0x42, 0xa4, 0xd8, 0xcf, 0x24, 0x50, 0xa2, 0x8a, 0x01, 0x3d, 0x9a, 0xe9, 0xcf, 0x5e, 0xa1,
	0x42, 0x1f, 0xcc, 0xc8, 0x1d, 0x29, 0xf3, 0x23, 0x1a, 0xbb, 0x58, 0x94, 0x45, 0xef, 0x27, 0x8a,
	0x56, 0xf1, 0xf3, 0x64, 0xfd, 0xc1, 0x2c, 0xac, 0x91, 0x0e, 0xbf, 0x88, 0xce, 0xa7, 0xd0, 0x95,
	0x1e, 0x27, 0xc7, 0x9b, 0x70, 0xa3, 0xf3, 0x69, 0x44, 0xc3, 0xd5, 0xe8, 0xb9, 0x26, 0x59, 0xb8,
	0x3a, 0xf5, 0x7f, 0xc9, 0x64, 0xe1, 0x6a, 0xca, 0x2b, 0xd1, 0x1c, 0xfa, 0x01, 0xa4, 0x69, 0x1a,
	0x8d, 0x12, 0x55, 0xc8, 0xb1, 0x6a, 0x61, 0xfd, 0x7e, 0x72, 0xc6, 0x50, 0xf8, 0xd6, 0x6b, 0xb8,
	0x35, 0x9d, 0x99, 0x95, 0x61, 0xfe, 0x34, 0x88, 0xad, 0x85, 0xb0, 0xb5, 0x4f, 0x69, 0x3e, 0xbe,
	0xd7, 0xb5, 0x82, 0xa3, 0x41, 0x9b, 0x2a, 0xb1, 0xb1, 0x67, 0x39, 0xe6, 0x01, 0xa3, 0xdf, 0x18,
	0xc3, 0xd9, 0xe8, 0xb7, 0x37, 0x26, 0x71, 0xda, 0x59, 0x36, 0x77, 0xfb, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x46, 0x07, 0xbb, 0xc4, 0x1f, 0x2b, 0x00, 0x00,
}
