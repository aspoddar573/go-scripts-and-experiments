// Code generated by protoc-gen-go. DO NOT EDIT.
// source: document.proto

/*
Package tickleDb is a generated protocol buffer package.

It is generated from these files:
	document.proto
	store_manager.proto

It has these top-level messages:
	CreateDocRequest
	UpdateDocRequest
	GetDocsBySqlQueryRequest
	UpdateDocsByQueryRequest
	Value
	StringArray
	BoolArray
	DoubleArray
	Int64Array
	Int32Array
	UpsertDocRequest
	GetDocRequest
	SearchDocsRequest
	SortBy
	SortField
	DeleteDocRequest
	DeleteDocsByQueryRequest
	CreateDocsRequest
	UpdateDocsRequest
	DeleteDocsRequest
	DocAuthMeta
	UpsertDocsRequest
	ModifyDocsRequest
	PartialUpdateDocsRequest
	PartialDoc
	CreateDocResponse
	UpdateDocResponse
	GetDocsBySqlQueryResponse
	UpdateDocsByQueryResponse
	UpsertDocResponse
	SearchDocsResponse
	DeleteDocResponse
	DeleteDocsByQueryResponse
	ModifyDocsResponse
	Query
	Filter
	Doc
	DocMeta
	AuthMeta
	Row
	GetClusterTopologiesRequest
	GetClusterTopologiesResponse
	Cluster
	GetUpdateTableStatusRequest
	GetUpdateTableStatusResponse
	SetTTLRequest
	TTLConfig
	SetTTLResponse
	Node
	RegisterNamespaceOnNodeRequest
	InitNamespaceOnTrackRequest
	RegisterNamespaceOnNodeResponse
	InitNamespaceOnTrackResponse
	DeleteNamespaceRouteRequest
	DeleteNamespaceRouteResponse
	ListNamespaceRoutesRequest
	ListNamespaceRoutesResponse
	UpdateTableRequest
	UpdateTableResponse
	DeleteTableRequest
	DeleteTableResponse
	CreateTableRequest
	CreateTableResponse
	Table
	PrimaryKey
	GetCdcSourceInfoRequest
	GetCdcSourceInfoResponse
	GetTableInfoRequest
	GetCdcSourceIdRequest
	GetCdcSourceIdResponse
	IndexField
	Field
	Collection
	RelationshipCollection
	CreateCollectionRequest
	CreateCollectionResponse
	GetCollectionIDResponse
	UpdateCollectionRequest
	DropIndex
	AddIndex
	AddField
	DeleteField
	UpdateField
	UpdateCollectionResponse
	GetUpdateCollectionStatusRequest
	GetUpdateCollectionStatusResponse
	DeleteCollectionRequest
	DeleteCollectionResponse
	RestoreCollectionRequest
	GetCollectionRequest
	RestoreCollectionResponse
	GetCollectionIDRequest
	ListCollectionsRequest
	ListCollectionsResponse
	CreateRelationshipCollectionRequest
	UpdateRelationshipCollectionRequest
	DeleteRelationshipCollectionRequest
	GetRelationshipCollectionRequest
	GetRelationshipCollectionIDRequest
	CreateRelationshipCollectionResponse
	UpdateRelationshipCollectionResponse
	DeleteRelationshipCollectionResponse
	GetRelationshipCollectionIDResponse
*/
package tickleDb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import com_mindtickle_storage_pb_common "github.com/MindTickle/storageprotos/pb/common"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SortField_SortOrder int32

const (
	SortField_SORT_ORDER_UNDEFINED SortField_SortOrder = 0
	SortField_DESC                 SortField_SortOrder = 1
	SortField_ASC                  SortField_SortOrder = 2
)

var SortField_SortOrder_name = map[int32]string{
	0: "SORT_ORDER_UNDEFINED",
	1: "DESC",
	2: "ASC",
}
var SortField_SortOrder_value = map[string]int32{
	"SORT_ORDER_UNDEFINED": 0,
	"DESC":                 1,
	"ASC":                  2,
}

func (x SortField_SortOrder) String() string {
	return proto.EnumName(SortField_SortOrder_name, int32(x))
}
func (SortField_SortOrder) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

// *
// List of supported logical operators for querying doc(s)
type Query_LogicalOperator int32

const (
	Query_LOGICAL_OPERATOR_UNSPECIFIED Query_LogicalOperator = 0
	Query_AND                          Query_LogicalOperator = 1
	Query_OR                           Query_LogicalOperator = 2
)

var Query_LogicalOperator_name = map[int32]string{
	0: "LOGICAL_OPERATOR_UNSPECIFIED",
	1: "AND",
	2: "OR",
}
var Query_LogicalOperator_value = map[string]int32{
	"LOGICAL_OPERATOR_UNSPECIFIED": 0,
	"AND": 1,
	"OR":  2,
}

func (x Query_LogicalOperator) String() string {
	return proto.EnumName(Query_LogicalOperator_name, int32(x))
}
func (Query_LogicalOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{34, 0} }

// *
// List of supported predicates for querying doc(s)
type Filter_Predicate int32

const (
	Filter_PREDICATE_UNSPECIFIED Filter_Predicate = 0
	Filter_EQUAL                 Filter_Predicate = 1
	Filter_NOT_EQUAL             Filter_Predicate = 2
	Filter_GREATER               Filter_Predicate = 3
	Filter_LESSER                Filter_Predicate = 4
	Filter_IN                    Filter_Predicate = 5
	Filter_NOT_IN                Filter_Predicate = 6
	Filter_MATCH                 Filter_Predicate = 7
	Filter_GREATER_THAN_EQUAL    Filter_Predicate = 8
	Filter_LESSER_THAN_EQUAL     Filter_Predicate = 9
)

var Filter_Predicate_name = map[int32]string{
	0: "PREDICATE_UNSPECIFIED",
	1: "EQUAL",
	2: "NOT_EQUAL",
	3: "GREATER",
	4: "LESSER",
	5: "IN",
	6: "NOT_IN",
	7: "MATCH",
	8: "GREATER_THAN_EQUAL",
	9: "LESSER_THAN_EQUAL",
}
var Filter_Predicate_value = map[string]int32{
	"PREDICATE_UNSPECIFIED": 0,
	"EQUAL":                 1,
	"NOT_EQUAL":             2,
	"GREATER":               3,
	"LESSER":                4,
	"IN":                    5,
	"NOT_IN":                6,
	"MATCH":                 7,
	"GREATER_THAN_EQUAL":    8,
	"LESSER_THAN_EQUAL":     9,
}

func (x Filter_Predicate) String() string {
	return proto.EnumName(Filter_Predicate_name, int32(x))
}
func (Filter_Predicate) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{35, 0} }

// *
// Request to create single doc in the
// Fields:
//  RequestContext: contains tenant_id which is necessary
//  collection_id: required field
// doc: id(required field) and json string of the custom object to store
type CreateDocRequest struct {
	RequestContext *com_mindtickle_storage_pb_common.RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	CollectionId   string                                           `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Doc            *Doc                                             `protobuf:"bytes,3,opt,name=doc" json:"doc,omitempty"`
}

func (m *CreateDocRequest) Reset()                    { *m = CreateDocRequest{} }
func (m *CreateDocRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDocRequest) ProtoMessage()               {}
func (*CreateDocRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateDocRequest) GetRequestContext() *com_mindtickle_storage_pb_common.RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *CreateDocRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *CreateDocRequest) GetDoc() *Doc {
	if m != nil {
		return m.Doc
	}
	return nil
}

// *
// Request to update single doc
// Fields:
// RequestContext: contains tenant_id which is necessary
//  collection_id: required field
// doc: id(required field) and json string of the custom object to store
type UpdateDocRequest struct {
	RequestContext *com_mindtickle_storage_pb_common.RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	CollectionId   string                                           `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Doc            *Doc                                             `protobuf:"bytes,3,opt,name=doc" json:"doc,omitempty"`
}

func (m *UpdateDocRequest) Reset()                    { *m = UpdateDocRequest{} }
func (m *UpdateDocRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDocRequest) ProtoMessage()               {}
func (*UpdateDocRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdateDocRequest) GetRequestContext() *com_mindtickle_storage_pb_common.RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *UpdateDocRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *UpdateDocRequest) GetDoc() *Doc {
	if m != nil {
		return m.Doc
	}
	return nil
}

// *
// Request to fetch multiple rows as a response of string query execution.
// collection_id along with tenantId is used to identify the route(node) where the query is to executed.
// Fields:
// request_context: used for setting request context and deriving tenantId. IMPORTANT: tenantId is optional.
// If no tenantId is set, default is used.
// collection_id (Mandatory field)
// query: represents the string query to execute
type GetDocsBySqlQueryRequest struct {
	RequestContext *com_mindtickle_storage_pb_common.RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	CollectionId   string                                           `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Query          string                                           `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
}

func (m *GetDocsBySqlQueryRequest) Reset()                    { *m = GetDocsBySqlQueryRequest{} }
func (m *GetDocsBySqlQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDocsBySqlQueryRequest) ProtoMessage()               {}
func (*GetDocsBySqlQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetDocsBySqlQueryRequest) GetRequestContext() *com_mindtickle_storage_pb_common.RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *GetDocsBySqlQueryRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *GetDocsBySqlQueryRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// * Request to update all the doc(s) that matches given query.
// The action only updates provided fields of the matched docs for given collection and tenant.
// Field:
// RequestContext: contains tenant_id which is necessary
//  collection_id: required field
// fields: map of field path and Value to which it needs to be updated.
// query: query to filter out doc(s)
type UpdateDocsByQueryRequest struct {
	RequestContext *com_mindtickle_storage_pb_common.RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	CollectionId   string                                           `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Fields         map[string]*Value                                `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Query          *Query                                           `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	AuthMeta       *AuthMeta                                        `protobuf:"bytes,5,opt,name=auth_meta,json=authMeta" json:"auth_meta,omitempty"`
}

func (m *UpdateDocsByQueryRequest) Reset()                    { *m = UpdateDocsByQueryRequest{} }
func (m *UpdateDocsByQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDocsByQueryRequest) ProtoMessage()               {}
func (*UpdateDocsByQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateDocsByQueryRequest) GetRequestContext() *com_mindtickle_storage_pb_common.RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *UpdateDocsByQueryRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *UpdateDocsByQueryRequest) GetFields() map[string]*Value {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *UpdateDocsByQueryRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *UpdateDocsByQueryRequest) GetAuthMeta() *AuthMeta {
	if m != nil {
		return m.AuthMeta
	}
	return nil
}

type Value struct {
	// Types that are valid to be assigned to ValueType:
	//	*Value_BooleanValue
	//	*Value_Int32Value
	//	*Value_Int64Value
	//	*Value_DoubleValue
	//	*Value_StringValue
	//	*Value_StringArray
	//	*Value_BoolArray
	//	*Value_Int32Array
	//	*Value_Int64Array
	//	*Value_DoubleArray
	//	*Value_ByteValue
	ValueType isValue_ValueType `protobuf_oneof:"value_type"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isValue_ValueType interface {
	isValue_ValueType()
}

type Value_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,1,opt,name=boolean_value,json=booleanValue,oneof"`
}
type Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,2,opt,name=int32_value,json=int32Value,oneof"`
}
type Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,oneof"`
}
type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,oneof"`
}
type Value_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,oneof"`
}
type Value_StringArray struct {
	StringArray *StringArray `protobuf:"bytes,6,opt,name=string_array,json=stringArray,oneof"`
}
type Value_BoolArray struct {
	BoolArray *BoolArray `protobuf:"bytes,7,opt,name=bool_array,json=boolArray,oneof"`
}
type Value_Int32Array struct {
	Int32Array *Int32Array `protobuf:"bytes,8,opt,name=int32_array,json=int32Array,oneof"`
}
type Value_Int64Array struct {
	Int64Array *Int64Array `protobuf:"bytes,9,opt,name=int64_array,json=int64Array,oneof"`
}
type Value_DoubleArray struct {
	DoubleArray *DoubleArray `protobuf:"bytes,10,opt,name=double_array,json=doubleArray,oneof"`
}
type Value_ByteValue struct {
	ByteValue []byte `protobuf:"bytes,11,opt,name=byte_value,json=byteValue,proto3,oneof"`
}

func (*Value_BooleanValue) isValue_ValueType() {}
func (*Value_Int32Value) isValue_ValueType()   {}
func (*Value_Int64Value) isValue_ValueType()   {}
func (*Value_DoubleValue) isValue_ValueType()  {}
func (*Value_StringValue) isValue_ValueType()  {}
func (*Value_StringArray) isValue_ValueType()  {}
func (*Value_BoolArray) isValue_ValueType()    {}
func (*Value_Int32Array) isValue_ValueType()   {}
func (*Value_Int64Array) isValue_ValueType()   {}
func (*Value_DoubleArray) isValue_ValueType()  {}
func (*Value_ByteValue) isValue_ValueType()    {}

func (m *Value) GetValueType() isValue_ValueType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

func (m *Value) GetBooleanValue() bool {
	if x, ok := m.GetValueType().(*Value_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (m *Value) GetInt32Value() int32 {
	if x, ok := m.GetValueType().(*Value_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *Value) GetInt64Value() int64 {
	if x, ok := m.GetValueType().(*Value_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if x, ok := m.GetValueType().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Value) GetStringValue() string {
	if x, ok := m.GetValueType().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Value) GetStringArray() *StringArray {
	if x, ok := m.GetValueType().(*Value_StringArray); ok {
		return x.StringArray
	}
	return nil
}

func (m *Value) GetBoolArray() *BoolArray {
	if x, ok := m.GetValueType().(*Value_BoolArray); ok {
		return x.BoolArray
	}
	return nil
}

func (m *Value) GetInt32Array() *Int32Array {
	if x, ok := m.GetValueType().(*Value_Int32Array); ok {
		return x.Int32Array
	}
	return nil
}

func (m *Value) GetInt64Array() *Int64Array {
	if x, ok := m.GetValueType().(*Value_Int64Array); ok {
		return x.Int64Array
	}
	return nil
}

func (m *Value) GetDoubleArray() *DoubleArray {
	if x, ok := m.GetValueType().(*Value_DoubleArray); ok {
		return x.DoubleArray
	}
	return nil
}

func (m *Value) GetByteValue() []byte {
	if x, ok := m.GetValueType().(*Value_ByteValue); ok {
		return x.ByteValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_BooleanValue)(nil),
		(*Value_Int32Value)(nil),
		(*Value_Int64Value)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_StringArray)(nil),
		(*Value_BoolArray)(nil),
		(*Value_Int32Array)(nil),
		(*Value_Int64Array)(nil),
		(*Value_DoubleArray)(nil),
		(*Value_ByteValue)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// value_type
	switch x := m.ValueType.(type) {
	case *Value_BooleanValue:
		t := uint64(0)
		if x.BooleanValue {
			t = 1
		}
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Value_Int32Value:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int32Value))
	case *Value_Int64Value:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *Value_DoubleValue:
		b.EncodeVarint(4<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Value_StringValue:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *Value_StringArray:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringArray); err != nil {
			return err
		}
	case *Value_BoolArray:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BoolArray); err != nil {
			return err
		}
	case *Value_Int32Array:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int32Array); err != nil {
			return err
		}
	case *Value_Int64Array:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64Array); err != nil {
			return err
		}
	case *Value_DoubleArray:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoubleArray); err != nil {
			return err
		}
	case *Value_ByteValue:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.ByteValue)
	case nil:
	default:
		return fmt.Errorf("Value.ValueType has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // value_type.boolean_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueType = &Value_BooleanValue{x != 0}
		return true, err
	case 2: // value_type.int32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueType = &Value_Int32Value{int32(x)}
		return true, err
	case 3: // value_type.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueType = &Value_Int64Value{int64(x)}
		return true, err
	case 4: // value_type.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.ValueType = &Value_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 5: // value_type.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ValueType = &Value_StringValue{x}
		return true, err
	case 6: // value_type.string_array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringArray)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_StringArray{msg}
		return true, err
	case 7: // value_type.bool_array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BoolArray)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_BoolArray{msg}
		return true, err
	case 8: // value_type.int32_array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int32Array)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_Int32Array{msg}
		return true, err
	case 9: // value_type.int64_array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int64Array)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_Int64Array{msg}
		return true, err
	case 10: // value_type.double_array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DoubleArray)
		err := b.DecodeMessage(msg)
		m.ValueType = &Value_DoubleArray{msg}
		return true, err
	case 11: // value_type.byte_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.ValueType = &Value_ByteValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// value_type
	switch x := m.ValueType.(type) {
	case *Value_BooleanValue:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *Value_Int32Value:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int32Value))
	case *Value_Int64Value:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *Value_DoubleValue:
		n += proto.SizeVarint(4<<3 | proto.WireFixed64)
		n += 8
	case *Value_StringValue:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Value_StringArray:
		s := proto.Size(x.StringArray)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_BoolArray:
		s := proto.Size(x.BoolArray)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_Int32Array:
		s := proto.Size(x.Int32Array)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_Int64Array:
		s := proto.Size(x.Int64Array)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_DoubleArray:
		s := proto.Size(x.DoubleArray)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_ByteValue:
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ByteValue)))
		n += len(x.ByteValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StringArray struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *StringArray) Reset()                    { *m = StringArray{} }
func (m *StringArray) String() string            { return proto.CompactTextString(m) }
func (*StringArray) ProtoMessage()               {}
func (*StringArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StringArray) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type BoolArray struct {
	Values []bool `protobuf:"varint,1,rep,packed,name=values" json:"values,omitempty"`
}

func (m *BoolArray) Reset()                    { *m = BoolArray{} }
func (m *BoolArray) String() string            { return proto.CompactTextString(m) }
func (*BoolArray) ProtoMessage()               {}
func (*BoolArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BoolArray) GetValues() []bool {
	if m != nil {
		return m.Values
	}
	return nil
}

type DoubleArray struct {
	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values" json:"values,omitempty"`
}

func (m *DoubleArray) Reset()                    { *m = DoubleArray{} }
func (m *DoubleArray) String() string            { return proto.CompactTextString(m) }
func (*DoubleArray) ProtoMessage()               {}
func (*DoubleArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DoubleArray) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Int64Array struct {
	Values []int64 `protobuf:"varint,1,rep,packed,name=values" json:"values,omitempty"`
}

func (m *Int64Array) Reset()                    { *m = Int64Array{} }
func (m *Int64Array) String() string            { return proto.CompactTextString(m) }
func (*Int64Array) ProtoMessage()               {}
func (*Int64Array) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Int64Array) GetValues() []int64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Int32Array struct {
	Values []int32 `protobuf:"varint,1,rep,packed,name=values" json:"values,omitempty"`
}

func (m *Int32Array) Reset()                    { *m = Int32Array{} }
func (m *Int32Array) String() string            { return proto.CompactTextString(m) }
func (*Int32Array) ProtoMessage()               {}
func (*Int32Array) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Int32Array) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

// *
// Request to upsert single doc
// Fields:
// RequestContext: contains tenant_id which is necessary
//  collection_id: required field
// doc: id(required field) and json string of the custom object to store
type UpsertDocRequest struct {
	RequestContext *com_mindtickle_storage_pb_common.RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	CollectionId   string                                           `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Doc            *Doc                                             `protobuf:"bytes,3,opt,name=doc" json:"doc,omitempty"`
}

func (m *UpsertDocRequest) Reset()                    { *m = UpsertDocRequest{} }
func (m *UpsertDocRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertDocRequest) ProtoMessage()               {}
func (*UpsertDocRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpsertDocRequest) GetRequestContext() *com_mindtickle_storage_pb_common.RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *UpsertDocRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *UpsertDocRequest) GetDoc() *Doc {
	if m != nil {
		return m.Doc
	}
	return nil
}

// *
// Request to get single doc.
// Fields:
// RequestContext: contains tenant_id which is necessary
//  collection_id: required field
// id: id to fetch. id is required.
type GetDocRequest struct {
	RequestContext *com_mindtickle_storage_pb_common.RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	CollectionId   string                                           `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Id             string                                           `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *GetDocRequest) Reset()                    { *m = GetDocRequest{} }
func (m *GetDocRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDocRequest) ProtoMessage()               {}
func (*GetDocRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetDocRequest) GetRequestContext() *com_mindtickle_storage_pb_common.RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *GetDocRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *GetDocRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// *
// Request to search docs.
// Fields:
// RequestContext: contains tenant_id which is necessary
//  collection_id: required field
// query: Query on the basis of which the doc(s) will be filtered.
// skip and limit will be used to handle pagination -> they have same meaning as does in MySQL
// Sort: this is used to add the sort information to the search request.
// It contains multiple sort params where each param consist of sort order and the sorting field
type SearchDocsRequest struct {
	RequestContext *com_mindtickle_storage_pb_common.RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	CollectionId   string                                           `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Query          *Query                                           `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	// sort and pagination
	Skip   int64   `protobuf:"varint,4,opt,name=skip" json:"skip,omitempty"`
	Limit  int64   `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	SortBy *SortBy `protobuf:"bytes,6,opt,name=sort_by,json=sortBy" json:"sort_by,omitempty"`
}

func (m *SearchDocsRequest) Reset()                    { *m = SearchDocsRequest{} }
func (m *SearchDocsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchDocsRequest) ProtoMessage()               {}
func (*SearchDocsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SearchDocsRequest) GetRequestContext() *com_mindtickle_storage_pb_common.RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *SearchDocsRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *SearchDocsRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SearchDocsRequest) GetSkip() int64 {
	if m != nil {
		return m.Skip
	}
	return 0
}

func (m *SearchDocsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchDocsRequest) GetSortBy() *SortBy {
	if m != nil {
		return m.SortBy
	}
	return nil
}

type SortBy struct {
	SortFields []*SortField `protobuf:"bytes,1,rep,name=sort_fields,json=sortFields" json:"sort_fields,omitempty"`
}

func (m *SortBy) Reset()                    { *m = SortBy{} }
func (m *SortBy) String() string            { return proto.CompactTextString(m) }
func (*SortBy) ProtoMessage()               {}
func (*SortBy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SortBy) GetSortFields() []*SortField {
	if m != nil {
		return m.SortFields
	}
	return nil
}

type SortField struct {
	SortOrder SortField_SortOrder `protobuf:"varint,1,opt,name=sort_order,json=sortOrder,enum=com.mindtickle.storage.pb.tickleDb.SortField_SortOrder" json:"sort_order,omitempty"`
	Field     string              `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
}

func (m *SortField) Reset()                    { *m = SortField{} }
func (m *SortField) String() string            { return proto.CompactTextString(m) }
func (*SortField) ProtoMessage()               {}
func (*SortField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SortField) GetSortOrder() SortField_SortOrder {
	if m != nil {
		return m.SortOrder
	}
	return SortField_SORT_ORDER_UNDEFINED
}

func (m *SortField) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

// *
// Request to delete single doc.
// Field:
// RequestContext: contains tenant_id which is necessary
//  collection_id: required field
// id: id to delete. id is required.
type DeleteDocRequest struct {
	RequestContext *com_mindtickle_storage_pb_common.RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	CollectionId   string                                           `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Id             string                                           `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	AuthMeta       *AuthMeta                                        `protobuf:"bytes,4,opt,name=auth_meta,json=authMeta" json:"auth_meta,omitempty"`
}

func (m *DeleteDocRequest) Reset()                    { *m = DeleteDocRequest{} }
func (m *DeleteDocRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDocRequest) ProtoMessage()               {}
func (*DeleteDocRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeleteDocRequest) GetRequestContext() *com_mindtickle_storage_pb_common.RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *DeleteDocRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *DeleteDocRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteDocRequest) GetAuthMeta() *AuthMeta {
	if m != nil {
		return m.AuthMeta
	}
	return nil
}

// *
// Request to delete all the docs that matches given query.
// The action only deletes docs for given collection and tenant.
// Field:
// RequestContext: contains tenant_id which is necessary
// collection_id: required field
// query: query to filter out doc(s)
type DeleteDocsByQueryRequest struct {
	RequestContext *com_mindtickle_storage_pb_common.RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	CollectionId   string                                           `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Query          *Query                                           `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	AuthMeta       *AuthMeta                                        `protobuf:"bytes,4,opt,name=auth_meta,json=authMeta" json:"auth_meta,omitempty"`
}

func (m *DeleteDocsByQueryRequest) Reset()                    { *m = DeleteDocsByQueryRequest{} }
func (m *DeleteDocsByQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDocsByQueryRequest) ProtoMessage()               {}
func (*DeleteDocsByQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeleteDocsByQueryRequest) GetRequestContext() *com_mindtickle_storage_pb_common.RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *DeleteDocsByQueryRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *DeleteDocsByQueryRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *DeleteDocsByQueryRequest) GetAuthMeta() *AuthMeta {
	if m != nil {
		return m.AuthMeta
	}
	return nil
}

// *
// The msg is used to create doc(s) for given collection.
// Field:
// RequestContext: contains tenant_id which is necessary
// collection_id: required field
// repeated Doc: list of docs to be created.
//                 id must be provided for each doc.
type CreateDocsRequest struct {
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Doc          []*Doc `protobuf:"bytes,3,rep,name=doc" json:"doc,omitempty"`
}

func (m *CreateDocsRequest) Reset()                    { *m = CreateDocsRequest{} }
func (m *CreateDocsRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDocsRequest) ProtoMessage()               {}
func (*CreateDocsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateDocsRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *CreateDocsRequest) GetDoc() []*Doc {
	if m != nil {
		return m.Doc
	}
	return nil
}

// *
// The msg is used to update doc(s) for given collection.
// Field:
// RequestContext: contains tenant_id which is necessary
// collection_id: required field
// repeated Doc: list of docs to be updated.
//                 id must be provided for each doc.
type UpdateDocsRequest struct {
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Doc          []*Doc `protobuf:"bytes,3,rep,name=doc" json:"doc,omitempty"`
}

func (m *UpdateDocsRequest) Reset()                    { *m = UpdateDocsRequest{} }
func (m *UpdateDocsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDocsRequest) ProtoMessage()               {}
func (*UpdateDocsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateDocsRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *UpdateDocsRequest) GetDoc() []*Doc {
	if m != nil {
		return m.Doc
	}
	return nil
}

// *
// The msg is used to delete doc(s) for given collection.
// Field:
// RequestContext: contains tenant_id which is necessary
// collection_id: required field
// repeated Doc: list of docs to be deleted.
// id must be provided for each doc.
type DeleteDocsRequest struct {
	CollectionId string         `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	DocAuthMeta  []*DocAuthMeta `protobuf:"bytes,3,rep,name=doc_auth_meta,json=docAuthMeta" json:"doc_auth_meta,omitempty"`
}

func (m *DeleteDocsRequest) Reset()                    { *m = DeleteDocsRequest{} }
func (m *DeleteDocsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDocsRequest) ProtoMessage()               {}
func (*DeleteDocsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DeleteDocsRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *DeleteDocsRequest) GetDocAuthMeta() []*DocAuthMeta {
	if m != nil {
		return m.DocAuthMeta
	}
	return nil
}

type DocAuthMeta struct {
	Id       string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AuthMeta *AuthMeta `protobuf:"bytes,2,opt,name=auth_meta,json=authMeta" json:"auth_meta,omitempty"`
}

func (m *DocAuthMeta) Reset()                    { *m = DocAuthMeta{} }
func (m *DocAuthMeta) String() string            { return proto.CompactTextString(m) }
func (*DocAuthMeta) ProtoMessage()               {}
func (*DocAuthMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DocAuthMeta) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DocAuthMeta) GetAuthMeta() *AuthMeta {
	if m != nil {
		return m.AuthMeta
	}
	return nil
}

// *
// The msg is used to upsert doc(s) for given collection.
// Field:
// RequestContext: contains tenant_id which is necessary
// collection_id: required field
// repeated Doc: list of docs to be updated.
//           id(required field) and json string of the custom object to store
type UpsertDocsRequest struct {
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	Doc          []*Doc `protobuf:"bytes,3,rep,name=doc" json:"doc,omitempty"`
}

func (m *UpsertDocsRequest) Reset()                    { *m = UpsertDocsRequest{} }
func (m *UpsertDocsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertDocsRequest) ProtoMessage()               {}
func (*UpsertDocsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *UpsertDocsRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *UpsertDocsRequest) GetDoc() []*Doc {
	if m != nil {
		return m.Doc
	}
	return nil
}

// *
// Request msg ModifyDocsRequest action.
//  Fields:
// CreateDocsRequest: List of all the doc(s) to be created.
// UpdateDocsRequest: List of all the doc(s) to be updated.
// DeleteDocsRequest: List of all the doc(s) to be deleted.
// UpsertDocsRequest: List of all the doc(s) to be upserted.
type ModifyDocsRequest struct {
	RequestContext           *com_mindtickle_storage_pb_common.RequestContext `protobuf:"bytes,1,opt,name=request_context,json=requestContext" json:"request_context,omitempty"`
	CreateDocsRequest        []*CreateDocsRequest                             `protobuf:"bytes,2,rep,name=create_docs_request,json=createDocsRequest" json:"create_docs_request,omitempty"`
	UpdateDocsRequest        []*UpdateDocsRequest                             `protobuf:"bytes,3,rep,name=update_docs_request,json=updateDocsRequest" json:"update_docs_request,omitempty"`
	DeleteDocsRequest        []*DeleteDocsRequest                             `protobuf:"bytes,4,rep,name=delete_docs_request,json=deleteDocsRequest" json:"delete_docs_request,omitempty"`
	UpsertDocsRequest        []*UpsertDocsRequest                             `protobuf:"bytes,5,rep,name=upsert_docs_request,json=upsertDocsRequest" json:"upsert_docs_request,omitempty"`
	PartialUpdateDocsRequest []*PartialUpdateDocsRequest                      `protobuf:"bytes,6,rep,name=partial_update_docs_request,json=partialUpdateDocsRequest" json:"partial_update_docs_request,omitempty"`
}

func (m *ModifyDocsRequest) Reset()                    { *m = ModifyDocsRequest{} }
func (m *ModifyDocsRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyDocsRequest) ProtoMessage()               {}
func (*ModifyDocsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ModifyDocsRequest) GetRequestContext() *com_mindtickle_storage_pb_common.RequestContext {
	if m != nil {
		return m.RequestContext
	}
	return nil
}

func (m *ModifyDocsRequest) GetCreateDocsRequest() []*CreateDocsRequest {
	if m != nil {
		return m.CreateDocsRequest
	}
	return nil
}

func (m *ModifyDocsRequest) GetUpdateDocsRequest() []*UpdateDocsRequest {
	if m != nil {
		return m.UpdateDocsRequest
	}
	return nil
}

func (m *ModifyDocsRequest) GetDeleteDocsRequest() []*DeleteDocsRequest {
	if m != nil {
		return m.DeleteDocsRequest
	}
	return nil
}

func (m *ModifyDocsRequest) GetUpsertDocsRequest() []*UpsertDocsRequest {
	if m != nil {
		return m.UpsertDocsRequest
	}
	return nil
}

func (m *ModifyDocsRequest) GetPartialUpdateDocsRequest() []*PartialUpdateDocsRequest {
	if m != nil {
		return m.PartialUpdateDocsRequest
	}
	return nil
}

type PartialUpdateDocsRequest struct {
	CollectionId string        `protobuf:"bytes,1,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	PartialDocs  []*PartialDoc `protobuf:"bytes,2,rep,name=partial_docs,json=partialDocs" json:"partial_docs,omitempty"`
}

func (m *PartialUpdateDocsRequest) Reset()                    { *m = PartialUpdateDocsRequest{} }
func (m *PartialUpdateDocsRequest) String() string            { return proto.CompactTextString(m) }
func (*PartialUpdateDocsRequest) ProtoMessage()               {}
func (*PartialUpdateDocsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PartialUpdateDocsRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *PartialUpdateDocsRequest) GetPartialDocs() []*PartialDoc {
	if m != nil {
		return m.PartialDocs
	}
	return nil
}

type PartialDoc struct {
	DocId    string            `protobuf:"bytes,1,opt,name=doc_id,json=docId" json:"doc_id,omitempty"`
	Fields   map[string]*Value `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AuthMeta *AuthMeta         `protobuf:"bytes,3,opt,name=auth_meta,json=authMeta" json:"auth_meta,omitempty"`
}

func (m *PartialDoc) Reset()                    { *m = PartialDoc{} }
func (m *PartialDoc) String() string            { return proto.CompactTextString(m) }
func (*PartialDoc) ProtoMessage()               {}
func (*PartialDoc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *PartialDoc) GetDocId() string {
	if m != nil {
		return m.DocId
	}
	return ""
}

func (m *PartialDoc) GetFields() map[string]*Value {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *PartialDoc) GetAuthMeta() *AuthMeta {
	if m != nil {
		return m.AuthMeta
	}
	return nil
}

type CreateDocResponse struct {
}

func (m *CreateDocResponse) Reset()                    { *m = CreateDocResponse{} }
func (m *CreateDocResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDocResponse) ProtoMessage()               {}
func (*CreateDocResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

// *
// Update Doc response msg
type UpdateDocResponse struct {
}

func (m *UpdateDocResponse) Reset()                    { *m = UpdateDocResponse{} }
func (m *UpdateDocResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDocResponse) ProtoMessage()               {}
func (*UpdateDocResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

// *
// Response of string query execution, returned as a <List of [Map of [column-values]]>
type GetDocsBySqlQueryResponse struct {
	Rows []*Row `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
}

func (m *GetDocsBySqlQueryResponse) Reset()                    { *m = GetDocsBySqlQueryResponse{} }
func (m *GetDocsBySqlQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDocsBySqlQueryResponse) ProtoMessage()               {}
func (*GetDocsBySqlQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetDocsBySqlQueryResponse) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

// *
// contains no of doc(s) updated
type UpdateDocsByQueryResponse struct {
	AffectedDocsCount int64 `protobuf:"varint,1,opt,name=affected_docs_count,json=affectedDocsCount" json:"affected_docs_count,omitempty"`
}

func (m *UpdateDocsByQueryResponse) Reset()                    { *m = UpdateDocsByQueryResponse{} }
func (m *UpdateDocsByQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDocsByQueryResponse) ProtoMessage()               {}
func (*UpdateDocsByQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UpdateDocsByQueryResponse) GetAffectedDocsCount() int64 {
	if m != nil {
		return m.AffectedDocsCount
	}
	return 0
}

type UpsertDocResponse struct {
}

func (m *UpsertDocResponse) Reset()                    { *m = UpsertDocResponse{} }
func (m *UpsertDocResponse) String() string            { return proto.CompactTextString(m) }
func (*UpsertDocResponse) ProtoMessage()               {}
func (*UpsertDocResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

// *
// Contains docs that matched search queries and count of the docs that matched the query.
type SearchDocsResponse struct {
	Docs      []*Doc `protobuf:"bytes,1,rep,name=docs" json:"docs,omitempty"`
	TotalSize int64  `protobuf:"varint,4,opt,name=total_size,json=totalSize" json:"total_size,omitempty"`
}

func (m *SearchDocsResponse) Reset()                    { *m = SearchDocsResponse{} }
func (m *SearchDocsResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchDocsResponse) ProtoMessage()               {}
func (*SearchDocsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *SearchDocsResponse) GetDocs() []*Doc {
	if m != nil {
		return m.Docs
	}
	return nil
}

func (m *SearchDocsResponse) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

// *
// contains if the delete action was successful
type DeleteDocResponse struct {
}

func (m *DeleteDocResponse) Reset()                    { *m = DeleteDocResponse{} }
func (m *DeleteDocResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDocResponse) ProtoMessage()               {}
func (*DeleteDocResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

// *
// contains no of doc(s) deleted
type DeleteDocsByQueryResponse struct {
	AffectedDocsCount int64 `protobuf:"varint,1,opt,name=affected_docs_count,json=affectedDocsCount" json:"affected_docs_count,omitempty"`
}

func (m *DeleteDocsByQueryResponse) Reset()                    { *m = DeleteDocsByQueryResponse{} }
func (m *DeleteDocsByQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDocsByQueryResponse) ProtoMessage()               {}
func (*DeleteDocsByQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DeleteDocsByQueryResponse) GetAffectedDocsCount() int64 {
	if m != nil {
		return m.AffectedDocsCount
	}
	return 0
}

type ModifyDocsResponse struct {
}

func (m *ModifyDocsResponse) Reset()                    { *m = ModifyDocsResponse{} }
func (m *ModifyDocsResponse) String() string            { return proto.CompactTextString(m) }
func (*ModifyDocsResponse) ProtoMessage()               {}
func (*ModifyDocsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

// *
// Query is for filtering doc(s). Query is composed of filters and queries itself.
// Logical operator joins filters and queries together.
// Example:
//  1.  (col1 EQUAL val1) OR ((col2 GREATER val2) AND (col3 IN [val31, val32]))
//       In the above example:
//         * "(col1 EQUAL val1)" is filter
//         * OR/AND are logical operator
//         * "((col2 GREATER val2) AND (col3 IN [val31, val32]))" is query which is
//            again composed of filter "(col2 GREATER val2)" and "(col3 IN [val31, val32])"
//
// Fields:
//  * repeated Filter: list of filter expressions. Please refer filter
//  * repeated Query: list of queries
//  * LogicalOperator: logical operator that joins filter and queries together
//  * negate: Setting it true fetches results that are not matched by query
//            Example:
//              If the query is "((col2 GREATER val2) AND (col3 IN [val31, val32]))", setting negate
//              makes it "NOT ((col2 GREATER val2) AND (col3 IN [val31, val32]))"
type Query struct {
	Filters         []*Filter             `protobuf:"bytes,1,rep,name=filters" json:"filters,omitempty"`
	Queries         []*Query              `protobuf:"bytes,2,rep,name=queries" json:"queries,omitempty"`
	LogicalOperator Query_LogicalOperator `protobuf:"varint,3,opt,name=logical_operator,json=logicalOperator,enum=com.mindtickle.storage.pb.tickleDb.Query_LogicalOperator" json:"logical_operator,omitempty"`
	Negate          bool                  `protobuf:"varint,4,opt,name=negate" json:"negate,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Query) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Query) GetQueries() []*Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *Query) GetLogicalOperator() Query_LogicalOperator {
	if m != nil {
		return m.LogicalOperator
	}
	return Query_LOGICAL_OPERATOR_UNSPECIFIED
}

func (m *Query) GetNegate() bool {
	if m != nil {
		return m.Negate
	}
	return false
}

// *
// Expressions to filter out docs based on certain criteria.
//  Filters are the smallest filtering criteria. It is composed to make queries
// Fields:
//  * Field: The field which needs to be evaluated. It is the complete field path in json doc.
//  * Values: The value(s) on which field should be checked against
//  * Predicate: The predicate against which Field and value should be evaluated.
//  * negate: filters doc(s) that doesn't matches filter
// Examples:
//  * (col2 GREATER val2)
//  * (col1 EQUAL val1)
type Filter struct {
	Predicate Filter_Predicate `protobuf:"varint,1,opt,name=predicate,enum=com.mindtickle.storage.pb.tickleDb.Filter_Predicate" json:"predicate,omitempty"`
	Field     string           `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
	Values    []string         `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
	Negate    bool             `protobuf:"varint,4,opt,name=negate" json:"negate,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *Filter) GetPredicate() Filter_Predicate {
	if m != nil {
		return m.Predicate
	}
	return Filter_PREDICATE_UNSPECIFIED
}

func (m *Filter) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *Filter) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Filter) GetNegate() bool {
	if m != nil {
		return m.Negate
	}
	return false
}

// *
// id: Id of the doc on which operation is performed
// doc: json string of custom object to be stored
type Doc struct {
	Id       string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Doc      string    `protobuf:"bytes,2,opt,name=doc" json:"doc,omitempty"`
	DocMeta  *DocMeta  `protobuf:"bytes,3,opt,name=doc_meta,json=docMeta" json:"doc_meta,omitempty"`
	AuthMeta *AuthMeta `protobuf:"bytes,4,opt,name=auth_meta,json=authMeta" json:"auth_meta,omitempty"`
}

func (m *Doc) Reset()                    { *m = Doc{} }
func (m *Doc) String() string            { return proto.CompactTextString(m) }
func (*Doc) ProtoMessage()               {}
func (*Doc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Doc) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Doc) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *Doc) GetDocMeta() *DocMeta {
	if m != nil {
		return m.DocMeta
	}
	return nil
}

func (m *Doc) GetAuthMeta() *AuthMeta {
	if m != nil {
		return m.AuthMeta
	}
	return nil
}

type DocMeta struct {
	CreateTime *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	UpdateTime *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	Version    int64                      `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DocMeta) Reset()                    { *m = DocMeta{} }
func (m *DocMeta) String() string            { return proto.CompactTextString(m) }
func (*DocMeta) ProtoMessage()               {}
func (*DocMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *DocMeta) GetCreateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *DocMeta) GetUpdateTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *DocMeta) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type AuthMeta struct {
	GlobalContextId string `protobuf:"bytes,1,opt,name=global_context_id,json=globalContextId" json:"global_context_id,omitempty"`
	AuthId          string `protobuf:"bytes,2,opt,name=auth_id,json=authId" json:"auth_id,omitempty"`
}

func (m *AuthMeta) Reset()                    { *m = AuthMeta{} }
func (m *AuthMeta) String() string            { return proto.CompactTextString(m) }
func (*AuthMeta) ProtoMessage()               {}
func (*AuthMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *AuthMeta) GetGlobalContextId() string {
	if m != nil {
		return m.GlobalContextId
	}
	return ""
}

func (m *AuthMeta) GetAuthId() string {
	if m != nil {
		return m.AuthId
	}
	return ""
}

type Row struct {
	ColumnMap map[string]string `protobuf:"bytes,1,rep,name=columnMap" json:"columnMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *Row) GetColumnMap() map[string]string {
	if m != nil {
		return m.ColumnMap
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateDocRequest)(nil), "com.mindtickle.storage.pb.tickleDb.CreateDocRequest")
	proto.RegisterType((*UpdateDocRequest)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateDocRequest")
	proto.RegisterType((*GetDocsBySqlQueryRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetDocsBySqlQueryRequest")
	proto.RegisterType((*UpdateDocsByQueryRequest)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateDocsByQueryRequest")
	proto.RegisterType((*Value)(nil), "com.mindtickle.storage.pb.tickleDb.Value")
	proto.RegisterType((*StringArray)(nil), "com.mindtickle.storage.pb.tickleDb.StringArray")
	proto.RegisterType((*BoolArray)(nil), "com.mindtickle.storage.pb.tickleDb.BoolArray")
	proto.RegisterType((*DoubleArray)(nil), "com.mindtickle.storage.pb.tickleDb.DoubleArray")
	proto.RegisterType((*Int64Array)(nil), "com.mindtickle.storage.pb.tickleDb.Int64Array")
	proto.RegisterType((*Int32Array)(nil), "com.mindtickle.storage.pb.tickleDb.Int32Array")
	proto.RegisterType((*UpsertDocRequest)(nil), "com.mindtickle.storage.pb.tickleDb.UpsertDocRequest")
	proto.RegisterType((*GetDocRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetDocRequest")
	proto.RegisterType((*SearchDocsRequest)(nil), "com.mindtickle.storage.pb.tickleDb.SearchDocsRequest")
	proto.RegisterType((*SortBy)(nil), "com.mindtickle.storage.pb.tickleDb.SortBy")
	proto.RegisterType((*SortField)(nil), "com.mindtickle.storage.pb.tickleDb.SortField")
	proto.RegisterType((*DeleteDocRequest)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteDocRequest")
	proto.RegisterType((*DeleteDocsByQueryRequest)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteDocsByQueryRequest")
	proto.RegisterType((*CreateDocsRequest)(nil), "com.mindtickle.storage.pb.tickleDb.CreateDocsRequest")
	proto.RegisterType((*UpdateDocsRequest)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateDocsRequest")
	proto.RegisterType((*DeleteDocsRequest)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteDocsRequest")
	proto.RegisterType((*DocAuthMeta)(nil), "com.mindtickle.storage.pb.tickleDb.DocAuthMeta")
	proto.RegisterType((*UpsertDocsRequest)(nil), "com.mindtickle.storage.pb.tickleDb.UpsertDocsRequest")
	proto.RegisterType((*ModifyDocsRequest)(nil), "com.mindtickle.storage.pb.tickleDb.ModifyDocsRequest")
	proto.RegisterType((*PartialUpdateDocsRequest)(nil), "com.mindtickle.storage.pb.tickleDb.PartialUpdateDocsRequest")
	proto.RegisterType((*PartialDoc)(nil), "com.mindtickle.storage.pb.tickleDb.PartialDoc")
	proto.RegisterType((*CreateDocResponse)(nil), "com.mindtickle.storage.pb.tickleDb.CreateDocResponse")
	proto.RegisterType((*UpdateDocResponse)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateDocResponse")
	proto.RegisterType((*GetDocsBySqlQueryResponse)(nil), "com.mindtickle.storage.pb.tickleDb.GetDocsBySqlQueryResponse")
	proto.RegisterType((*UpdateDocsByQueryResponse)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateDocsByQueryResponse")
	proto.RegisterType((*UpsertDocResponse)(nil), "com.mindtickle.storage.pb.tickleDb.UpsertDocResponse")
	proto.RegisterType((*SearchDocsResponse)(nil), "com.mindtickle.storage.pb.tickleDb.SearchDocsResponse")
	proto.RegisterType((*DeleteDocResponse)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteDocResponse")
	proto.RegisterType((*DeleteDocsByQueryResponse)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteDocsByQueryResponse")
	proto.RegisterType((*ModifyDocsResponse)(nil), "com.mindtickle.storage.pb.tickleDb.ModifyDocsResponse")
	proto.RegisterType((*Query)(nil), "com.mindtickle.storage.pb.tickleDb.Query")
	proto.RegisterType((*Filter)(nil), "com.mindtickle.storage.pb.tickleDb.Filter")
	proto.RegisterType((*Doc)(nil), "com.mindtickle.storage.pb.tickleDb.Doc")
	proto.RegisterType((*DocMeta)(nil), "com.mindtickle.storage.pb.tickleDb.DocMeta")
	proto.RegisterType((*AuthMeta)(nil), "com.mindtickle.storage.pb.tickleDb.AuthMeta")
	proto.RegisterType((*Row)(nil), "com.mindtickle.storage.pb.tickleDb.Row")
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.SortField_SortOrder", SortField_SortOrder_name, SortField_SortOrder_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.Query_LogicalOperator", Query_LogicalOperator_name, Query_LogicalOperator_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.Filter_Predicate", Filter_Predicate_name, Filter_Predicate_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DocService service

type DocServiceClient interface {
	// *
	// To fetch single doc by id for given collection and tenant.
	GetDoc(ctx context.Context, in *GetDocRequest, opts ...grpc.CallOption) (*Doc, error)
	// *
	// To create single doc. id must be provided in the request
	CreateDoc(ctx context.Context, in *CreateDocRequest, opts ...grpc.CallOption) (*CreateDocResponse, error)
	// *
	// To update single doc.
	UpdateDoc(ctx context.Context, in *UpdateDocRequest, opts ...grpc.CallOption) (*UpdateDocResponse, error)
	// *
	// To delete single doc.
	DeleteDoc(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*DeleteDocResponse, error)
	// *
	// To search doc(s) based on provided query.
	// Returns List of doc(s) that matches the given query.
	SearchDocs(ctx context.Context, in *SearchDocsRequest, opts ...grpc.CallOption) (*SearchDocsResponse, error)
	// *
	// To upsert single doc. id must be present in request.
	UpsertDoc(ctx context.Context, in *UpsertDocRequest, opts ...grpc.CallOption) (*UpsertDocResponse, error)
	// *
	// To retrieve multiple rows as a result of query execution.
	// Since this accepts a string query, this can be used to do DB level joins spanning
	// multiple collections.
	// IMPORTANT: Since TickleDB does not support application-layer joins, this API assumes the request
	// to be confined to a single node to be able to perform DB level joins.
	// For documents with JSON values, if values are derived from json column, without giving an alias (i.e.
	// using AS), the json extract statement itself is the column name. Eg:
	// select name, data->>'$.scheduledBy' from task LEFT JOIN scheduled ON id=scheduleId; will have column names as
	//  name | data->>'$.scheduledBy'
	GetDocsBySqlQuery(ctx context.Context, in *GetDocsBySqlQueryRequest, opts ...grpc.CallOption) (*GetDocsBySqlQueryResponse, error)
	// *
	// To update doc(s) which matches given query.
	// Returns no of doc(s) that where updated.
	// This operation will either update all matched doc(s) or none.
	UpdateDocsByQuery(ctx context.Context, in *UpdateDocsByQueryRequest, opts ...grpc.CallOption) (*UpdateDocsByQueryResponse, error)
	// *
	// To delete doc(s) that matches given query.
	// Returns no of doc(s) that where deleted.
	// This operation will either delete all matched doc(s) or none.
	DeleteDocsByQuery(ctx context.Context, in *DeleteDocsByQueryRequest, opts ...grpc.CallOption) (*DeleteDocsByQueryResponse, error)
	// *
	// To perform create, update or/and delete on multiple doc(s)
	// Returns no of doc(s) that where deleted.
	// This operation will modify all the provided doc(s) or none.
	ModifyDocs(ctx context.Context, in *ModifyDocsRequest, opts ...grpc.CallOption) (*ModifyDocsResponse, error)
}

type docServiceClient struct {
	cc *grpc.ClientConn
}

func NewDocServiceClient(cc *grpc.ClientConn) DocServiceClient {
	return &docServiceClient{cc}
}

func (c *docServiceClient) GetDoc(ctx context.Context, in *GetDocRequest, opts ...grpc.CallOption) (*Doc, error) {
	out := new(Doc)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.DocService/GetDoc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) CreateDoc(ctx context.Context, in *CreateDocRequest, opts ...grpc.CallOption) (*CreateDocResponse, error) {
	out := new(CreateDocResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.DocService/CreateDoc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) UpdateDoc(ctx context.Context, in *UpdateDocRequest, opts ...grpc.CallOption) (*UpdateDocResponse, error) {
	out := new(UpdateDocResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.DocService/UpdateDoc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) DeleteDoc(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*DeleteDocResponse, error) {
	out := new(DeleteDocResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.DocService/DeleteDoc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) SearchDocs(ctx context.Context, in *SearchDocsRequest, opts ...grpc.CallOption) (*SearchDocsResponse, error) {
	out := new(SearchDocsResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.DocService/SearchDocs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) UpsertDoc(ctx context.Context, in *UpsertDocRequest, opts ...grpc.CallOption) (*UpsertDocResponse, error) {
	out := new(UpsertDocResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.DocService/UpsertDoc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) GetDocsBySqlQuery(ctx context.Context, in *GetDocsBySqlQueryRequest, opts ...grpc.CallOption) (*GetDocsBySqlQueryResponse, error) {
	out := new(GetDocsBySqlQueryResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.DocService/GetDocsBySqlQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) UpdateDocsByQuery(ctx context.Context, in *UpdateDocsByQueryRequest, opts ...grpc.CallOption) (*UpdateDocsByQueryResponse, error) {
	out := new(UpdateDocsByQueryResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.DocService/UpdateDocsByQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) DeleteDocsByQuery(ctx context.Context, in *DeleteDocsByQueryRequest, opts ...grpc.CallOption) (*DeleteDocsByQueryResponse, error) {
	out := new(DeleteDocsByQueryResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.DocService/DeleteDocsByQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) ModifyDocs(ctx context.Context, in *ModifyDocsRequest, opts ...grpc.CallOption) (*ModifyDocsResponse, error) {
	out := new(ModifyDocsResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.DocService/ModifyDocs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DocService service

type DocServiceServer interface {
	// *
	// To fetch single doc by id for given collection and tenant.
	GetDoc(context.Context, *GetDocRequest) (*Doc, error)
	// *
	// To create single doc. id must be provided in the request
	CreateDoc(context.Context, *CreateDocRequest) (*CreateDocResponse, error)
	// *
	// To update single doc.
	UpdateDoc(context.Context, *UpdateDocRequest) (*UpdateDocResponse, error)
	// *
	// To delete single doc.
	DeleteDoc(context.Context, *DeleteDocRequest) (*DeleteDocResponse, error)
	// *
	// To search doc(s) based on provided query.
	// Returns List of doc(s) that matches the given query.
	SearchDocs(context.Context, *SearchDocsRequest) (*SearchDocsResponse, error)
	// *
	// To upsert single doc. id must be present in request.
	UpsertDoc(context.Context, *UpsertDocRequest) (*UpsertDocResponse, error)
	// *
	// To retrieve multiple rows as a result of query execution.
	// Since this accepts a string query, this can be used to do DB level joins spanning
	// multiple collections.
	// IMPORTANT: Since TickleDB does not support application-layer joins, this API assumes the request
	// to be confined to a single node to be able to perform DB level joins.
	// For documents with JSON values, if values are derived from json column, without giving an alias (i.e.
	// using AS), the json extract statement itself is the column name. Eg:
	// select name, data->>'$.scheduledBy' from task LEFT JOIN scheduled ON id=scheduleId; will have column names as
	//  name | data->>'$.scheduledBy'
	GetDocsBySqlQuery(context.Context, *GetDocsBySqlQueryRequest) (*GetDocsBySqlQueryResponse, error)
	// *
	// To update doc(s) which matches given query.
	// Returns no of doc(s) that where updated.
	// This operation will either update all matched doc(s) or none.
	UpdateDocsByQuery(context.Context, *UpdateDocsByQueryRequest) (*UpdateDocsByQueryResponse, error)
	// *
	// To delete doc(s) that matches given query.
	// Returns no of doc(s) that where deleted.
	// This operation will either delete all matched doc(s) or none.
	DeleteDocsByQuery(context.Context, *DeleteDocsByQueryRequest) (*DeleteDocsByQueryResponse, error)
	// *
	// To perform create, update or/and delete on multiple doc(s)
	// Returns no of doc(s) that where deleted.
	// This operation will modify all the provided doc(s) or none.
	ModifyDocs(context.Context, *ModifyDocsRequest) (*ModifyDocsResponse, error)
}

func RegisterDocServiceServer(s *grpc.Server, srv DocServiceServer) {
	s.RegisterService(&_DocService_serviceDesc, srv)
}

func _DocService_GetDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).GetDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.DocService/GetDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).GetDoc(ctx, req.(*GetDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_CreateDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).CreateDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.DocService/CreateDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).CreateDoc(ctx, req.(*CreateDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_UpdateDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).UpdateDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.DocService/UpdateDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).UpdateDoc(ctx, req.(*UpdateDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_DeleteDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).DeleteDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.DocService/DeleteDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).DeleteDoc(ctx, req.(*DeleteDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_SearchDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).SearchDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.DocService/SearchDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).SearchDocs(ctx, req.(*SearchDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_UpsertDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).UpsertDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.DocService/UpsertDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).UpsertDoc(ctx, req.(*UpsertDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_GetDocsBySqlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocsBySqlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).GetDocsBySqlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.DocService/GetDocsBySqlQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).GetDocsBySqlQuery(ctx, req.(*GetDocsBySqlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_UpdateDocsByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocsByQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).UpdateDocsByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.DocService/UpdateDocsByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).UpdateDocsByQuery(ctx, req.(*UpdateDocsByQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_DeleteDocsByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocsByQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).DeleteDocsByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.DocService/DeleteDocsByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).DeleteDocsByQuery(ctx, req.(*DeleteDocsByQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_ModifyDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).ModifyDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.DocService/ModifyDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).ModifyDocs(ctx, req.(*ModifyDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DocService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.mindtickle.storage.pb.tickleDb.DocService",
	HandlerType: (*DocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDoc",
			Handler:    _DocService_GetDoc_Handler,
		},
		{
			MethodName: "CreateDoc",
			Handler:    _DocService_CreateDoc_Handler,
		},
		{
			MethodName: "UpdateDoc",
			Handler:    _DocService_UpdateDoc_Handler,
		},
		{
			MethodName: "DeleteDoc",
			Handler:    _DocService_DeleteDoc_Handler,
		},
		{
			MethodName: "SearchDocs",
			Handler:    _DocService_SearchDocs_Handler,
		},
		{
			MethodName: "UpsertDoc",
			Handler:    _DocService_UpsertDoc_Handler,
		},
		{
			MethodName: "GetDocsBySqlQuery",
			Handler:    _DocService_GetDocsBySqlQuery_Handler,
		},
		{
			MethodName: "UpdateDocsByQuery",
			Handler:    _DocService_UpdateDocsByQuery_Handler,
		},
		{
			MethodName: "DeleteDocsByQuery",
			Handler:    _DocService_DeleteDocsByQuery_Handler,
		},
		{
			MethodName: "ModifyDocs",
			Handler:    _DocService_ModifyDocs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "document.proto",
}

func init() { proto.RegisterFile("document.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1982 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcd, 0x73, 0x1b, 0x49,
	0x15, 0xf7, 0x68, 0x2c, 0xc9, 0xf3, 0x64, 0x3b, 0x52, 0x3b, 0x59, 0x14, 0xb1, 0xd4, 0x9a, 0x09,
	0x29, 0xcc, 0xc2, 0x8e, 0xc1, 0x6b, 0x9b, 0xfd, 0x08, 0xb5, 0x25, 0x4b, 0x72, 0xac, 0x5a, 0xdb,
	0x72, 0x5a, 0xca, 0xd6, 0xc2, 0x65, 0x18, 0xcd, 0xb4, 0xed, 0x21, 0x23, 0xb5, 0x32, 0x33, 0x4a,
	0x50, 0x28, 0xce, 0x9c, 0x28, 0xaa, 0xf6, 0xc6, 0x81, 0xa2, 0xb8, 0x00, 0x47, 0xaa, 0xb8, 0x71,
	0xe5, 0x0a, 0x57, 0xfe, 0x0b, 0xf8, 0x1b, 0xa8, 0xfe, 0x98, 0xd1, 0xe8, 0xab, 0x76, 0x94, 0x6c,
	0xa5, 0xbc, 0x39, 0xa9, 0x3f, 0xde, 0xfb, 0xbd, 0xd7, 0xaf, 0x5f, 0xbf, 0xf7, 0xba, 0x47, 0xb0,
	0xe9, 0x50, 0x7b, 0xd8, 0x23, 0xfd, 0xd0, 0x18, 0xf8, 0x34, 0xa4, 0x48, 0xb7, 0x69, 0xcf, 0xe8,
	0xb9, 0x7d, 0x27, 0x74, 0xed, 0x27, 0x1e, 0x31, 0x82, 0x90, 0xfa, 0xd6, 0x15, 0x31, 0x06, 0x5d,
	0x43, 0x8c, 0xd4, 0xbb, 0x95, 0xb7, 0x6d, 0xda, 0xeb, 0xd1, 0xfe, 0xae, 0xf8, 0x31, 0x7b, 0x24,
	0x08, 0xac, 0x2b, 0x12, 0x08, 0x84, 0xca, 0x3b, 0x57, 0x94, 0x5e, 0x79, 0x64, 0x97, 0xf7, 0xba,
	0xc3, 0xcb, 0xdd, 0xd0, 0xed, 0x91, 0x20, 0xb4, 0x7a, 0x03, 0x41, 0xa0, 0xff, 0x5b, 0x81, 0x62,
	0xcd, 0x27, 0x56, 0x48, 0xea, 0xd4, 0xc6, 0xe4, 0xe9, 0x90, 0x04, 0x21, 0xfa, 0x29, 0xdc, 0xf2,
	0x45, 0xd3, 0xb4, 0x69, 0x3f, 0x24, 0xbf, 0x0c, 0xcb, 0xca, 0xb6, 0xb2, 0x53, 0xd8, 0xfb, 0xa1,
	0xb1, 0x58, 0x23, 0xa1, 0x80, 0x21, 0x31, 0x6a, 0x82, 0x0f, 0x6f, 0xfa, 0x13, 0x7d, 0x74, 0x0f,
	0x36, 0x6c, 0xea, 0x79, 0xc4, 0x0e, 0x5d, 0xda, 0x37, 0x5d, 0xa7, 0x9c, 0xd9, 0x56, 0x76, 0x34,
	0xbc, 0x3e, 0x1e, 0x6c, 0x3a, 0xe8, 0x43, 0x50, 0x1d, 0x6a, 0x97, 0x55, 0x2e, 0xf3, 0xbb, 0xc6,
	0x97, 0x5b, 0xc1, 0x60, 0xca, 0x33, 0x1e, 0xbe, 0x9e, 0xc7, 0x03, 0xe7, 0x8d, 0x59, 0xcf, 0xdf,
	0x14, 0x28, 0x3f, 0x24, 0x61, 0x9d, 0xda, 0xc1, 0xd1, 0xa8, 0xfd, 0xd4, 0x7b, 0x34, 0x24, 0xfe,
	0xe8, 0xa6, 0xac, 0xeb, 0x36, 0x64, 0x9f, 0x32, 0x7d, 0xf8, 0xca, 0x34, 0x2c, 0x3a, 0xfa, 0xff,
	0x54, 0x28, 0xc7, 0x5b, 0x10, 0x1c, 0x8d, 0x6e, 0x94, 0xca, 0x3f, 0x87, 0xdc, 0xa5, 0x4b, 0x3c,
	0x27, 0x28, 0xab, 0xdb, 0xea, 0x4e, 0x61, 0xef, 0x24, 0xcd, 0x6e, 0x2c, 0x5a, 0x8d, 0x71, 0xcc,
	0xa1, 0x1a, 0xfd, 0xd0, 0x1f, 0x61, 0x89, 0x8b, 0x3e, 0x89, 0x8c, 0xb2, 0xca, 0xd7, 0xf5, 0xbd,
	0x34, 0x02, 0x04, 0xa8, 0xe0, 0x43, 0x4d, 0xd0, 0xac, 0x61, 0x78, 0x6d, 0xf6, 0x48, 0x68, 0x95,
	0xb3, 0x1c, 0xe4, 0x07, 0x69, 0x40, 0xaa, 0xc3, 0xf0, 0xfa, 0x8c, 0x84, 0x16, 0x5e, 0xb3, 0x64,
	0xab, 0xe2, 0x40, 0x21, 0xa1, 0x22, 0x2a, 0x82, 0xfa, 0x84, 0x8c, 0xb8, 0xc1, 0x35, 0xcc, 0x9a,
	0x4c, 0xd9, 0x67, 0x96, 0x37, 0x24, 0xdc, 0x56, 0x29, 0x95, 0xfd, 0x8c, 0x31, 0x60, 0xc1, 0xf7,
	0x51, 0xe6, 0x03, 0x45, 0xff, 0x5d, 0x16, 0xb2, 0x7c, 0x10, 0xdd, 0x87, 0x8d, 0x2e, 0xa5, 0x1e,
	0xb1, 0xfa, 0xa6, 0x80, 0x65, 0xa2, 0xd6, 0x4e, 0x56, 0xf0, 0xba, 0x1c, 0x16, 0x64, 0xdf, 0x86,
	0x82, 0xdb, 0x0f, 0xdf, 0xdf, 0x33, 0xc7, 0xb2, 0xb3, 0x27, 0x2b, 0x18, 0xf8, 0x60, 0x92, 0xe4,
	0x70, 0x5f, 0x92, 0x30, 0x07, 0x53, 0x25, 0xc9, 0xe1, 0xbe, 0x20, 0xb9, 0x07, 0xeb, 0x0e, 0x1d,
	0x76, 0x3d, 0x22, 0x69, 0x98, 0xbd, 0x95, 0x93, 0x15, 0x5c, 0x10, 0xa3, 0x31, 0x51, 0x10, 0xfa,
	0x6e, 0xff, 0x4a, 0x12, 0x31, 0x7b, 0x6a, 0x8c, 0x48, 0x8c, 0x0a, 0xa2, 0x4e, 0x4c, 0x64, 0xf9,
	0xbe, 0x35, 0x2a, 0xe7, 0xb8, 0x31, 0x76, 0xd3, 0x18, 0xa3, 0xcd, 0xf9, 0xaa, 0x8c, 0x6d, 0x8c,
	0xca, 0xbb, 0xe8, 0x1c, 0x80, 0xad, 0x5a, 0x62, 0xe6, 0x39, 0xe6, 0x7b, 0x69, 0x30, 0x8f, 0x28,
	0xf5, 0x22, 0x44, 0xad, 0x1b, 0x75, 0xd0, 0xa3, 0xc8, 0x6a, 0x02, 0x70, 0x8d, 0x03, 0x1a, 0x69,
	0x00, 0x9b, 0x8c, 0x2d, 0x42, 0x14, 0x56, 0x4e, 0x42, 0x1e, 0xee, 0x4b, 0x48, 0x6d, 0x29, 0xc8,
	0xc3, 0xfd, 0x24, 0xa4, 0xec, 0x31, 0x5b, 0xca, 0x5d, 0x11, 0x98, 0x90, 0xde, 0x96, 0x75, 0xce,
	0x17, 0xdb, 0xd2, 0x19, 0x77, 0xd1, 0x3b, 0x00, 0xdd, 0x51, 0x18, 0xed, 0x74, 0x61, 0x5b, 0xd9,
	0x59, 0xe7, 0xc6, 0x19, 0x85, 0x62, 0x9f, 0x8f, 0xd6, 0x01, 0xf8, 0x9c, 0x19, 0x8e, 0x06, 0x44,
	0xbf, 0x0f, 0x85, 0xc4, 0xc6, 0xa0, 0xb7, 0x20, 0xc7, 0x27, 0x83, 0xb2, 0xb2, 0xad, 0xee, 0x68,
	0x58, 0xf6, 0xf4, 0x7b, 0xa0, 0xc5, 0xb6, 0x9e, 0x22, 0x5a, 0x8b, 0x89, 0xee, 0x43, 0x21, 0xa1,
	0xd8, 0x14, 0x99, 0x12, 0x93, 0x7d, 0x07, 0x60, 0x6c, 0x93, 0x29, 0x2a, 0x75, 0x8a, 0x2a, 0x32,
	0xff, 0x24, 0x55, 0x36, 0xa6, 0x12, 0x49, 0x2c, 0x20, 0x7e, 0xf8, 0x66, 0x24, 0xb1, 0x3f, 0x2a,
	0xb0, 0x21, 0x92, 0xd8, 0x4d, 0x59, 0xcc, 0x26, 0x64, 0x5c, 0x47, 0xa6, 0xad, 0x8c, 0xeb, 0xe8,
	0xff, 0xcc, 0x40, 0xa9, 0x4d, 0x2c, 0xdf, 0xbe, 0x66, 0x51, 0xfe, 0xa6, 0x68, 0xf9, 0x49, 0x32,
	0xbf, 0xbe, 0x4c, 0x2a, 0x41, 0xb0, 0x1a, 0x3c, 0x71, 0x07, 0x3c, 0x34, 0xaa, 0x98, 0xb7, 0x59,
	0xd2, 0xf6, 0xdc, 0x9e, 0x1b, 0xf2, 0x50, 0xa8, 0x62, 0xd1, 0x41, 0x35, 0xc8, 0x07, 0xd4, 0x0f,
	0xcd, 0x6e, 0x14, 0xfd, 0xde, 0x4d, 0x15, 0xfd, 0xa8, 0x1f, 0x1e, 0x8d, 0x70, 0x2e, 0xe0, 0xbf,
	0xfa, 0xe7, 0x90, 0x13, 0x23, 0xe8, 0x1c, 0x0a, 0x1c, 0x4e, 0xe6, 0x5a, 0x85, 0xe7, 0xda, 0xf7,
	0xd2, 0x42, 0xf2, 0x9c, 0x85, 0x21, 0x88, 0x9a, 0x81, 0xfe, 0x77, 0x05, 0xb4, 0x78, 0x06, 0x7d,
	0x06, 0x7c, 0xce, 0xa4, 0xbe, 0x43, 0x7c, 0xbe, 0x25, 0x9b, 0x7b, 0x3f, 0x5e, 0x0a, 0x9c, 0xb7,
	0x5a, 0x8c, 0x1d, 0x6b, 0x41, 0xd4, 0x64, 0xa6, 0xe1, 0x0a, 0xcb, 0xcd, 0x10, 0x1d, 0xfd, 0x03,
	0x21, 0x5a, 0x90, 0x94, 0xe1, 0x76, 0xbb, 0x85, 0x3b, 0x66, 0x0b, 0xd7, 0x1b, 0xd8, 0x7c, 0x7c,
	0x5e, 0x6f, 0x1c, 0x37, 0xcf, 0x1b, 0xf5, 0xe2, 0x0a, 0x5a, 0x83, 0xd5, 0x7a, 0xa3, 0x5d, 0x2b,
	0x2a, 0x28, 0x0f, 0x6a, 0xb5, 0x5d, 0x2b, 0x66, 0xf4, 0xff, 0x2a, 0x50, 0xac, 0x13, 0x8f, 0xdc,
	0xa8, 0x62, 0x74, 0xca, 0xf5, 0x27, 0xcb, 0x8d, 0xd5, 0x57, 0x29, 0x37, 0xf4, 0x3f, 0x67, 0xa0,
	0x1c, 0xaf, 0xf7, 0xa6, 0x55, 0x7e, 0xaf, 0x7c, 0x98, 0xbe, 0x42, 0x43, 0x05, 0x50, 0x8a, 0x2f,
	0x5d, 0x71, 0xb4, 0x59, 0x2e, 0x0a, 0xab, 0x4b, 0x47, 0xe1, 0x00, 0x4a, 0xe3, 0x42, 0xf6, 0x75,
	0x09, 0xfd, 0xad, 0x02, 0xa5, 0xb1, 0x4b, 0x2c, 0x25, 0xb5, 0x0d, 0x1b, 0x0e, 0xb5, 0xcd, 0xb1,
	0xcd, 0x85, 0xfc, 0x94, 0xa5, 0x84, 0x1d, 0x9b, 0xbd, 0xe0, 0x8c, 0x3b, 0xfa, 0x35, 0xcb, 0xe6,
	0x71, 0x57, 0x1e, 0x06, 0x65, 0xfe, 0x61, 0xc8, 0xbc, 0xea, 0x1e, 0xc7, 0x39, 0xfc, 0xb5, 0x99,
	0xfb, 0x37, 0x59, 0x28, 0x9d, 0x51, 0xc7, 0xbd, 0x1c, 0xbd, 0xa6, 0x3c, 0x46, 0x60, 0xcb, 0xe6,
	0x9e, 0x6c, 0x3a, 0xd4, 0x0e, 0x4c, 0x39, 0x5b, 0xce, 0x70, 0xdd, 0x0f, 0xd2, 0xe8, 0x3e, 0x73,
	0x10, 0x70, 0xc9, 0x9e, 0x39, 0x1b, 0x04, 0xb6, 0x86, 0xdc, 0x77, 0x27, 0xc5, 0xa8, 0xe9, 0xc5,
	0xcc, 0xb8, 0x3e, 0x2e, 0x0d, 0x67, 0x4e, 0x03, 0x81, 0x2d, 0x87, 0x3b, 0xeb, 0xa4, 0x98, 0xd5,
	0xf4, 0x62, 0x66, 0x7c, 0x1d, 0x97, 0x9c, 0x19, 0xf7, 0xe7, 0xab, 0x61, 0xae, 0x31, 0x29, 0x26,
	0xbb, 0xcc, 0x6a, 0xa6, 0x3c, 0x8b, 0xad, 0x66, 0xda, 0xd9, 0x7e, 0x05, 0xdf, 0x1c, 0x58, 0x7e,
	0xe8, 0x5a, 0x9e, 0x39, 0xcf, 0x78, 0x39, 0x2e, 0xee, 0x41, 0x1a, 0x71, 0x17, 0x02, 0x66, 0xd6,
	0x86, 0xe5, 0xc1, 0x82, 0x19, 0xfd, 0x0b, 0x05, 0xca, 0x8b, 0xd8, 0x66, 0x8f, 0x81, 0x32, 0xe7,
	0x18, 0x3c, 0x82, 0xf5, 0x48, 0x7d, 0xa6, 0xb7, 0xf4, 0x29, 0x63, 0x09, 0x7d, 0xd9, 0xb1, 0x28,
	0x0c, 0xe2, 0x76, 0xa0, 0xff, 0x35, 0x03, 0x30, 0x9e, 0x43, 0x77, 0x20, 0xc7, 0x22, 0x4c, 0x2c,
	0x3f, 0xeb, 0x50, 0xbb, 0xe9, 0x20, 0x1c, 0xbf, 0x11, 0x08, 0x91, 0x1f, 0x2d, 0x27, 0x72, 0xee,
	0xab, 0xc0, 0x44, 0x60, 0x51, 0xbf, 0x06, 0x97, 0xfa, 0xad, 0x44, 0x8a, 0xc2, 0x24, 0x18, 0xd0,
	0x7e, 0x40, 0xd8, 0x60, 0xe2, 0x71, 0x4d, 0x0e, 0x7e, 0x0e, 0x77, 0xe7, 0xbc, 0x50, 0x89, 0x49,
	0xf4, 0x31, 0xac, 0xfa, 0xf4, 0x79, 0x54, 0x01, 0xa6, 0x0a, 0x66, 0x98, 0x3e, 0xc7, 0x9c, 0x49,
	0xff, 0x14, 0xee, 0xce, 0x79, 0x7a, 0x91, 0xc8, 0x06, 0x6c, 0x59, 0x97, 0x97, 0xc4, 0x0e, 0x89,
	0x23, 0xfc, 0xda, 0xa6, 0xc3, 0xbe, 0x08, 0x6c, 0x2a, 0x2e, 0x45, 0x53, 0x8c, 0xb3, 0xc6, 0x26,
	0x84, 0xee, 0xf1, 0x9d, 0x4a, 0xea, 0x3e, 0x00, 0x94, 0x2c, 0xfb, 0xc7, 0x4a, 0x73, 0x8f, 0x53,
	0x96, 0x8b, 0xc0, 0x9c, 0x09, 0x7d, 0x0b, 0x20, 0xa4, 0xa1, 0xe5, 0x99, 0x81, 0xfb, 0x82, 0xc8,
	0xca, 0x5b, 0xe3, 0x23, 0x6d, 0xf7, 0x05, 0x37, 0x61, 0xa2, 0x24, 0x94, 0x6a, 0x7c, 0x0a, 0x77,
	0xe7, 0xd4, 0x4d, 0x2f, 0xb9, 0xd0, 0xdb, 0x80, 0x92, 0x29, 0x40, 0x8a, 0xf8, 0x4f, 0x06, 0xb2,
	0x1c, 0x17, 0xd5, 0x21, 0x7f, 0xe9, 0x7a, 0x21, 0xf1, 0xa3, 0x05, 0xa6, 0x2a, 0xf5, 0x8f, 0x39,
	0x0b, 0x8e, 0x58, 0xd9, 0x85, 0x81, 0x95, 0x45, 0x2e, 0x89, 0x4e, 0xc9, 0x12, 0x05, 0x55, 0xc4,
	0x89, 0x1c, 0x28, 0x7a, 0xf4, 0xca, 0xb5, 0x2d, 0xcf, 0xa4, 0x03, 0xe2, 0x5b, 0x21, 0xf5, 0xf9,
	0xe1, 0xd8, 0xdc, 0xfb, 0x30, 0x35, 0x9a, 0x71, 0x2a, 0x10, 0x5a, 0x12, 0x00, 0xdf, 0xf2, 0x26,
	0x07, 0xd8, 0x35, 0xbb, 0x4f, 0xae, 0xac, 0x50, 0xec, 0xc6, 0x1a, 0x96, 0x3d, 0xbd, 0x0e, 0xb7,
	0xa6, 0x78, 0xd1, 0x36, 0xbc, 0x7d, 0xda, 0x7a, 0xd8, 0xac, 0x55, 0x4f, 0xcd, 0xd6, 0x45, 0x03,
	0x57, 0x3b, 0x2d, 0x56, 0xe4, 0xb7, 0x2f, 0x1a, 0xb5, 0xe6, 0x71, 0x93, 0x97, 0xf9, 0xac, 0xb8,
	0x3f, 0xaf, 0x17, 0x15, 0x94, 0x83, 0x4c, 0x0b, 0x17, 0x33, 0xfa, 0xbf, 0x32, 0x90, 0x13, 0xc6,
	0x41, 0x18, 0xb4, 0x81, 0x4f, 0x1c, 0xd7, 0x66, 0xb2, 0xc4, 0xb5, 0x64, 0x3f, 0xbd, 0x6d, 0x8d,
	0x8b, 0x88, 0x17, 0x8f, 0x61, 0xe6, 0xdf, 0x49, 0x12, 0x2f, 0x07, 0x6a, 0xf2, 0x45, 0x63, 0xe1,
	0x52, 0xff, 0xa2, 0x80, 0x16, 0xc3, 0xa3, 0xbb, 0x70, 0xe7, 0x02, 0x37, 0xea, 0xcd, 0x5a, 0xb5,
	0xd3, 0x98, 0x5a, 0x9e, 0x06, 0xd9, 0xc6, 0xa3, 0xc7, 0xd5, 0xd3, 0xa2, 0x82, 0x36, 0x40, 0x3b,
	0x6f, 0x75, 0x4c, 0xd1, 0xcd, 0xa0, 0x02, 0xe4, 0x1f, 0xe2, 0x46, 0xb5, 0xd3, 0xc0, 0x45, 0x15,
	0x01, 0xe4, 0x4e, 0x1b, 0xed, 0x76, 0x03, 0x17, 0x57, 0x99, 0x21, 0x9a, 0xe7, 0xc5, 0x2c, 0x1b,
	0x63, 0xf4, 0xcd, 0xf3, 0x62, 0x8e, 0xc1, 0x9c, 0x55, 0x3b, 0xb5, 0x93, 0x62, 0x1e, 0xbd, 0x05,
	0x48, 0xf2, 0x99, 0x9d, 0x93, 0xea, 0xb9, 0xc4, 0x5b, 0x43, 0x77, 0xa0, 0x24, 0x20, 0x92, 0xc3,
	0x9a, 0xfe, 0x0f, 0x05, 0x54, 0x16, 0x9b, 0xa7, 0x2b, 0xb3, 0xa2, 0x28, 0x8a, 0x84, 0x15, 0x58,
	0x13, 0x1d, 0xc3, 0x1a, 0x8b, 0xde, 0x89, 0x88, 0xfa, 0xfd, 0x94, 0x27, 0x95, 0x07, 0xd4, 0xbc,
	0x23, 0x1a, 0x5f, 0x65, 0x5d, 0xff, 0x07, 0x05, 0xf2, 0x12, 0x1f, 0x7d, 0x0c, 0x05, 0x59, 0x19,
	0x85, 0x6e, 0x8f, 0xc8, 0x82, 0xab, 0x62, 0x88, 0x0f, 0x32, 0x46, 0xf4, 0x41, 0xc6, 0xe8, 0x44,
	0x1f, 0x64, 0x30, 0x08, 0x72, 0x36, 0xc0, 0x98, 0x65, 0xca, 0xe6, 0xcc, 0x99, 0x2f, 0x67, 0x16,
	0xe4, 0x9c, 0xb9, 0x0c, 0xf9, 0x67, 0xc4, 0x0f, 0x5c, 0xda, 0x17, 0xef, 0xa6, 0x38, 0xea, 0xea,
	0x2d, 0x58, 0x8b, 0x4b, 0xdf, 0x77, 0xa1, 0x74, 0xe5, 0xd1, 0xae, 0xe5, 0x45, 0x35, 0xe1, 0x38,
	0x0f, 0xde, 0x12, 0x13, 0xb2, 0xc6, 0x6b, 0x3a, 0xe8, 0x1b, 0x90, 0xe7, 0x26, 0x8a, 0x0b, 0xd6,
	0x1c, 0xeb, 0x36, 0x1d, 0xfd, 0xf7, 0x0a, 0xa8, 0x98, 0x3e, 0x47, 0x1d, 0xd0, 0x6c, 0xea, 0x0d,
	0x7b, 0xfd, 0x33, 0x6b, 0x20, 0xa3, 0xca, 0x61, 0xca, 0x58, 0x6f, 0xd4, 0x22, 0x46, 0x91, 0x31,
	0xc7, 0x40, 0x95, 0x07, 0xb0, 0x39, 0x39, 0x39, 0x27, 0xd9, 0xdd, 0x4e, 0x26, 0x3b, 0x2d, 0x91,
	0xc1, 0xf6, 0xfe, 0x04, 0x00, 0x75, 0x6a, 0xb7, 0x89, 0xff, 0xcc, 0xb5, 0x09, 0xba, 0x84, 0x9c,
	0x48, 0x53, 0xe8, 0x47, 0x69, 0x34, 0x9b, 0x78, 0xaf, 0xaa, 0xa4, 0xcd, 0x01, 0xfa, 0x0a, 0x7a,
	0x01, 0x5a, 0x9c, 0x38, 0xd1, 0xfe, 0x52, 0x15, 0x70, 0x24, 0xed, 0x60, 0x49, 0x2e, 0x19, 0xe2,
	0xb9, 0xec, 0x38, 0x61, 0xa6, 0x93, 0x3d, 0xfd, 0xad, 0xac, 0x72, 0xb0, 0x24, 0x57, 0x52, 0x76,
	0x9c, 0xc3, 0xd2, 0xc9, 0x9e, 0x7e, 0x1a, 0xa9, 0x1c, 0x2c, 0xc9, 0x15, 0xcb, 0xfe, 0x35, 0xc0,
	0x38, 0x8d, 0xa3, 0x54, 0x30, 0x33, 0xaf, 0x7d, 0x95, 0xc3, 0x65, 0xd9, 0x26, 0xcd, 0x2e, 0x4b,
	0x8b, 0xb4, 0x66, 0x9f, 0x7c, 0xdd, 0xad, 0x1c, 0x2c, 0xc9, 0x15, 0xcb, 0xfe, 0x42, 0x81, 0xd2,
	0x4c, 0xf9, 0x85, 0x1e, 0xa4, 0x77, 0xf1, 0xd9, 0xef, 0x8a, 0x95, 0x9f, 0xbc, 0x24, 0xf7, 0x84,
	0x52, 0x33, 0x95, 0x5b, 0x3a, 0xa5, 0x16, 0x7d, 0x6b, 0x4b, 0xa7, 0xd4, 0xc2, 0x72, 0x51, 0x2a,
	0x35, 0x53, 0x65, 0xa5, 0x53, 0x6a, 0xd1, 0xa3, 0x56, 0x3a, 0xa5, 0x16, 0x96, 0x76, 0xc2, 0x73,
	0xc7, 0xc5, 0x5a, 0x3a, 0xcf, 0x9d, 0xb9, 0xdf, 0xa7, 0xf3, 0xdc, 0x39, 0x35, 0xe1, 0xca, 0xd1,
	0x2f, 0x60, 0x67, 0x3e, 0x2b, 0x4f, 0x31, 0x41, 0x12, 0xe0, 0x68, 0xa3, 0x2e, 0xff, 0x9d, 0x70,
	0xc1, 0xe6, 0x7e, 0xb6, 0x7b, 0xe5, 0x86, 0xd7, 0x43, 0xfe, 0x4e, 0xb0, 0x7b, 0xe6, 0xf6, 0x9d,
	0x0e, 0xa7, 0xdb, 0x9d, 0xe0, 0xdf, 0x1d, 0x74, 0x77, 0x23, 0xfe, 0x6e, 0x8e, 0x8f, 0xbd, 0xff,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x31, 0xca, 0xbb, 0xe6, 0x20, 0x00, 0x00,
}
