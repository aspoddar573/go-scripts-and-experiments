// Code generated by protoc-gen-go. DO NOT EDIT.
// source: store_manager.proto

package tickleDb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Role int32

const (
	Role_ROLE_UNSPECIFIED Role = 0
	Role_NONE             Role = 1
	Role_PRIMARY          Role = 2
	Role_SECONDARY        Role = 3
)

var Role_name = map[int32]string{
	0: "ROLE_UNSPECIFIED",
	1: "NONE",
	2: "PRIMARY",
	3: "SECONDARY",
}
var Role_value = map[string]int32{
	"ROLE_UNSPECIFIED": 0,
	"NONE":             1,
	"PRIMARY":          2,
	"SECONDARY":        3,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type State int32

const (
	State_STATE_UNSPECIFIED State = 0
	State_OTHER             State = 1
	State_ONLINE            State = 2
	State_OFFLINE           State = 3
)

var State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "OTHER",
	2: "ONLINE",
	3: "OFFLINE",
}
var State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"OTHER":             1,
	"ONLINE":            2,
	"OFFLINE":           3,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type SchemaType int32

const (
	SchemaType_SCHEMA_TYPE_UNSPECIFIED SchemaType = 0
	SchemaType_FLEXIBLE                SchemaType = 1
	SchemaType_STRICT                  SchemaType = 2
)

var SchemaType_name = map[int32]string{
	0: "SCHEMA_TYPE_UNSPECIFIED",
	1: "FLEXIBLE",
	2: "STRICT",
}
var SchemaType_value = map[string]int32{
	"SCHEMA_TYPE_UNSPECIFIED": 0,
	"FLEXIBLE":                1,
	"STRICT":                  2,
}

func (x SchemaType) String() string {
	return proto.EnumName(SchemaType_name, int32(x))
}
func (SchemaType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type PartitionStrategy int32

const (
	PartitionStrategy_PARTITION_STRATEGY_UNSPECIFIED PartitionStrategy = 0
	PartitionStrategy_HASH_BASED                     PartitionStrategy = 1
	PartitionStrategy_RANGE_BASED                    PartitionStrategy = 2
)

var PartitionStrategy_name = map[int32]string{
	0: "PARTITION_STRATEGY_UNSPECIFIED",
	1: "HASH_BASED",
	2: "RANGE_BASED",
}
var PartitionStrategy_value = map[string]int32{
	"PARTITION_STRATEGY_UNSPECIFIED": 0,
	"HASH_BASED":                     1,
	"RANGE_BASED":                    2,
}

func (x PartitionStrategy) String() string {
	return proto.EnumName(PartitionStrategy_name, int32(x))
}
func (PartitionStrategy) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0
	Status_UNKNOWN            Status = 1
	Status_WAITING            Status = 2
	Status_RUNNING            Status = 3
	Status_COMPLETED          Status = 4
	Status_FAILED             Status = 5
)

var Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "UNKNOWN",
	2: "WAITING",
	3: "RUNNING",
	4: "COMPLETED",
	5: "FAILED",
}
var Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"UNKNOWN":            1,
	"WAITING":            2,
	"RUNNING":            3,
	"COMPLETED":          4,
	"FAILED":             5,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type DeleteTableRequest_TenantIdAll int32

const (
	DeleteTableRequest_ALL DeleteTableRequest_TenantIdAll = 0
)

var DeleteTableRequest_TenantIdAll_name = map[int32]string{
	0: "ALL",
}
var DeleteTableRequest_TenantIdAll_value = map[string]int32{
	"ALL": 0,
}

func (x DeleteTableRequest_TenantIdAll) String() string {
	return proto.EnumName(DeleteTableRequest_TenantIdAll_name, int32(x))
}
func (DeleteTableRequest_TenantIdAll) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{19, 0}
}

// *
// These are the available data types for the fields in a document
type Field_DataType int32

const (
	Field_DATA_TYPE_UNSPECIFIED Field_DataType = 0
	Field_STRING                Field_DataType = 1
	Field_INT                   Field_DataType = 2
	Field_INT64                 Field_DataType = 3
	Field_BOOL                  Field_DataType = 4
	Field_ENUMERATION           Field_DataType = 5
	Field_JSON                  Field_DataType = 6
	Field_DOUBLE                Field_DataType = 7
)

var Field_DataType_name = map[int32]string{
	0: "DATA_TYPE_UNSPECIFIED",
	1: "STRING",
	2: "INT",
	3: "INT64",
	4: "BOOL",
	5: "ENUMERATION",
	6: "JSON",
	7: "DOUBLE",
}
var Field_DataType_value = map[string]int32{
	"DATA_TYPE_UNSPECIFIED": 0,
	"STRING":                1,
	"INT":                   2,
	"INT64":                 3,
	"BOOL":                  4,
	"ENUMERATION":           5,
	"JSON":                  6,
	"DOUBLE":                7,
}

func (x Field_DataType) String() string {
	return proto.EnumName(Field_DataType_name, int32(x))
}
func (Field_DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{31, 0} }

// *
// Configure when to delete relationship documents , given a document from collection is deleted .
type RelationshipCollection_DeleteOn int32

const (
	RelationshipCollection_DELETE_ON_UNSPECIFIED RelationshipCollection_DeleteOn = 0
	RelationshipCollection_SRC                   RelationshipCollection_DeleteOn = 2
	RelationshipCollection_DEST                  RelationshipCollection_DeleteOn = 3
	RelationshipCollection_ANY                   RelationshipCollection_DeleteOn = 4
	RelationshipCollection_NONE                  RelationshipCollection_DeleteOn = 5
)

var RelationshipCollection_DeleteOn_name = map[int32]string{
	0: "DELETE_ON_UNSPECIFIED",
	2: "SRC",
	3: "DEST",
	4: "ANY",
	5: "NONE",
}
var RelationshipCollection_DeleteOn_value = map[string]int32{
	"DELETE_ON_UNSPECIFIED": 0,
	"SRC":  2,
	"DEST": 3,
	"ANY":  4,
	"NONE": 5,
}

func (x RelationshipCollection_DeleteOn) String() string {
	return proto.EnumName(RelationshipCollection_DeleteOn_name, int32(x))
}
func (RelationshipCollection_DeleteOn) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{33, 0}
}

type GetClusterTopologiesRequest struct {
	Namespace   string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	TenantId    string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	Env         string `protobuf:"bytes,4,opt,name=env" json:"env,omitempty"`
}

func (m *GetClusterTopologiesRequest) Reset()                    { *m = GetClusterTopologiesRequest{} }
func (m *GetClusterTopologiesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClusterTopologiesRequest) ProtoMessage()               {}
func (*GetClusterTopologiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *GetClusterTopologiesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetClusterTopologiesRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *GetClusterTopologiesRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *GetClusterTopologiesRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

type GetClusterTopologiesResponse struct {
	Cluster []*Cluster `protobuf:"bytes,1,rep,name=cluster" json:"cluster,omitempty"`
}

func (m *GetClusterTopologiesResponse) Reset()                    { *m = GetClusterTopologiesResponse{} }
func (m *GetClusterTopologiesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetClusterTopologiesResponse) ProtoMessage()               {}
func (*GetClusterTopologiesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetClusterTopologiesResponse) GetCluster() []*Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type Cluster struct {
	Name       string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Node       []*Node           `protobuf:"bytes,2,rep,name=node" json:"node,omitempty"`
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetNode() []*Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Cluster) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type GetUpdateTableStatusRequest struct {
	UpdateTableTaskId string `protobuf:"bytes,1,opt,name=update_table_task_id,json=updateTableTaskId" json:"update_table_task_id,omitempty"`
}

func (m *GetUpdateTableStatusRequest) Reset()                    { *m = GetUpdateTableStatusRequest{} }
func (m *GetUpdateTableStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUpdateTableStatusRequest) ProtoMessage()               {}
func (*GetUpdateTableStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetUpdateTableStatusRequest) GetUpdateTableTaskId() string {
	if m != nil {
		return m.UpdateTableTaskId
	}
	return ""
}

type GetUpdateTableStatusResponse struct {
	Status  string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *GetUpdateTableStatusResponse) Reset()                    { *m = GetUpdateTableStatusResponse{} }
func (m *GetUpdateTableStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUpdateTableStatusResponse) ProtoMessage()               {}
func (*GetUpdateTableStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetUpdateTableStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetUpdateTableStatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SetTTLRequest struct {
	Env       string     `protobuf:"bytes,1,opt,name=env" json:"env,omitempty"`
	Namespace string     `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	TableName string     `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TtlConfig *TTLConfig `protobuf:"bytes,4,opt,name=ttl_config,json=ttlConfig" json:"ttl_config,omitempty"`
}

func (m *SetTTLRequest) Reset()                    { *m = SetTTLRequest{} }
func (m *SetTTLRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTTLRequest) ProtoMessage()               {}
func (*SetTTLRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *SetTTLRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *SetTTLRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SetTTLRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *SetTTLRequest) GetTtlConfig() *TTLConfig {
	if m != nil {
		return m.TtlConfig
	}
	return nil
}

type TTLConfig struct {
	Enabled  bool   `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	TtlInSec uint64 `protobuf:"varint,2,opt,name=ttl_in_sec,json=ttlInSec" json:"ttl_in_sec,omitempty"`
}

func (m *TTLConfig) Reset()                    { *m = TTLConfig{} }
func (m *TTLConfig) String() string            { return proto.CompactTextString(m) }
func (*TTLConfig) ProtoMessage()               {}
func (*TTLConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *TTLConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *TTLConfig) GetTtlInSec() uint64 {
	if m != nil {
		return m.TtlInSec
	}
	return 0
}

type SetTTLResponse struct {
}

func (m *SetTTLResponse) Reset()                    { *m = SetTTLResponse{} }
func (m *SetTTLResponse) String() string            { return proto.CompactTextString(m) }
func (*SetTTLResponse) ProtoMessage()               {}
func (*SetTTLResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type Node struct {
	Host  string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	State State  `protobuf:"varint,2,opt,name=state,enum=com.mindtickle.storage.pb.tickleDb.State" json:"state,omitempty"`
	Role  Role   `protobuf:"varint,3,opt,name=role,enum=com.mindtickle.storage.pb.tickleDb.Role" json:"role,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *Node) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Node) GetState() State {
	if m != nil {
		return m.State
	}
	return State_STATE_UNSPECIFIED
}

func (m *Node) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_ROLE_UNSPECIFIED
}

type RegisterNamespaceOnNodeRequest struct {
	Env       string `protobuf:"bytes,1,opt,name=env" json:"env,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	NodeInfo  *Node  `protobuf:"bytes,3,opt,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
}

func (m *RegisterNamespaceOnNodeRequest) Reset()                    { *m = RegisterNamespaceOnNodeRequest{} }
func (m *RegisterNamespaceOnNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterNamespaceOnNodeRequest) ProtoMessage()               {}
func (*RegisterNamespaceOnNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *RegisterNamespaceOnNodeRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *RegisterNamespaceOnNodeRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RegisterNamespaceOnNodeRequest) GetNodeInfo() *Node {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type InitNamespaceOnTrackRequest struct {
	Env       string `protobuf:"bytes,1,opt,name=env" json:"env,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	NodeInfo  *Node  `protobuf:"bytes,3,opt,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
}

func (m *InitNamespaceOnTrackRequest) Reset()                    { *m = InitNamespaceOnTrackRequest{} }
func (m *InitNamespaceOnTrackRequest) String() string            { return proto.CompactTextString(m) }
func (*InitNamespaceOnTrackRequest) ProtoMessage()               {}
func (*InitNamespaceOnTrackRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *InitNamespaceOnTrackRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *InitNamespaceOnTrackRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *InitNamespaceOnTrackRequest) GetNodeInfo() *Node {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type RegisterNamespaceOnNodeResponse struct {
}

func (m *RegisterNamespaceOnNodeResponse) Reset()         { *m = RegisterNamespaceOnNodeResponse{} }
func (m *RegisterNamespaceOnNodeResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterNamespaceOnNodeResponse) ProtoMessage()    {}
func (*RegisterNamespaceOnNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{11}
}

type InitNamespaceOnTrackResponse struct {
}

func (m *InitNamespaceOnTrackResponse) Reset()                    { *m = InitNamespaceOnTrackResponse{} }
func (m *InitNamespaceOnTrackResponse) String() string            { return proto.CompactTextString(m) }
func (*InitNamespaceOnTrackResponse) ProtoMessage()               {}
func (*InitNamespaceOnTrackResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type DeleteNamespaceRouteRequest struct {
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId" json:"route_id,omitempty"`
}

func (m *DeleteNamespaceRouteRequest) Reset()                    { *m = DeleteNamespaceRouteRequest{} }
func (m *DeleteNamespaceRouteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNamespaceRouteRequest) ProtoMessage()               {}
func (*DeleteNamespaceRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *DeleteNamespaceRouteRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

type DeleteNamespaceRouteResponse struct {
}

func (m *DeleteNamespaceRouteResponse) Reset()                    { *m = DeleteNamespaceRouteResponse{} }
func (m *DeleteNamespaceRouteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNamespaceRouteResponse) ProtoMessage()               {}
func (*DeleteNamespaceRouteResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type ListNamespaceRoutesRequest struct {
}

func (m *ListNamespaceRoutesRequest) Reset()                    { *m = ListNamespaceRoutesRequest{} }
func (m *ListNamespaceRoutesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNamespaceRoutesRequest) ProtoMessage()               {}
func (*ListNamespaceRoutesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

type ListNamespaceRoutesResponse struct {
}

func (m *ListNamespaceRoutesResponse) Reset()                    { *m = ListNamespaceRoutesResponse{} }
func (m *ListNamespaceRoutesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNamespaceRoutesResponse) ProtoMessage()               {}
func (*ListNamespaceRoutesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

type ListNamespaceRoutesResponse_Route struct {
	RouteId   string `protobuf:"bytes,1,opt,name=route_id,json=routeId" json:"route_id,omitempty"`
	TenantId  string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	Deleted   bool   `protobuf:"varint,3,opt,name=deleted" json:"deleted,omitempty"`
	CreatedAt int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Env       string `protobuf:"bytes,6,opt,name=env" json:"env,omitempty"`
	Namespace string `protobuf:"bytes,7,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *ListNamespaceRoutesResponse_Route) Reset()         { *m = ListNamespaceRoutesResponse_Route{} }
func (m *ListNamespaceRoutesResponse_Route) String() string { return proto.CompactTextString(m) }
func (*ListNamespaceRoutesResponse_Route) ProtoMessage()    {}
func (*ListNamespaceRoutesResponse_Route) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{16, 0}
}

func (m *ListNamespaceRoutesResponse_Route) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *ListNamespaceRoutesResponse_Route) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *ListNamespaceRoutesResponse_Route) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *ListNamespaceRoutesResponse_Route) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ListNamespaceRoutesResponse_Route) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ListNamespaceRoutesResponse_Route) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *ListNamespaceRoutesResponse_Route) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type UpdateTableRequest struct {
	Env       string `protobuf:"bytes,1,opt,name=env" json:"env,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	TableName string `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	// Types that are valid to be assigned to UpdateRequest:
	//	*UpdateTableRequest_AddColumn
	//	*UpdateTableRequest_UpdateColumn
	//	*UpdateTableRequest_DropColumn
	//	*UpdateTableRequest_AddIndex
	//	*UpdateTableRequest_DropIndex
	UpdateRequest isUpdateTableRequest_UpdateRequest `protobuf_oneof:"UpdateRequest"`
}

func (m *UpdateTableRequest) Reset()                    { *m = UpdateTableRequest{} }
func (m *UpdateTableRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTableRequest) ProtoMessage()               {}
func (*UpdateTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

type isUpdateTableRequest_UpdateRequest interface {
	isUpdateTableRequest_UpdateRequest()
}

type UpdateTableRequest_AddColumn struct {
	AddColumn *AddField `protobuf:"bytes,4,opt,name=add_column,json=addColumn,oneof"`
}
type UpdateTableRequest_UpdateColumn struct {
	UpdateColumn *UpdateField `protobuf:"bytes,5,opt,name=update_column,json=updateColumn,oneof"`
}
type UpdateTableRequest_DropColumn struct {
	DropColumn *DeleteField `protobuf:"bytes,6,opt,name=drop_column,json=dropColumn,oneof"`
}
type UpdateTableRequest_AddIndex struct {
	AddIndex *AddIndex `protobuf:"bytes,7,opt,name=add_index,json=addIndex,oneof"`
}
type UpdateTableRequest_DropIndex struct {
	DropIndex *DropIndex `protobuf:"bytes,8,opt,name=drop_index,json=dropIndex,oneof"`
}

func (*UpdateTableRequest_AddColumn) isUpdateTableRequest_UpdateRequest()    {}
func (*UpdateTableRequest_UpdateColumn) isUpdateTableRequest_UpdateRequest() {}
func (*UpdateTableRequest_DropColumn) isUpdateTableRequest_UpdateRequest()   {}
func (*UpdateTableRequest_AddIndex) isUpdateTableRequest_UpdateRequest()     {}
func (*UpdateTableRequest_DropIndex) isUpdateTableRequest_UpdateRequest()    {}

func (m *UpdateTableRequest) GetUpdateRequest() isUpdateTableRequest_UpdateRequest {
	if m != nil {
		return m.UpdateRequest
	}
	return nil
}

func (m *UpdateTableRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *UpdateTableRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateTableRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *UpdateTableRequest) GetAddColumn() *AddField {
	if x, ok := m.GetUpdateRequest().(*UpdateTableRequest_AddColumn); ok {
		return x.AddColumn
	}
	return nil
}

func (m *UpdateTableRequest) GetUpdateColumn() *UpdateField {
	if x, ok := m.GetUpdateRequest().(*UpdateTableRequest_UpdateColumn); ok {
		return x.UpdateColumn
	}
	return nil
}

func (m *UpdateTableRequest) GetDropColumn() *DeleteField {
	if x, ok := m.GetUpdateRequest().(*UpdateTableRequest_DropColumn); ok {
		return x.DropColumn
	}
	return nil
}

func (m *UpdateTableRequest) GetAddIndex() *AddIndex {
	if x, ok := m.GetUpdateRequest().(*UpdateTableRequest_AddIndex); ok {
		return x.AddIndex
	}
	return nil
}

func (m *UpdateTableRequest) GetDropIndex() *DropIndex {
	if x, ok := m.GetUpdateRequest().(*UpdateTableRequest_DropIndex); ok {
		return x.DropIndex
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpdateTableRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpdateTableRequest_OneofMarshaler, _UpdateTableRequest_OneofUnmarshaler, _UpdateTableRequest_OneofSizer, []interface{}{
		(*UpdateTableRequest_AddColumn)(nil),
		(*UpdateTableRequest_UpdateColumn)(nil),
		(*UpdateTableRequest_DropColumn)(nil),
		(*UpdateTableRequest_AddIndex)(nil),
		(*UpdateTableRequest_DropIndex)(nil),
	}
}

func _UpdateTableRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpdateTableRequest)
	// UpdateRequest
	switch x := m.UpdateRequest.(type) {
	case *UpdateTableRequest_AddColumn:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddColumn); err != nil {
			return err
		}
	case *UpdateTableRequest_UpdateColumn:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateColumn); err != nil {
			return err
		}
	case *UpdateTableRequest_DropColumn:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DropColumn); err != nil {
			return err
		}
	case *UpdateTableRequest_AddIndex:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddIndex); err != nil {
			return err
		}
	case *UpdateTableRequest_DropIndex:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DropIndex); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpdateTableRequest.UpdateRequest has unexpected type %T", x)
	}
	return nil
}

func _UpdateTableRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpdateTableRequest)
	switch tag {
	case 4: // UpdateRequest.add_column
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddField)
		err := b.DecodeMessage(msg)
		m.UpdateRequest = &UpdateTableRequest_AddColumn{msg}
		return true, err
	case 5: // UpdateRequest.update_column
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateField)
		err := b.DecodeMessage(msg)
		m.UpdateRequest = &UpdateTableRequest_UpdateColumn{msg}
		return true, err
	case 6: // UpdateRequest.drop_column
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteField)
		err := b.DecodeMessage(msg)
		m.UpdateRequest = &UpdateTableRequest_DropColumn{msg}
		return true, err
	case 7: // UpdateRequest.add_index
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddIndex)
		err := b.DecodeMessage(msg)
		m.UpdateRequest = &UpdateTableRequest_AddIndex{msg}
		return true, err
	case 8: // UpdateRequest.drop_index
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DropIndex)
		err := b.DecodeMessage(msg)
		m.UpdateRequest = &UpdateTableRequest_DropIndex{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpdateTableRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpdateTableRequest)
	// UpdateRequest
	switch x := m.UpdateRequest.(type) {
	case *UpdateTableRequest_AddColumn:
		s := proto.Size(x.AddColumn)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateTableRequest_UpdateColumn:
		s := proto.Size(x.UpdateColumn)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateTableRequest_DropColumn:
		s := proto.Size(x.DropColumn)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateTableRequest_AddIndex:
		s := proto.Size(x.AddIndex)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateTableRequest_DropIndex:
		s := proto.Size(x.DropIndex)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UpdateTableResponse struct {
	UpdateTableTaskId string `protobuf:"bytes,1,opt,name=update_table_task_id,json=updateTableTaskId" json:"update_table_task_id,omitempty"`
}

func (m *UpdateTableResponse) Reset()                    { *m = UpdateTableResponse{} }
func (m *UpdateTableResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTableResponse) ProtoMessage()               {}
func (*UpdateTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *UpdateTableResponse) GetUpdateTableTaskId() string {
	if m != nil {
		return m.UpdateTableTaskId
	}
	return ""
}

type DeleteTableRequest struct {
	Env       string `protobuf:"bytes,1,opt,name=env" json:"env,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	TableName string `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	// Types that are valid to be assigned to Tenant:
	//	*DeleteTableRequest_TId
	//	*DeleteTableRequest_TAll
	Tenant isDeleteTableRequest_Tenant `protobuf_oneof:"tenant"`
}

func (m *DeleteTableRequest) Reset()                    { *m = DeleteTableRequest{} }
func (m *DeleteTableRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTableRequest) ProtoMessage()               {}
func (*DeleteTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

type isDeleteTableRequest_Tenant interface {
	isDeleteTableRequest_Tenant()
}

type DeleteTableRequest_TId struct {
	TId string `protobuf:"bytes,4,opt,name=t_id,json=tId,oneof"`
}
type DeleteTableRequest_TAll struct {
	TAll DeleteTableRequest_TenantIdAll `protobuf:"varint,5,opt,name=t_all,json=tAll,enum=com.mindtickle.storage.pb.tickleDb.DeleteTableRequest_TenantIdAll,oneof"`
}

func (*DeleteTableRequest_TId) isDeleteTableRequest_Tenant()  {}
func (*DeleteTableRequest_TAll) isDeleteTableRequest_Tenant() {}

func (m *DeleteTableRequest) GetTenant() isDeleteTableRequest_Tenant {
	if m != nil {
		return m.Tenant
	}
	return nil
}

func (m *DeleteTableRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *DeleteTableRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteTableRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *DeleteTableRequest) GetTId() string {
	if x, ok := m.GetTenant().(*DeleteTableRequest_TId); ok {
		return x.TId
	}
	return ""
}

func (m *DeleteTableRequest) GetTAll() DeleteTableRequest_TenantIdAll {
	if x, ok := m.GetTenant().(*DeleteTableRequest_TAll); ok {
		return x.TAll
	}
	return DeleteTableRequest_ALL
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeleteTableRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeleteTableRequest_OneofMarshaler, _DeleteTableRequest_OneofUnmarshaler, _DeleteTableRequest_OneofSizer, []interface{}{
		(*DeleteTableRequest_TId)(nil),
		(*DeleteTableRequest_TAll)(nil),
	}
}

func _DeleteTableRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeleteTableRequest)
	// tenant
	switch x := m.Tenant.(type) {
	case *DeleteTableRequest_TId:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TId)
	case *DeleteTableRequest_TAll:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TAll))
	case nil:
	default:
		return fmt.Errorf("DeleteTableRequest.Tenant has unexpected type %T", x)
	}
	return nil
}

func _DeleteTableRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeleteTableRequest)
	switch tag {
	case 4: // tenant.t_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Tenant = &DeleteTableRequest_TId{x}
		return true, err
	case 5: // tenant.t_all
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Tenant = &DeleteTableRequest_TAll{DeleteTableRequest_TenantIdAll(x)}
		return true, err
	default:
		return false, nil
	}
}

func _DeleteTableRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeleteTableRequest)
	// tenant
	switch x := m.Tenant.(type) {
	case *DeleteTableRequest_TId:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TId)))
		n += len(x.TId)
	case *DeleteTableRequest_TAll:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TAll))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DeleteTableResponse struct {
}

func (m *DeleteTableResponse) Reset()                    { *m = DeleteTableResponse{} }
func (m *DeleteTableResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteTableResponse) ProtoMessage()               {}
func (*DeleteTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

type CreateTableRequest struct {
	Table *Table `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
}

func (m *CreateTableRequest) Reset()                    { *m = CreateTableRequest{} }
func (m *CreateTableRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTableRequest) ProtoMessage()               {}
func (*CreateTableRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *CreateTableRequest) GetTable() *Table {
	if m != nil {
		return m.Table
	}
	return nil
}

type CreateTableResponse struct {
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (m *CreateTableResponse) Reset()                    { *m = CreateTableResponse{} }
func (m *CreateTableResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTableResponse) ProtoMessage()               {}
func (*CreateTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *CreateTableResponse) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

// *
// table_name- Table name can be 'user' , 'series'
// ttl-If set , a particular document would be archived after a threshold time by last updated time.This would be useful to
// archive old data which was not being used.
// version- If not given , version would start with 1
// namespace- This corresponds to the project field in collection. Namespace will have set of tables ,Any API will make
// sure transactional behavior between tables belongs to same namespace
// primary_key- list of non-derived fields which constitute the primary key for the table. This is not mandatory. By
// default, primary key will be an auto-increment column.
//
// CONSTRAINT: env, namespace, and table_name fields can't have underscore(_) character in the names.
//
// INDEXES:
// 1. Clients can use tenant_id column also as part of index and the order does not matter.
// 2. NOTE: ********** If tenant_id is not added as part of index, it is auto-appended.***************
// this will allow clients to prepend tenant_id to improve their bulk queries for same tenants by taking advantage of
// spatial locality, while existing clients which use tenant_id in appended form to indexes will be unaffected
// 3. tenant_id can be added for both simple secondary indexes and unique indexes, in any column order
// 4. tickleDb does not dedup presence of a column in an index.
//
// NOTE: PLEASE CONSULT WITH STORAGE TEAM BEFORE CREATING LARGE (number of) INDEXES
type Table struct {
	TableName         string            `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Ttl               int64             `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
	Version           int64             `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Namespace         string            `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	Env               string            `protobuf:"bytes,5,opt,name=env" json:"env,omitempty"`
	Columns           []*Field          `protobuf:"bytes,6,rep,name=columns" json:"columns,omitempty"`
	PrimaryKey        *PrimaryKey       `protobuf:"bytes,7,opt,name=primary_key,json=primaryKey" json:"primary_key,omitempty"`
	IndexColumns      []*IndexField     `protobuf:"bytes,8,rep,name=index_columns,json=indexColumns" json:"index_columns,omitempty"`
	UniqueColumns     []*IndexField     `protobuf:"bytes,9,rep,name=unique_columns,json=uniqueColumns" json:"unique_columns,omitempty"`
	PartitionStrategy PartitionStrategy `protobuf:"varint,10,opt,name=partition_strategy,json=partitionStrategy,enum=com.mindtickle.storage.pb.tickleDb.PartitionStrategy" json:"partition_strategy,omitempty"`
	PartitionKey      string            `protobuf:"bytes,11,opt,name=partition_key,json=partitionKey" json:"partition_key,omitempty"`
	IsOutboxTable     bool              `protobuf:"varint,12,opt,name=isOutboxTable" json:"isOutboxTable,omitempty"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *Table) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *Table) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *Table) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Table) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Table) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *Table) GetColumns() []*Field {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Table) GetPrimaryKey() *PrimaryKey {
	if m != nil {
		return m.PrimaryKey
	}
	return nil
}

func (m *Table) GetIndexColumns() []*IndexField {
	if m != nil {
		return m.IndexColumns
	}
	return nil
}

func (m *Table) GetUniqueColumns() []*IndexField {
	if m != nil {
		return m.UniqueColumns
	}
	return nil
}

func (m *Table) GetPartitionStrategy() PartitionStrategy {
	if m != nil {
		return m.PartitionStrategy
	}
	return PartitionStrategy_PARTITION_STRATEGY_UNSPECIFIED
}

func (m *Table) GetPartitionKey() string {
	if m != nil {
		return m.PartitionKey
	}
	return ""
}

func (m *Table) GetIsOutboxTable() bool {
	if m != nil {
		return m.IsOutboxTable
	}
	return false
}

// *
// columns- columns which are to be used to derive the primary key. order matters, and primary key for a table can't
// have derived columns. Thus, the path can't be from json column, or a derived column from any other non-json column.
type PrimaryKey struct {
	Columns []string `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
}

func (m *PrimaryKey) Reset()                    { *m = PrimaryKey{} }
func (m *PrimaryKey) String() string            { return proto.CompactTextString(m) }
func (*PrimaryKey) ProtoMessage()               {}
func (*PrimaryKey) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *PrimaryKey) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

type GetCdcSourceInfoRequest struct {
	// Types that are valid to be assigned to Source:
	//	*GetCdcSourceInfoRequest_TableId
	//	*GetCdcSourceInfoRequest_CollectionId
	Source isGetCdcSourceInfoRequest_Source `protobuf_oneof:"source"`
}

func (m *GetCdcSourceInfoRequest) Reset()                    { *m = GetCdcSourceInfoRequest{} }
func (m *GetCdcSourceInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCdcSourceInfoRequest) ProtoMessage()               {}
func (*GetCdcSourceInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

type isGetCdcSourceInfoRequest_Source interface {
	isGetCdcSourceInfoRequest_Source()
}

type GetCdcSourceInfoRequest_TableId struct {
	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,oneof"`
}
type GetCdcSourceInfoRequest_CollectionId struct {
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,oneof"`
}

func (*GetCdcSourceInfoRequest_TableId) isGetCdcSourceInfoRequest_Source()      {}
func (*GetCdcSourceInfoRequest_CollectionId) isGetCdcSourceInfoRequest_Source() {}

func (m *GetCdcSourceInfoRequest) GetSource() isGetCdcSourceInfoRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *GetCdcSourceInfoRequest) GetTableId() string {
	if x, ok := m.GetSource().(*GetCdcSourceInfoRequest_TableId); ok {
		return x.TableId
	}
	return ""
}

func (m *GetCdcSourceInfoRequest) GetCollectionId() string {
	if x, ok := m.GetSource().(*GetCdcSourceInfoRequest_CollectionId); ok {
		return x.CollectionId
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetCdcSourceInfoRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetCdcSourceInfoRequest_OneofMarshaler, _GetCdcSourceInfoRequest_OneofUnmarshaler, _GetCdcSourceInfoRequest_OneofSizer, []interface{}{
		(*GetCdcSourceInfoRequest_TableId)(nil),
		(*GetCdcSourceInfoRequest_CollectionId)(nil),
	}
}

func _GetCdcSourceInfoRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetCdcSourceInfoRequest)
	// source
	switch x := m.Source.(type) {
	case *GetCdcSourceInfoRequest_TableId:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TableId)
	case *GetCdcSourceInfoRequest_CollectionId:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CollectionId)
	case nil:
	default:
		return fmt.Errorf("GetCdcSourceInfoRequest.Source has unexpected type %T", x)
	}
	return nil
}

func _GetCdcSourceInfoRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetCdcSourceInfoRequest)
	switch tag {
	case 1: // source.table_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Source = &GetCdcSourceInfoRequest_TableId{x}
		return true, err
	case 2: // source.collection_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Source = &GetCdcSourceInfoRequest_CollectionId{x}
		return true, err
	default:
		return false, nil
	}
}

func _GetCdcSourceInfoRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetCdcSourceInfoRequest)
	// source
	switch x := m.Source.(type) {
	case *GetCdcSourceInfoRequest_TableId:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TableId)))
		n += len(x.TableId)
	case *GetCdcSourceInfoRequest_CollectionId:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CollectionId)))
		n += len(x.CollectionId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetCdcSourceInfoResponse struct {
	// Types that are valid to be assigned to SourceInfo:
	//	*GetCdcSourceInfoResponse_Collection
	//	*GetCdcSourceInfoResponse_Table
	SourceInfo isGetCdcSourceInfoResponse_SourceInfo `protobuf_oneof:"SourceInfo"`
}

func (m *GetCdcSourceInfoResponse) Reset()                    { *m = GetCdcSourceInfoResponse{} }
func (m *GetCdcSourceInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCdcSourceInfoResponse) ProtoMessage()               {}
func (*GetCdcSourceInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

type isGetCdcSourceInfoResponse_SourceInfo interface {
	isGetCdcSourceInfoResponse_SourceInfo()
}

type GetCdcSourceInfoResponse_Collection struct {
	Collection *Collection `protobuf:"bytes,1,opt,name=collection,oneof"`
}
type GetCdcSourceInfoResponse_Table struct {
	Table *Table `protobuf:"bytes,2,opt,name=table,oneof"`
}

func (*GetCdcSourceInfoResponse_Collection) isGetCdcSourceInfoResponse_SourceInfo() {}
func (*GetCdcSourceInfoResponse_Table) isGetCdcSourceInfoResponse_SourceInfo()      {}

func (m *GetCdcSourceInfoResponse) GetSourceInfo() isGetCdcSourceInfoResponse_SourceInfo {
	if m != nil {
		return m.SourceInfo
	}
	return nil
}

func (m *GetCdcSourceInfoResponse) GetCollection() *Collection {
	if x, ok := m.GetSourceInfo().(*GetCdcSourceInfoResponse_Collection); ok {
		return x.Collection
	}
	return nil
}

func (m *GetCdcSourceInfoResponse) GetTable() *Table {
	if x, ok := m.GetSourceInfo().(*GetCdcSourceInfoResponse_Table); ok {
		return x.Table
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetCdcSourceInfoResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetCdcSourceInfoResponse_OneofMarshaler, _GetCdcSourceInfoResponse_OneofUnmarshaler, _GetCdcSourceInfoResponse_OneofSizer, []interface{}{
		(*GetCdcSourceInfoResponse_Collection)(nil),
		(*GetCdcSourceInfoResponse_Table)(nil),
	}
}

func _GetCdcSourceInfoResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetCdcSourceInfoResponse)
	// SourceInfo
	switch x := m.SourceInfo.(type) {
	case *GetCdcSourceInfoResponse_Collection:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Collection); err != nil {
			return err
		}
	case *GetCdcSourceInfoResponse_Table:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Table); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetCdcSourceInfoResponse.SourceInfo has unexpected type %T", x)
	}
	return nil
}

func _GetCdcSourceInfoResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetCdcSourceInfoResponse)
	switch tag {
	case 1: // SourceInfo.collection
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Collection)
		err := b.DecodeMessage(msg)
		m.SourceInfo = &GetCdcSourceInfoResponse_Collection{msg}
		return true, err
	case 2: // SourceInfo.table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Table)
		err := b.DecodeMessage(msg)
		m.SourceInfo = &GetCdcSourceInfoResponse_Table{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetCdcSourceInfoResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetCdcSourceInfoResponse)
	// SourceInfo
	switch x := m.SourceInfo.(type) {
	case *GetCdcSourceInfoResponse_Collection:
		s := proto.Size(x.Collection)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetCdcSourceInfoResponse_Table:
		s := proto.Size(x.Table)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetTableInfoRequest struct {
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Env       string `protobuf:"bytes,2,opt,name=env" json:"env,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *GetTableInfoRequest) Reset()                    { *m = GetTableInfoRequest{} }
func (m *GetTableInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTableInfoRequest) ProtoMessage()               {}
func (*GetTableInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *GetTableInfoRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *GetTableInfoRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *GetTableInfoRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// *
// Parameters:
//    1. source- one of Collection or Table. Either DocStore or RowStore will be searched and thus, only either collection_name/table_name can
//    be given.
//    2. env- environment to search for
//    3. namespace- Same as project for DocStore.
//    4. version- version number of the collection/table. Single collection/table can have multiple versions
type GetCdcSourceIdRequest struct {
	// Types that are valid to be assigned to Source:
	//	*GetCdcSourceIdRequest_TableName
	//	*GetCdcSourceIdRequest_CollectionName
	Source    isGetCdcSourceIdRequest_Source `protobuf_oneof:"source"`
	Env       string                         `protobuf:"bytes,3,opt,name=env" json:"env,omitempty"`
	Namespace string                         `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	Version   int64                          `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
}

func (m *GetCdcSourceIdRequest) Reset()                    { *m = GetCdcSourceIdRequest{} }
func (m *GetCdcSourceIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCdcSourceIdRequest) ProtoMessage()               {}
func (*GetCdcSourceIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

type isGetCdcSourceIdRequest_Source interface {
	isGetCdcSourceIdRequest_Source()
}

type GetCdcSourceIdRequest_TableName struct {
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,oneof"`
}
type GetCdcSourceIdRequest_CollectionName struct {
	CollectionName string `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,oneof"`
}

func (*GetCdcSourceIdRequest_TableName) isGetCdcSourceIdRequest_Source()      {}
func (*GetCdcSourceIdRequest_CollectionName) isGetCdcSourceIdRequest_Source() {}

func (m *GetCdcSourceIdRequest) GetSource() isGetCdcSourceIdRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *GetCdcSourceIdRequest) GetTableName() string {
	if x, ok := m.GetSource().(*GetCdcSourceIdRequest_TableName); ok {
		return x.TableName
	}
	return ""
}

func (m *GetCdcSourceIdRequest) GetCollectionName() string {
	if x, ok := m.GetSource().(*GetCdcSourceIdRequest_CollectionName); ok {
		return x.CollectionName
	}
	return ""
}

func (m *GetCdcSourceIdRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *GetCdcSourceIdRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetCdcSourceIdRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetCdcSourceIdRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetCdcSourceIdRequest_OneofMarshaler, _GetCdcSourceIdRequest_OneofUnmarshaler, _GetCdcSourceIdRequest_OneofSizer, []interface{}{
		(*GetCdcSourceIdRequest_TableName)(nil),
		(*GetCdcSourceIdRequest_CollectionName)(nil),
	}
}

func _GetCdcSourceIdRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetCdcSourceIdRequest)
	// source
	switch x := m.Source.(type) {
	case *GetCdcSourceIdRequest_TableName:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TableName)
	case *GetCdcSourceIdRequest_CollectionName:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CollectionName)
	case nil:
	default:
		return fmt.Errorf("GetCdcSourceIdRequest.Source has unexpected type %T", x)
	}
	return nil
}

func _GetCdcSourceIdRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetCdcSourceIdRequest)
	switch tag {
	case 1: // source.table_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Source = &GetCdcSourceIdRequest_TableName{x}
		return true, err
	case 2: // source.collection_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Source = &GetCdcSourceIdRequest_CollectionName{x}
		return true, err
	default:
		return false, nil
	}
}

func _GetCdcSourceIdRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetCdcSourceIdRequest)
	// source
	switch x := m.Source.(type) {
	case *GetCdcSourceIdRequest_TableName:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TableName)))
		n += len(x.TableName)
	case *GetCdcSourceIdRequest_CollectionName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CollectionName)))
		n += len(x.CollectionName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetCdcSourceIdResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetCdcSourceIdResponse) Reset()                    { *m = GetCdcSourceIdResponse{} }
func (m *GetCdcSourceIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCdcSourceIdResponse) ProtoMessage()               {}
func (*GetCdcSourceIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *GetCdcSourceIdResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Path of the fields which needs to be indexed.
type IndexField struct {
	FieldPath []string `protobuf:"bytes,2,rep,name=field_path,json=fieldPath" json:"field_path,omitempty"`
	IndexName string   `protobuf:"bytes,3,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
}

func (m *IndexField) Reset()                    { *m = IndexField{} }
func (m *IndexField) String() string            { return proto.CompactTextString(m) }
func (*IndexField) ProtoMessage()               {}
func (*IndexField) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *IndexField) GetFieldPath() []string {
	if m != nil {
		return m.FieldPath
	}
	return nil
}

func (m *IndexField) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

// * The constraints regarding fields
// application can make a field required or specify default value or may be set to auto increment.
// Nested fields are only required for JSON fields.
//
// FOR GENERATED COLUMNS: in case of generated columns, use 'generated_as_expr' to fill the expression to be used.
// For instance, in CreateTable
// `create table t13(id int, mem varchar(10), cpu enum('1','2','3'), pname varchar(10) generated always as
// (concat(id,pid)), pid varchar(10), cpu_val int generated always as (sqrt(id));`
// expression for pname is concat(id,pid)
// expression for cpu_name is sqrt(id)
// For these column types, column name, column data type are mandatory.enum_expected_values can also be given if type is
// enum.
// Required and size can also be given.
// NOTE: default values are not possible for generated columns
//
// Since No index is possible on json columns directly, So use generated columns from json and index them
//
// CURRENT SCOPE:
// Generated columns are supported in following APIs:
// 1. CreateTable
// 2. UpdateTable- all variations except in ModifyColumn, where expr can not be modified. You can only modify the size.
//
// SOME CAVEATS TO REMEMBER:
// 1. For a query expression to match a generated column definition, the expression must be identical and it must have the same result type. For example, if the generated column expression is f1 + 1, the optimizer will not recognize a match if the query uses 1 + f1, or if f1 + 1 (an integer expression) is compared with a strin
// DEFAULT values can not be given for these
// 2. The generated column must be defined as an expression that contains at least a function call or one of the operators mentioned in the preceding item. The expression cannot consist of a simple reference to another column. For example, gc INT AS (f1) STORED consists only of a column reference, so indexes on gc are not considered.
// 3. Enum works:
// create table t12(id varchar(10), cpu enum('1','2','3'), pname varchar(10) as (concat(id,pid)), pid varchar(10), cpu_name enum('1') generated always as (cpu));
// However, if enum range is different, then ERROR 1265 (01000): Data truncated for column 'cpu' at row 1 error
type Field struct {
	FieldName          string         `protobuf:"bytes,2,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	DataType           Field_DataType `protobuf:"varint,3,opt,name=data_type,json=dataType,enum=com.mindtickle.storage.pb.tickleDb.Field_DataType" json:"data_type,omitempty"`
	EnumExpectedValues []string       `protobuf:"bytes,4,rep,name=enum_expected_values,json=enumExpectedValues" json:"enum_expected_values,omitempty"`
	NestedFields       []*Field       `protobuf:"bytes,5,rep,name=nested_fields,json=nestedFields" json:"nested_fields,omitempty"`
	Required           bool           `protobuf:"varint,7,opt,name=required" json:"required,omitempty"`
	Size               int64          `protobuf:"varint,8,opt,name=size" json:"size,omitempty"`
	DefaultValue       string         `protobuf:"bytes,9,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	GeneratedAsExpr    string         `protobuf:"bytes,10,opt,name=generated_as_expr,json=generatedAsExpr" json:"generated_as_expr,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *Field) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *Field) GetDataType() Field_DataType {
	if m != nil {
		return m.DataType
	}
	return Field_DATA_TYPE_UNSPECIFIED
}

func (m *Field) GetEnumExpectedValues() []string {
	if m != nil {
		return m.EnumExpectedValues
	}
	return nil
}

func (m *Field) GetNestedFields() []*Field {
	if m != nil {
		return m.NestedFields
	}
	return nil
}

func (m *Field) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *Field) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Field) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *Field) GetGeneratedAsExpr() string {
	if m != nil {
		return m.GeneratedAsExpr
	}
	return ""
}

// *
// Collection represents set of documents .
// Requirement of Collection is following
//     1) Logicallly separate one set of documents with another
//     2) Able to store single collection on diffrent nodes with some partioning strategy
//     3) Schema evolution and Schema checks
//     4) Fit into hierachiel representation , so that same collection for diffrent environment and project would be logically separable .
type Collection struct {
	Id                string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CollectionName    string            `protobuf:"bytes,2,opt,name=collection_name,json=collectionName" json:"collection_name,omitempty"`
	Ttl               int64             `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
	Version           int64             `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	SchemaType        SchemaType        `protobuf:"varint,5,opt,name=schema_type,json=schemaType,enum=com.mindtickle.storage.pb.tickleDb.SchemaType" json:"schema_type,omitempty"`
	Project           string            `protobuf:"bytes,11,opt,name=project" json:"project,omitempty"`
	Env               string            `protobuf:"bytes,12,opt,name=env" json:"env,omitempty"`
	Fields            []*Field          `protobuf:"bytes,6,rep,name=fields" json:"fields,omitempty"`
	IndexFields       []*IndexField     `protobuf:"bytes,7,rep,name=index_fields,json=indexFields" json:"index_fields,omitempty"`
	UniqueFields      []*IndexField     `protobuf:"bytes,8,rep,name=unique_fields,json=uniqueFields" json:"unique_fields,omitempty"`
	PartitionKey      string            `protobuf:"bytes,9,opt,name=partition_key,json=partitionKey" json:"partition_key,omitempty"`
	PartitionStrategy PartitionStrategy `protobuf:"varint,10,opt,name=partition_strategy,json=partitionStrategy,enum=com.mindtickle.storage.pb.tickleDb.PartitionStrategy" json:"partition_strategy,omitempty"`
}

func (m *Collection) Reset()                    { *m = Collection{} }
func (m *Collection) String() string            { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()               {}
func (*Collection) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *Collection) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Collection) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *Collection) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *Collection) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Collection) GetSchemaType() SchemaType {
	if m != nil {
		return m.SchemaType
	}
	return SchemaType_SCHEMA_TYPE_UNSPECIFIED
}

func (m *Collection) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Collection) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *Collection) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Collection) GetIndexFields() []*IndexField {
	if m != nil {
		return m.IndexFields
	}
	return nil
}

func (m *Collection) GetUniqueFields() []*IndexField {
	if m != nil {
		return m.UniqueFields
	}
	return nil
}

func (m *Collection) GetPartitionKey() string {
	if m != nil {
		return m.PartitionKey
	}
	return ""
}

func (m *Collection) GetPartitionStrategy() PartitionStrategy {
	if m != nil {
		return m.PartitionStrategy
	}
	return PartitionStrategy_PARTITION_STRATEGY_UNSPECIFIED
}

// *
// Relationship Collection represents set of relationship documents .
// Relationship collection would have similar requirements as collection, But there are few extra requirements
//   1) Every relationship would be bidrectional relationship.
//   2) There can be many relationship between two documents. In this case every relationship would have diffrent relationship-type .
//   3) Have information about when to cascade relationship .
type RelationshipCollection struct {
	SrcCollectionId   string                          `protobuf:"bytes,2,opt,name=src_collection_id,json=srcCollectionId" json:"src_collection_id,omitempty"`
	DestCollectionId  string                          `protobuf:"bytes,3,opt,name=dest_collection_id,json=destCollectionId" json:"dest_collection_id,omitempty"`
	Id                string                          `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	Project           string                          `protobuf:"bytes,5,opt,name=project" json:"project,omitempty"`
	RelationshipName  string                          `protobuf:"bytes,6,opt,name=relationship_name,json=relationshipName" json:"relationship_name,omitempty"`
	Env               string                          `protobuf:"bytes,7,opt,name=env" json:"env,omitempty"`
	Version           int64                           `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
	UniqueFields      []*IndexField                   `protobuf:"bytes,9,rep,name=unique_fields,json=uniqueFields" json:"unique_fields,omitempty"`
	Fields            []*Field                        `protobuf:"bytes,10,rep,name=fields" json:"fields,omitempty"`
	IndexFields       []*IndexField                   `protobuf:"bytes,11,rep,name=index_fields,json=indexFields" json:"index_fields,omitempty"`
	PartitionKey      string                          `protobuf:"bytes,12,opt,name=partition_key,json=partitionKey" json:"partition_key,omitempty"`
	PartitionStrategy PartitionStrategy               `protobuf:"varint,13,opt,name=partition_strategy,json=partitionStrategy,enum=com.mindtickle.storage.pb.tickleDb.PartitionStrategy" json:"partition_strategy,omitempty"`
	DeleteOn          RelationshipCollection_DeleteOn `protobuf:"varint,14,opt,name=delete_on,json=deleteOn,enum=com.mindtickle.storage.pb.tickleDb.RelationshipCollection_DeleteOn" json:"delete_on,omitempty"`
}

func (m *RelationshipCollection) Reset()                    { *m = RelationshipCollection{} }
func (m *RelationshipCollection) String() string            { return proto.CompactTextString(m) }
func (*RelationshipCollection) ProtoMessage()               {}
func (*RelationshipCollection) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *RelationshipCollection) GetSrcCollectionId() string {
	if m != nil {
		return m.SrcCollectionId
	}
	return ""
}

func (m *RelationshipCollection) GetDestCollectionId() string {
	if m != nil {
		return m.DestCollectionId
	}
	return ""
}

func (m *RelationshipCollection) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RelationshipCollection) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *RelationshipCollection) GetRelationshipName() string {
	if m != nil {
		return m.RelationshipName
	}
	return ""
}

func (m *RelationshipCollection) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *RelationshipCollection) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RelationshipCollection) GetUniqueFields() []*IndexField {
	if m != nil {
		return m.UniqueFields
	}
	return nil
}

func (m *RelationshipCollection) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *RelationshipCollection) GetIndexFields() []*IndexField {
	if m != nil {
		return m.IndexFields
	}
	return nil
}

func (m *RelationshipCollection) GetPartitionKey() string {
	if m != nil {
		return m.PartitionKey
	}
	return ""
}

func (m *RelationshipCollection) GetPartitionStrategy() PartitionStrategy {
	if m != nil {
		return m.PartitionStrategy
	}
	return PartitionStrategy_PARTITION_STRATEGY_UNSPECIFIED
}

func (m *RelationshipCollection) GetDeleteOn() RelationshipCollection_DeleteOn {
	if m != nil {
		return m.DeleteOn
	}
	return RelationshipCollection_DELETE_ON_UNSPECIFIED
}

type CreateCollectionRequest struct {
	Collection *Collection `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
}

func (m *CreateCollectionRequest) Reset()                    { *m = CreateCollectionRequest{} }
func (m *CreateCollectionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCollectionRequest) ProtoMessage()               {}
func (*CreateCollectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *CreateCollectionRequest) GetCollection() *Collection {
	if m != nil {
		return m.Collection
	}
	return nil
}

type CreateCollectionResponse struct {
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
}

func (m *CreateCollectionResponse) Reset()                    { *m = CreateCollectionResponse{} }
func (m *CreateCollectionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateCollectionResponse) ProtoMessage()               {}
func (*CreateCollectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *CreateCollectionResponse) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

type GetCollectionIDResponse struct {
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
}

func (m *GetCollectionIDResponse) Reset()                    { *m = GetCollectionIDResponse{} }
func (m *GetCollectionIDResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCollectionIDResponse) ProtoMessage()               {}
func (*GetCollectionIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *GetCollectionIDResponse) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

// TODO to check what updates can be done and what cant be done
type UpdateCollectionRequest struct {
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	// Types that are valid to be assigned to UpdateRequest:
	//	*UpdateCollectionRequest_AddField
	//	*UpdateCollectionRequest_UpdateField
	//	*UpdateCollectionRequest_DeleteField
	//	*UpdateCollectionRequest_AddIndex
	//	*UpdateCollectionRequest_DropIndex
	UpdateRequest isUpdateCollectionRequest_UpdateRequest `protobuf_oneof:"UpdateRequest"`
}

func (m *UpdateCollectionRequest) Reset()                    { *m = UpdateCollectionRequest{} }
func (m *UpdateCollectionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateCollectionRequest) ProtoMessage()               {}
func (*UpdateCollectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

type isUpdateCollectionRequest_UpdateRequest interface {
	isUpdateCollectionRequest_UpdateRequest()
}

type UpdateCollectionRequest_AddField struct {
	AddField *AddField `protobuf:"bytes,2,opt,name=add_field,json=addField,oneof"`
}
type UpdateCollectionRequest_UpdateField struct {
	UpdateField *UpdateField `protobuf:"bytes,3,opt,name=update_field,json=updateField,oneof"`
}
type UpdateCollectionRequest_DeleteField struct {
	DeleteField *DeleteField `protobuf:"bytes,4,opt,name=delete_field,json=deleteField,oneof"`
}
type UpdateCollectionRequest_AddIndex struct {
	AddIndex *AddIndex `protobuf:"bytes,5,opt,name=add_index,json=addIndex,oneof"`
}
type UpdateCollectionRequest_DropIndex struct {
	DropIndex *DropIndex `protobuf:"bytes,6,opt,name=drop_index,json=dropIndex,oneof"`
}

func (*UpdateCollectionRequest_AddField) isUpdateCollectionRequest_UpdateRequest()    {}
func (*UpdateCollectionRequest_UpdateField) isUpdateCollectionRequest_UpdateRequest() {}
func (*UpdateCollectionRequest_DeleteField) isUpdateCollectionRequest_UpdateRequest() {}
func (*UpdateCollectionRequest_AddIndex) isUpdateCollectionRequest_UpdateRequest()    {}
func (*UpdateCollectionRequest_DropIndex) isUpdateCollectionRequest_UpdateRequest()   {}

func (m *UpdateCollectionRequest) GetUpdateRequest() isUpdateCollectionRequest_UpdateRequest {
	if m != nil {
		return m.UpdateRequest
	}
	return nil
}

func (m *UpdateCollectionRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *UpdateCollectionRequest) GetAddField() *AddField {
	if x, ok := m.GetUpdateRequest().(*UpdateCollectionRequest_AddField); ok {
		return x.AddField
	}
	return nil
}

func (m *UpdateCollectionRequest) GetUpdateField() *UpdateField {
	if x, ok := m.GetUpdateRequest().(*UpdateCollectionRequest_UpdateField); ok {
		return x.UpdateField
	}
	return nil
}

func (m *UpdateCollectionRequest) GetDeleteField() *DeleteField {
	if x, ok := m.GetUpdateRequest().(*UpdateCollectionRequest_DeleteField); ok {
		return x.DeleteField
	}
	return nil
}

func (m *UpdateCollectionRequest) GetAddIndex() *AddIndex {
	if x, ok := m.GetUpdateRequest().(*UpdateCollectionRequest_AddIndex); ok {
		return x.AddIndex
	}
	return nil
}

func (m *UpdateCollectionRequest) GetDropIndex() *DropIndex {
	if x, ok := m.GetUpdateRequest().(*UpdateCollectionRequest_DropIndex); ok {
		return x.DropIndex
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpdateCollectionRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpdateCollectionRequest_OneofMarshaler, _UpdateCollectionRequest_OneofUnmarshaler, _UpdateCollectionRequest_OneofSizer, []interface{}{
		(*UpdateCollectionRequest_AddField)(nil),
		(*UpdateCollectionRequest_UpdateField)(nil),
		(*UpdateCollectionRequest_DeleteField)(nil),
		(*UpdateCollectionRequest_AddIndex)(nil),
		(*UpdateCollectionRequest_DropIndex)(nil),
	}
}

func _UpdateCollectionRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpdateCollectionRequest)
	// UpdateRequest
	switch x := m.UpdateRequest.(type) {
	case *UpdateCollectionRequest_AddField:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddField); err != nil {
			return err
		}
	case *UpdateCollectionRequest_UpdateField:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateField); err != nil {
			return err
		}
	case *UpdateCollectionRequest_DeleteField:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteField); err != nil {
			return err
		}
	case *UpdateCollectionRequest_AddIndex:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddIndex); err != nil {
			return err
		}
	case *UpdateCollectionRequest_DropIndex:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DropIndex); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpdateCollectionRequest.UpdateRequest has unexpected type %T", x)
	}
	return nil
}

func _UpdateCollectionRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpdateCollectionRequest)
	switch tag {
	case 2: // UpdateRequest.add_field
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddField)
		err := b.DecodeMessage(msg)
		m.UpdateRequest = &UpdateCollectionRequest_AddField{msg}
		return true, err
	case 3: // UpdateRequest.update_field
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateField)
		err := b.DecodeMessage(msg)
		m.UpdateRequest = &UpdateCollectionRequest_UpdateField{msg}
		return true, err
	case 4: // UpdateRequest.delete_field
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteField)
		err := b.DecodeMessage(msg)
		m.UpdateRequest = &UpdateCollectionRequest_DeleteField{msg}
		return true, err
	case 5: // UpdateRequest.add_index
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddIndex)
		err := b.DecodeMessage(msg)
		m.UpdateRequest = &UpdateCollectionRequest_AddIndex{msg}
		return true, err
	case 6: // UpdateRequest.drop_index
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DropIndex)
		err := b.DecodeMessage(msg)
		m.UpdateRequest = &UpdateCollectionRequest_DropIndex{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpdateCollectionRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpdateCollectionRequest)
	// UpdateRequest
	switch x := m.UpdateRequest.(type) {
	case *UpdateCollectionRequest_AddField:
		s := proto.Size(x.AddField)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateCollectionRequest_UpdateField:
		s := proto.Size(x.UpdateField)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateCollectionRequest_DeleteField:
		s := proto.Size(x.DeleteField)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateCollectionRequest_AddIndex:
		s := proto.Size(x.AddIndex)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UpdateCollectionRequest_DropIndex:
		s := proto.Size(x.DropIndex)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// this will drop the index which has only field paths provided.
// for example:
// if request is do delete index [A, B, C]
// and collection has three indexes [A, B, C], [A, B], [A, B, C, D]
// then only one index i.e. [A, B, C] is deleted
type DropIndex struct {
	FieldPath []string `protobuf:"bytes,2,rep,name=field_path,json=fieldPath" json:"field_path,omitempty"`
}

func (m *DropIndex) Reset()                    { *m = DropIndex{} }
func (m *DropIndex) String() string            { return proto.CompactTextString(m) }
func (*DropIndex) ProtoMessage()               {}
func (*DropIndex) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *DropIndex) GetFieldPath() []string {
	if m != nil {
		return m.FieldPath
	}
	return nil
}

type AddIndex struct {
	FieldPath []string `protobuf:"bytes,1,rep,name=field_path,json=fieldPath" json:"field_path,omitempty"`
	IsUnique  bool     `protobuf:"varint,2,opt,name=is_unique,json=isUnique" json:"is_unique,omitempty"`
	IndexName string   `protobuf:"bytes,3,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
}

func (m *AddIndex) Reset()                    { *m = AddIndex{} }
func (m *AddIndex) String() string            { return proto.CompactTextString(m) }
func (*AddIndex) ProtoMessage()               {}
func (*AddIndex) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *AddIndex) GetFieldPath() []string {
	if m != nil {
		return m.FieldPath
	}
	return nil
}

func (m *AddIndex) GetIsUnique() bool {
	if m != nil {
		return m.IsUnique
	}
	return false
}

func (m *AddIndex) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

type AddField struct {
	Field *Field `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *AddField) Reset()                    { *m = AddField{} }
func (m *AddField) String() string            { return proto.CompactTextString(m) }
func (*AddField) ProtoMessage()               {}
func (*AddField) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{40} }

func (m *AddField) GetField() *Field {
	if m != nil {
		return m.Field
	}
	return nil
}

type DeleteField struct {
	FieldPath string `protobuf:"bytes,1,opt,name=field_path,json=fieldPath" json:"field_path,omitempty"`
}

func (m *DeleteField) Reset()                    { *m = DeleteField{} }
func (m *DeleteField) String() string            { return proto.CompactTextString(m) }
func (*DeleteField) ProtoMessage()               {}
func (*DeleteField) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{41} }

func (m *DeleteField) GetFieldPath() string {
	if m != nil {
		return m.FieldPath
	}
	return ""
}

type UpdateField struct {
	FieldName          string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	EnumExpectedValues []string `protobuf:"bytes,2,rep,name=enum_expected_values,json=enumExpectedValues" json:"enum_expected_values,omitempty"`
	Required           bool     `protobuf:"varint,3,opt,name=required" json:"required,omitempty"`
	Size               int64    `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	DefaultValue       string   `protobuf:"bytes,5,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
}

func (m *UpdateField) Reset()                    { *m = UpdateField{} }
func (m *UpdateField) String() string            { return proto.CompactTextString(m) }
func (*UpdateField) ProtoMessage()               {}
func (*UpdateField) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{42} }

func (m *UpdateField) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *UpdateField) GetEnumExpectedValues() []string {
	if m != nil {
		return m.EnumExpectedValues
	}
	return nil
}

func (m *UpdateField) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *UpdateField) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *UpdateField) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

type UpdateCollectionResponse struct {
	UpdateCollectionRequestId string `protobuf:"bytes,1,opt,name=update_collection_request_id,json=updateCollectionRequestId" json:"update_collection_request_id,omitempty"`
}

func (m *UpdateCollectionResponse) Reset()                    { *m = UpdateCollectionResponse{} }
func (m *UpdateCollectionResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateCollectionResponse) ProtoMessage()               {}
func (*UpdateCollectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{43} }

func (m *UpdateCollectionResponse) GetUpdateCollectionRequestId() string {
	if m != nil {
		return m.UpdateCollectionRequestId
	}
	return ""
}

type GetUpdateCollectionStatusRequest struct {
	UpdateCollectionRequestId string `protobuf:"bytes,1,opt,name=update_collection_request_id,json=updateCollectionRequestId" json:"update_collection_request_id,omitempty"`
}

func (m *GetUpdateCollectionStatusRequest) Reset()         { *m = GetUpdateCollectionStatusRequest{} }
func (m *GetUpdateCollectionStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetUpdateCollectionStatusRequest) ProtoMessage()    {}
func (*GetUpdateCollectionStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{44}
}

func (m *GetUpdateCollectionStatusRequest) GetUpdateCollectionRequestId() string {
	if m != nil {
		return m.UpdateCollectionRequestId
	}
	return ""
}

type GetUpdateCollectionStatusResponse struct {
	Status Status `protobuf:"varint,1,opt,name=status,enum=com.mindtickle.storage.pb.tickleDb.Status" json:"status,omitempty"`
}

func (m *GetUpdateCollectionStatusResponse) Reset()         { *m = GetUpdateCollectionStatusResponse{} }
func (m *GetUpdateCollectionStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetUpdateCollectionStatusResponse) ProtoMessage()    {}
func (*GetUpdateCollectionStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{45}
}

func (m *GetUpdateCollectionStatusResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_STATUS_UNSPECIFIED
}

type DeleteCollectionRequest struct {
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	TenantId     string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
}

func (m *DeleteCollectionRequest) Reset()                    { *m = DeleteCollectionRequest{} }
func (m *DeleteCollectionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCollectionRequest) ProtoMessage()               {}
func (*DeleteCollectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{46} }

func (m *DeleteCollectionRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *DeleteCollectionRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type DeleteCollectionResponse struct {
}

func (m *DeleteCollectionResponse) Reset()                    { *m = DeleteCollectionResponse{} }
func (m *DeleteCollectionResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteCollectionResponse) ProtoMessage()               {}
func (*DeleteCollectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{47} }

type RestoreCollectionRequest struct {
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
	TenantId     string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
}

func (m *RestoreCollectionRequest) Reset()                    { *m = RestoreCollectionRequest{} }
func (m *RestoreCollectionRequest) String() string            { return proto.CompactTextString(m) }
func (*RestoreCollectionRequest) ProtoMessage()               {}
func (*RestoreCollectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{48} }

func (m *RestoreCollectionRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *RestoreCollectionRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type GetCollectionRequest struct {
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId" json:"collection_id,omitempty"`
}

func (m *GetCollectionRequest) Reset()                    { *m = GetCollectionRequest{} }
func (m *GetCollectionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCollectionRequest) ProtoMessage()               {}
func (*GetCollectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{49} }

func (m *GetCollectionRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

type RestoreCollectionResponse struct {
}

func (m *RestoreCollectionResponse) Reset()                    { *m = RestoreCollectionResponse{} }
func (m *RestoreCollectionResponse) String() string            { return proto.CompactTextString(m) }
func (*RestoreCollectionResponse) ProtoMessage()               {}
func (*RestoreCollectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{50} }

type GetCollectionIDRequest struct {
	Env            string `protobuf:"bytes,2,opt,name=env" json:"env,omitempty"`
	Project        string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	CollectionName string `protobuf:"bytes,4,opt,name=collection_name,json=collectionName" json:"collection_name,omitempty"`
	Version        int64  `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
}

func (m *GetCollectionIDRequest) Reset()                    { *m = GetCollectionIDRequest{} }
func (m *GetCollectionIDRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCollectionIDRequest) ProtoMessage()               {}
func (*GetCollectionIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{51} }

func (m *GetCollectionIDRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *GetCollectionIDRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GetCollectionIDRequest) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *GetCollectionIDRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type ListCollectionsRequest struct {
	Env            string `protobuf:"bytes,2,opt,name=env" json:"env,omitempty"`
	Project        string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	CollectionName string `protobuf:"bytes,4,opt,name=collection_name,json=collectionName" json:"collection_name,omitempty"`
}

func (m *ListCollectionsRequest) Reset()                    { *m = ListCollectionsRequest{} }
func (m *ListCollectionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCollectionsRequest) ProtoMessage()               {}
func (*ListCollectionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{52} }

func (m *ListCollectionsRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *ListCollectionsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ListCollectionsRequest) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

type ListCollectionsResponse struct {
	CollectionIds []string `protobuf:"bytes,1,rep,name=collection_ids,json=collectionIds" json:"collection_ids,omitempty"`
	TotalSize     int64    `protobuf:"varint,2,opt,name=total_size,json=totalSize" json:"total_size,omitempty"`
}

func (m *ListCollectionsResponse) Reset()                    { *m = ListCollectionsResponse{} }
func (m *ListCollectionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListCollectionsResponse) ProtoMessage()               {}
func (*ListCollectionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{53} }

func (m *ListCollectionsResponse) GetCollectionIds() []string {
	if m != nil {
		return m.CollectionIds
	}
	return nil
}

func (m *ListCollectionsResponse) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

type CreateRelationshipCollectionRequest struct {
	RelationshipCollection *RelationshipCollection `protobuf:"bytes,2,opt,name=relationship_collection,json=relationshipCollection" json:"relationship_collection,omitempty"`
}

func (m *CreateRelationshipCollectionRequest) Reset()         { *m = CreateRelationshipCollectionRequest{} }
func (m *CreateRelationshipCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRelationshipCollectionRequest) ProtoMessage()    {}
func (*CreateRelationshipCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{54}
}

func (m *CreateRelationshipCollectionRequest) GetRelationshipCollection() *RelationshipCollection {
	if m != nil {
		return m.RelationshipCollection
	}
	return nil
}

type UpdateRelationshipCollectionRequest struct {
	Id                string            `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	RelationshipName  string            `protobuf:"bytes,6,opt,name=relationship_name,json=relationshipName" json:"relationship_name,omitempty"`
	Fields            []*Field          `protobuf:"bytes,9,rep,name=fields" json:"fields,omitempty"`
	IndexFields       []*IndexField     `protobuf:"bytes,10,rep,name=index_fields,json=indexFields" json:"index_fields,omitempty"`
	PartitionKey      string            `protobuf:"bytes,11,opt,name=partition_key,json=partitionKey" json:"partition_key,omitempty"`
	PartitionStrategy PartitionStrategy `protobuf:"varint,12,opt,name=partition_strategy,json=partitionStrategy,enum=com.mindtickle.storage.pb.tickleDb.PartitionStrategy" json:"partition_strategy,omitempty"`
}

func (m *UpdateRelationshipCollectionRequest) Reset()         { *m = UpdateRelationshipCollectionRequest{} }
func (m *UpdateRelationshipCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRelationshipCollectionRequest) ProtoMessage()    {}
func (*UpdateRelationshipCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{55}
}

func (m *UpdateRelationshipCollectionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRelationshipCollectionRequest) GetRelationshipName() string {
	if m != nil {
		return m.RelationshipName
	}
	return ""
}

func (m *UpdateRelationshipCollectionRequest) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *UpdateRelationshipCollectionRequest) GetIndexFields() []*IndexField {
	if m != nil {
		return m.IndexFields
	}
	return nil
}

func (m *UpdateRelationshipCollectionRequest) GetPartitionKey() string {
	if m != nil {
		return m.PartitionKey
	}
	return ""
}

func (m *UpdateRelationshipCollectionRequest) GetPartitionStrategy() PartitionStrategy {
	if m != nil {
		return m.PartitionStrategy
	}
	return PartitionStrategy_PARTITION_STRATEGY_UNSPECIFIED
}

type DeleteRelationshipCollectionRequest struct {
	RelationshipCollectionId string `protobuf:"bytes,4,opt,name=relationship_collection_id,json=relationshipCollectionId" json:"relationship_collection_id,omitempty"`
	TenantId                 string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
}

func (m *DeleteRelationshipCollectionRequest) Reset()         { *m = DeleteRelationshipCollectionRequest{} }
func (m *DeleteRelationshipCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRelationshipCollectionRequest) ProtoMessage()    {}
func (*DeleteRelationshipCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{56}
}

func (m *DeleteRelationshipCollectionRequest) GetRelationshipCollectionId() string {
	if m != nil {
		return m.RelationshipCollectionId
	}
	return ""
}

func (m *DeleteRelationshipCollectionRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type GetRelationshipCollectionRequest struct {
	RelationshipCollectionId string `protobuf:"bytes,2,opt,name=relationship_collection_id,json=relationshipCollectionId" json:"relationship_collection_id,omitempty"`
}

func (m *GetRelationshipCollectionRequest) Reset()         { *m = GetRelationshipCollectionRequest{} }
func (m *GetRelationshipCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*GetRelationshipCollectionRequest) ProtoMessage()    {}
func (*GetRelationshipCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{57}
}

func (m *GetRelationshipCollectionRequest) GetRelationshipCollectionId() string {
	if m != nil {
		return m.RelationshipCollectionId
	}
	return ""
}

type GetRelationshipCollectionIDRequest struct {
	Env              string `protobuf:"bytes,2,opt,name=env" json:"env,omitempty"`
	Project          string `protobuf:"bytes,5,opt,name=project" json:"project,omitempty"`
	RelationshipName string `protobuf:"bytes,6,opt,name=relationship_name,json=relationshipName" json:"relationship_name,omitempty"`
	Version          int64  `protobuf:"varint,7,opt,name=version" json:"version,omitempty"`
}

func (m *GetRelationshipCollectionIDRequest) Reset()         { *m = GetRelationshipCollectionIDRequest{} }
func (m *GetRelationshipCollectionIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetRelationshipCollectionIDRequest) ProtoMessage()    {}
func (*GetRelationshipCollectionIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{58}
}

func (m *GetRelationshipCollectionIDRequest) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *GetRelationshipCollectionIDRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GetRelationshipCollectionIDRequest) GetRelationshipName() string {
	if m != nil {
		return m.RelationshipName
	}
	return ""
}

func (m *GetRelationshipCollectionIDRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CreateRelationshipCollectionResponse struct {
	RelationshipCollectionId string `protobuf:"bytes,1,opt,name=relationship_collection_id,json=relationshipCollectionId" json:"relationship_collection_id,omitempty"`
}

func (m *CreateRelationshipCollectionResponse) Reset()         { *m = CreateRelationshipCollectionResponse{} }
func (m *CreateRelationshipCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRelationshipCollectionResponse) ProtoMessage()    {}
func (*CreateRelationshipCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{59}
}

func (m *CreateRelationshipCollectionResponse) GetRelationshipCollectionId() string {
	if m != nil {
		return m.RelationshipCollectionId
	}
	return ""
}

type UpdateRelationshipCollectionResponse struct {
}

func (m *UpdateRelationshipCollectionResponse) Reset()         { *m = UpdateRelationshipCollectionResponse{} }
func (m *UpdateRelationshipCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRelationshipCollectionResponse) ProtoMessage()    {}
func (*UpdateRelationshipCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{60}
}

type DeleteRelationshipCollectionResponse struct {
}

func (m *DeleteRelationshipCollectionResponse) Reset()         { *m = DeleteRelationshipCollectionResponse{} }
func (m *DeleteRelationshipCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRelationshipCollectionResponse) ProtoMessage()    {}
func (*DeleteRelationshipCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{61}
}

type GetRelationshipCollectionIDResponse struct {
	RelationshipCollectionId string `protobuf:"bytes,1,opt,name=relationship_collection_id,json=relationshipCollectionId" json:"relationship_collection_id,omitempty"`
}

func (m *GetRelationshipCollectionIDResponse) Reset()         { *m = GetRelationshipCollectionIDResponse{} }
func (m *GetRelationshipCollectionIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetRelationshipCollectionIDResponse) ProtoMessage()    {}
func (*GetRelationshipCollectionIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{62}
}

func (m *GetRelationshipCollectionIDResponse) GetRelationshipCollectionId() string {
	if m != nil {
		return m.RelationshipCollectionId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetClusterTopologiesRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetClusterTopologiesRequest")
	proto.RegisterType((*GetClusterTopologiesResponse)(nil), "com.mindtickle.storage.pb.tickleDb.GetClusterTopologiesResponse")
	proto.RegisterType((*Cluster)(nil), "com.mindtickle.storage.pb.tickleDb.Cluster")
	proto.RegisterType((*GetUpdateTableStatusRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetUpdateTableStatusRequest")
	proto.RegisterType((*GetUpdateTableStatusResponse)(nil), "com.mindtickle.storage.pb.tickleDb.GetUpdateTableStatusResponse")
	proto.RegisterType((*SetTTLRequest)(nil), "com.mindtickle.storage.pb.tickleDb.SetTTLRequest")
	proto.RegisterType((*TTLConfig)(nil), "com.mindtickle.storage.pb.tickleDb.TTLConfig")
	proto.RegisterType((*SetTTLResponse)(nil), "com.mindtickle.storage.pb.tickleDb.SetTTLResponse")
	proto.RegisterType((*Node)(nil), "com.mindtickle.storage.pb.tickleDb.Node")
	proto.RegisterType((*RegisterNamespaceOnNodeRequest)(nil), "com.mindtickle.storage.pb.tickleDb.RegisterNamespaceOnNodeRequest")
	proto.RegisterType((*InitNamespaceOnTrackRequest)(nil), "com.mindtickle.storage.pb.tickleDb.InitNamespaceOnTrackRequest")
	proto.RegisterType((*RegisterNamespaceOnNodeResponse)(nil), "com.mindtickle.storage.pb.tickleDb.RegisterNamespaceOnNodeResponse")
	proto.RegisterType((*InitNamespaceOnTrackResponse)(nil), "com.mindtickle.storage.pb.tickleDb.InitNamespaceOnTrackResponse")
	proto.RegisterType((*DeleteNamespaceRouteRequest)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteNamespaceRouteRequest")
	proto.RegisterType((*DeleteNamespaceRouteResponse)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteNamespaceRouteResponse")
	proto.RegisterType((*ListNamespaceRoutesRequest)(nil), "com.mindtickle.storage.pb.tickleDb.ListNamespaceRoutesRequest")
	proto.RegisterType((*ListNamespaceRoutesResponse)(nil), "com.mindtickle.storage.pb.tickleDb.ListNamespaceRoutesResponse")
	proto.RegisterType((*ListNamespaceRoutesResponse_Route)(nil), "com.mindtickle.storage.pb.tickleDb.ListNamespaceRoutesResponse.Route")
	proto.RegisterType((*UpdateTableRequest)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateTableRequest")
	proto.RegisterType((*UpdateTableResponse)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateTableResponse")
	proto.RegisterType((*DeleteTableRequest)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteTableRequest")
	proto.RegisterType((*DeleteTableResponse)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteTableResponse")
	proto.RegisterType((*CreateTableRequest)(nil), "com.mindtickle.storage.pb.tickleDb.CreateTableRequest")
	proto.RegisterType((*CreateTableResponse)(nil), "com.mindtickle.storage.pb.tickleDb.CreateTableResponse")
	proto.RegisterType((*Table)(nil), "com.mindtickle.storage.pb.tickleDb.Table")
	proto.RegisterType((*PrimaryKey)(nil), "com.mindtickle.storage.pb.tickleDb.PrimaryKey")
	proto.RegisterType((*GetCdcSourceInfoRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetCdcSourceInfoRequest")
	proto.RegisterType((*GetCdcSourceInfoResponse)(nil), "com.mindtickle.storage.pb.tickleDb.GetCdcSourceInfoResponse")
	proto.RegisterType((*GetTableInfoRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetTableInfoRequest")
	proto.RegisterType((*GetCdcSourceIdRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetCdcSourceIdRequest")
	proto.RegisterType((*GetCdcSourceIdResponse)(nil), "com.mindtickle.storage.pb.tickleDb.GetCdcSourceIdResponse")
	proto.RegisterType((*IndexField)(nil), "com.mindtickle.storage.pb.tickleDb.IndexField")
	proto.RegisterType((*Field)(nil), "com.mindtickle.storage.pb.tickleDb.Field")
	proto.RegisterType((*Collection)(nil), "com.mindtickle.storage.pb.tickleDb.Collection")
	proto.RegisterType((*RelationshipCollection)(nil), "com.mindtickle.storage.pb.tickleDb.RelationshipCollection")
	proto.RegisterType((*CreateCollectionRequest)(nil), "com.mindtickle.storage.pb.tickleDb.CreateCollectionRequest")
	proto.RegisterType((*CreateCollectionResponse)(nil), "com.mindtickle.storage.pb.tickleDb.CreateCollectionResponse")
	proto.RegisterType((*GetCollectionIDResponse)(nil), "com.mindtickle.storage.pb.tickleDb.GetCollectionIDResponse")
	proto.RegisterType((*UpdateCollectionRequest)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateCollectionRequest")
	proto.RegisterType((*DropIndex)(nil), "com.mindtickle.storage.pb.tickleDb.DropIndex")
	proto.RegisterType((*AddIndex)(nil), "com.mindtickle.storage.pb.tickleDb.AddIndex")
	proto.RegisterType((*AddField)(nil), "com.mindtickle.storage.pb.tickleDb.AddField")
	proto.RegisterType((*DeleteField)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteField")
	proto.RegisterType((*UpdateField)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateField")
	proto.RegisterType((*UpdateCollectionResponse)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateCollectionResponse")
	proto.RegisterType((*GetUpdateCollectionStatusRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetUpdateCollectionStatusRequest")
	proto.RegisterType((*GetUpdateCollectionStatusResponse)(nil), "com.mindtickle.storage.pb.tickleDb.GetUpdateCollectionStatusResponse")
	proto.RegisterType((*DeleteCollectionRequest)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteCollectionRequest")
	proto.RegisterType((*DeleteCollectionResponse)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteCollectionResponse")
	proto.RegisterType((*RestoreCollectionRequest)(nil), "com.mindtickle.storage.pb.tickleDb.RestoreCollectionRequest")
	proto.RegisterType((*GetCollectionRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetCollectionRequest")
	proto.RegisterType((*RestoreCollectionResponse)(nil), "com.mindtickle.storage.pb.tickleDb.RestoreCollectionResponse")
	proto.RegisterType((*GetCollectionIDRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetCollectionIDRequest")
	proto.RegisterType((*ListCollectionsRequest)(nil), "com.mindtickle.storage.pb.tickleDb.ListCollectionsRequest")
	proto.RegisterType((*ListCollectionsResponse)(nil), "com.mindtickle.storage.pb.tickleDb.ListCollectionsResponse")
	proto.RegisterType((*CreateRelationshipCollectionRequest)(nil), "com.mindtickle.storage.pb.tickleDb.CreateRelationshipCollectionRequest")
	proto.RegisterType((*UpdateRelationshipCollectionRequest)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateRelationshipCollectionRequest")
	proto.RegisterType((*DeleteRelationshipCollectionRequest)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteRelationshipCollectionRequest")
	proto.RegisterType((*GetRelationshipCollectionRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetRelationshipCollectionRequest")
	proto.RegisterType((*GetRelationshipCollectionIDRequest)(nil), "com.mindtickle.storage.pb.tickleDb.GetRelationshipCollectionIDRequest")
	proto.RegisterType((*CreateRelationshipCollectionResponse)(nil), "com.mindtickle.storage.pb.tickleDb.CreateRelationshipCollectionResponse")
	proto.RegisterType((*UpdateRelationshipCollectionResponse)(nil), "com.mindtickle.storage.pb.tickleDb.UpdateRelationshipCollectionResponse")
	proto.RegisterType((*DeleteRelationshipCollectionResponse)(nil), "com.mindtickle.storage.pb.tickleDb.DeleteRelationshipCollectionResponse")
	proto.RegisterType((*GetRelationshipCollectionIDResponse)(nil), "com.mindtickle.storage.pb.tickleDb.GetRelationshipCollectionIDResponse")
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.Role", Role_name, Role_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.State", State_name, State_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.SchemaType", SchemaType_name, SchemaType_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.PartitionStrategy", PartitionStrategy_name, PartitionStrategy_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.Status", Status_name, Status_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.DeleteTableRequest_TenantIdAll", DeleteTableRequest_TenantIdAll_name, DeleteTableRequest_TenantIdAll_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.Field_DataType", Field_DataType_name, Field_DataType_value)
	proto.RegisterEnum("com.mindtickle.storage.pb.tickleDb.RelationshipCollection_DeleteOn", RelationshipCollection_DeleteOn_name, RelationshipCollection_DeleteOn_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StoreManager service

type StoreManagerClient interface {
	// * This method creates the collection
	// Two types of schema is provided
	// Flexible - The application only has to describe constrainst over the fields which are important
	// Strict - The application has to define all the fields in a document. If an extra field is present in the doc it will be rejected
	// application will have the option to set the TTL value for all the documents. Once expired time is achieved, doc will be deleted
	// application has to provide fields which needs to be indexed. Queries will be only be supported on that.
	// In response the method will return the id of the collection. This id along with the tenant id is required for all
	// future document related queries
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error)
	// * This method updates the collection.
	// collection id and version is the only required field
	// all other fields are optional.
	UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*UpdateCollectionResponse, error)
	// * This method deletes the collection. Application has to provide collection id and tenant id.
	// If only collection id is provided then collection for all tenants would be deleted.
	// One thing to note is that it will be soft delete. There will be a buffer period after which data will be hard deleted.
	// In response the api will return the success flag
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error)
	// * This method restores the collection which was deleted earlier. Collection id is required along with tenant id.
	// If only collection id is provided then collection for all tenants would be deleted.
	// One thing to note is that the collection can only be restored if and only if the buffer period hasn't ended
	// In response the api will return the success flag
	RestoreCollection(ctx context.Context, in *RestoreCollectionRequest, opts ...grpc.CallOption) (*RestoreCollectionResponse, error)
	// * all the requests related to docs are driven via collection id and tenant id.
	// This api will provide the required collection id based on env, project, collection name and version.
	// All are required feilds. Every application has to maintain collection name and the intended version to perform document related operations.
	// In response the api will return the collection id
	GetCollectionID(ctx context.Context, in *GetCollectionIDRequest, opts ...grpc.CallOption) (*GetCollectionIDResponse, error)
	// *This method returns all the schema information of the collection based on the provided collection id.
	// In response complete schema of the collection will be returned
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*Collection, error)
	// * this method lists all the collection.
	// env is the required field.
	// project and collection name is optional fields. This will act as a filter if provided
	// In response the api will return all the associated collection ids.
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	GetUpdateCollectionStatus(ctx context.Context, in *GetUpdateCollectionStatusRequest, opts ...grpc.CallOption) (*GetUpdateCollectionStatusResponse, error)
	// *
	// This API creates a Table based on given parameters. Please refer to CreateTableRequest doc to know more.
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	// *
	// This API returns the CdcSourceId which represents a collection in DocStore and a table in RowStore respectively.
	GetCdcSourceId(ctx context.Context, in *GetCdcSourceIdRequest, opts ...grpc.CallOption) (*GetCdcSourceIdResponse, error)
	// *
	// This API returns the meta information for a cdc source, which can be either a Table(RowStore) or a Collection((DocStore)
	GetCdcSourceInfo(ctx context.Context, in *GetCdcSourceInfoRequest, opts ...grpc.CallOption) (*GetCdcSourceInfoResponse, error)
	// *
	// This API returns Table(RowStore) info
	GetTableInfo(ctx context.Context, in *GetTableInfoRequest, opts ...grpc.CallOption) (*Table, error)
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error)
	UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error)
	GetUpdateTableStatus(ctx context.Context, in *GetUpdateTableStatusRequest, opts ...grpc.CallOption) (*GetUpdateTableStatusResponse, error)
	// *
	// This API creates all tables of a given namespace on a given node. Note it does not change the routing
	// Before hitting this api, storage team will create db in that host and will change config on heimdall
	RegisterNamespaceOnNode(ctx context.Context, in *RegisterNamespaceOnNodeRequest, opts ...grpc.CallOption) (*RegisterNamespaceOnNodeResponse, error)
	InitNamespaceOnTrack(ctx context.Context, in *InitNamespaceOnTrackRequest, opts ...grpc.CallOption) (*InitNamespaceOnTrackResponse, error)
	DeleteNamespaceRoute(ctx context.Context, in *DeleteNamespaceRouteRequest, opts ...grpc.CallOption) (*DeleteNamespaceRouteResponse, error)
	ListNamespaceRoutes(ctx context.Context, in *ListNamespaceRoutesRequest, opts ...grpc.CallOption) (*ListNamespaceRoutesResponse, error)
	// *
	// Allows setting Ttl for a table in seconds granularity. Request is identified at (env+namespace+table_name).
	// Minimum ttl is 14 days (12,09,600 secs)
	// Only this API can be used to create/update/delete ttl for a table.
	// Whenever ttl is enabled, ttl_in_sec must be provided. As a consequence, this API does not maintain historical state
	// of ttl_in_sec value once ttl is disabled.
	SetTTL(ctx context.Context, in *SetTTLRequest, opts ...grpc.CallOption) (*SetTTLResponse, error)
	// this API returns cluster topology as a set of node along with their status. Client can get topology for a namespace
	// , (and/or) tenant, OR cluster name. Thus, valid combinations are namespace, namespace+tenant, tenant, cluster_name.
	GetClusterTopologies(ctx context.Context, in *GetClusterTopologiesRequest, opts ...grpc.CallOption) (*GetClusterTopologiesResponse, error)
}

type storeManagerClient struct {
	cc *grpc.ClientConn
}

func NewStoreManagerClient(cc *grpc.ClientConn) StoreManagerClient {
	return &storeManagerClient{cc}
}

func (c *storeManagerClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error) {
	out := new(CreateCollectionResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/CreateCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*UpdateCollectionResponse, error) {
	out := new(UpdateCollectionResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/UpdateCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error) {
	out := new(DeleteCollectionResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/DeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) RestoreCollection(ctx context.Context, in *RestoreCollectionRequest, opts ...grpc.CallOption) (*RestoreCollectionResponse, error) {
	out := new(RestoreCollectionResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/RestoreCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) GetCollectionID(ctx context.Context, in *GetCollectionIDRequest, opts ...grpc.CallOption) (*GetCollectionIDResponse, error) {
	out := new(GetCollectionIDResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetCollectionID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	out := new(ListCollectionsResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/ListCollections", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) GetUpdateCollectionStatus(ctx context.Context, in *GetUpdateCollectionStatusRequest, opts ...grpc.CallOption) (*GetUpdateCollectionStatusResponse, error) {
	out := new(GetUpdateCollectionStatusResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetUpdateCollectionStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/CreateTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) GetCdcSourceId(ctx context.Context, in *GetCdcSourceIdRequest, opts ...grpc.CallOption) (*GetCdcSourceIdResponse, error) {
	out := new(GetCdcSourceIdResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetCdcSourceId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) GetCdcSourceInfo(ctx context.Context, in *GetCdcSourceInfoRequest, opts ...grpc.CallOption) (*GetCdcSourceInfoResponse, error) {
	out := new(GetCdcSourceInfoResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetCdcSourceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) GetTableInfo(ctx context.Context, in *GetTableInfoRequest, opts ...grpc.CallOption) (*Table, error) {
	out := new(Table)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetTableInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error) {
	out := new(DeleteTableResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/DeleteTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error) {
	out := new(UpdateTableResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/UpdateTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) GetUpdateTableStatus(ctx context.Context, in *GetUpdateTableStatusRequest, opts ...grpc.CallOption) (*GetUpdateTableStatusResponse, error) {
	out := new(GetUpdateTableStatusResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetUpdateTableStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) RegisterNamespaceOnNode(ctx context.Context, in *RegisterNamespaceOnNodeRequest, opts ...grpc.CallOption) (*RegisterNamespaceOnNodeResponse, error) {
	out := new(RegisterNamespaceOnNodeResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/RegisterNamespaceOnNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) InitNamespaceOnTrack(ctx context.Context, in *InitNamespaceOnTrackRequest, opts ...grpc.CallOption) (*InitNamespaceOnTrackResponse, error) {
	out := new(InitNamespaceOnTrackResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/InitNamespaceOnTrack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) DeleteNamespaceRoute(ctx context.Context, in *DeleteNamespaceRouteRequest, opts ...grpc.CallOption) (*DeleteNamespaceRouteResponse, error) {
	out := new(DeleteNamespaceRouteResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/DeleteNamespaceRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) ListNamespaceRoutes(ctx context.Context, in *ListNamespaceRoutesRequest, opts ...grpc.CallOption) (*ListNamespaceRoutesResponse, error) {
	out := new(ListNamespaceRoutesResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/ListNamespaceRoutes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) SetTTL(ctx context.Context, in *SetTTLRequest, opts ...grpc.CallOption) (*SetTTLResponse, error) {
	out := new(SetTTLResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/SetTTL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) GetClusterTopologies(ctx context.Context, in *GetClusterTopologiesRequest, opts ...grpc.CallOption) (*GetClusterTopologiesResponse, error) {
	out := new(GetClusterTopologiesResponse)
	err := grpc.Invoke(ctx, "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetClusterTopologies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StoreManager service

type StoreManagerServer interface {
	// * This method creates the collection
	// Two types of schema is provided
	// Flexible - The application only has to describe constrainst over the fields which are important
	// Strict - The application has to define all the fields in a document. If an extra field is present in the doc it will be rejected
	// application will have the option to set the TTL value for all the documents. Once expired time is achieved, doc will be deleted
	// application has to provide fields which needs to be indexed. Queries will be only be supported on that.
	// In response the method will return the id of the collection. This id along with the tenant id is required for all
	// future document related queries
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	// * This method updates the collection.
	// collection id and version is the only required field
	// all other fields are optional.
	UpdateCollection(context.Context, *UpdateCollectionRequest) (*UpdateCollectionResponse, error)
	// * This method deletes the collection. Application has to provide collection id and tenant id.
	// If only collection id is provided then collection for all tenants would be deleted.
	// One thing to note is that it will be soft delete. There will be a buffer period after which data will be hard deleted.
	// In response the api will return the success flag
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error)
	// * This method restores the collection which was deleted earlier. Collection id is required along with tenant id.
	// If only collection id is provided then collection for all tenants would be deleted.
	// One thing to note is that the collection can only be restored if and only if the buffer period hasn't ended
	// In response the api will return the success flag
	RestoreCollection(context.Context, *RestoreCollectionRequest) (*RestoreCollectionResponse, error)
	// * all the requests related to docs are driven via collection id and tenant id.
	// This api will provide the required collection id based on env, project, collection name and version.
	// All are required feilds. Every application has to maintain collection name and the intended version to perform document related operations.
	// In response the api will return the collection id
	GetCollectionID(context.Context, *GetCollectionIDRequest) (*GetCollectionIDResponse, error)
	// *This method returns all the schema information of the collection based on the provided collection id.
	// In response complete schema of the collection will be returned
	GetCollection(context.Context, *GetCollectionRequest) (*Collection, error)
	// * this method lists all the collection.
	// env is the required field.
	// project and collection name is optional fields. This will act as a filter if provided
	// In response the api will return all the associated collection ids.
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	GetUpdateCollectionStatus(context.Context, *GetUpdateCollectionStatusRequest) (*GetUpdateCollectionStatusResponse, error)
	// *
	// This API creates a Table based on given parameters. Please refer to CreateTableRequest doc to know more.
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	// *
	// This API returns the CdcSourceId which represents a collection in DocStore and a table in RowStore respectively.
	GetCdcSourceId(context.Context, *GetCdcSourceIdRequest) (*GetCdcSourceIdResponse, error)
	// *
	// This API returns the meta information for a cdc source, which can be either a Table(RowStore) or a Collection((DocStore)
	GetCdcSourceInfo(context.Context, *GetCdcSourceInfoRequest) (*GetCdcSourceInfoResponse, error)
	// *
	// This API returns Table(RowStore) info
	GetTableInfo(context.Context, *GetTableInfoRequest) (*Table, error)
	DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error)
	UpdateTable(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error)
	GetUpdateTableStatus(context.Context, *GetUpdateTableStatusRequest) (*GetUpdateTableStatusResponse, error)
	// *
	// This API creates all tables of a given namespace on a given node. Note it does not change the routing
	// Before hitting this api, storage team will create db in that host and will change config on heimdall
	RegisterNamespaceOnNode(context.Context, *RegisterNamespaceOnNodeRequest) (*RegisterNamespaceOnNodeResponse, error)
	InitNamespaceOnTrack(context.Context, *InitNamespaceOnTrackRequest) (*InitNamespaceOnTrackResponse, error)
	DeleteNamespaceRoute(context.Context, *DeleteNamespaceRouteRequest) (*DeleteNamespaceRouteResponse, error)
	ListNamespaceRoutes(context.Context, *ListNamespaceRoutesRequest) (*ListNamespaceRoutesResponse, error)
	// *
	// Allows setting Ttl for a table in seconds granularity. Request is identified at (env+namespace+table_name).
	// Minimum ttl is 14 days (12,09,600 secs)
	// Only this API can be used to create/update/delete ttl for a table.
	// Whenever ttl is enabled, ttl_in_sec must be provided. As a consequence, this API does not maintain historical state
	// of ttl_in_sec value once ttl is disabled.
	SetTTL(context.Context, *SetTTLRequest) (*SetTTLResponse, error)
	// this API returns cluster topology as a set of node along with their status. Client can get topology for a namespace
	// , (and/or) tenant, OR cluster name. Thus, valid combinations are namespace, namespace+tenant, tenant, cluster_name.
	GetClusterTopologies(context.Context, *GetClusterTopologiesRequest) (*GetClusterTopologiesResponse, error)
}

func RegisterStoreManagerServer(s *grpc.Server, srv StoreManagerServer) {
	s.RegisterService(&_StoreManager_serviceDesc, srv)
}

func _StoreManager_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/UpdateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).UpdateCollection(ctx, req.(*UpdateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/DeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_RestoreCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).RestoreCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/RestoreCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).RestoreCollection(ctx, req.(*RestoreCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_GetCollectionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).GetCollectionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetCollectionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).GetCollectionID(ctx, req.(*GetCollectionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/ListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_GetUpdateCollectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateCollectionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).GetUpdateCollectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetUpdateCollectionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).GetUpdateCollectionStatus(ctx, req.(*GetUpdateCollectionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_GetCdcSourceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCdcSourceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).GetCdcSourceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetCdcSourceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).GetCdcSourceId(ctx, req.(*GetCdcSourceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_GetCdcSourceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCdcSourceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).GetCdcSourceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetCdcSourceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).GetCdcSourceInfo(ctx, req.(*GetCdcSourceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_GetTableInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).GetTableInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetTableInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).GetTableInfo(ctx, req.(*GetTableInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/UpdateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).UpdateTable(ctx, req.(*UpdateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_GetUpdateTableStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateTableStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).GetUpdateTableStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetUpdateTableStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).GetUpdateTableStatus(ctx, req.(*GetUpdateTableStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_RegisterNamespaceOnNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNamespaceOnNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).RegisterNamespaceOnNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/RegisterNamespaceOnNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).RegisterNamespaceOnNode(ctx, req.(*RegisterNamespaceOnNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_InitNamespaceOnTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitNamespaceOnTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).InitNamespaceOnTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/InitNamespaceOnTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).InitNamespaceOnTrack(ctx, req.(*InitNamespaceOnTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_DeleteNamespaceRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).DeleteNamespaceRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/DeleteNamespaceRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).DeleteNamespaceRoute(ctx, req.(*DeleteNamespaceRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_ListNamespaceRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).ListNamespaceRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/ListNamespaceRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).ListNamespaceRoutes(ctx, req.(*ListNamespaceRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_SetTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTTLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).SetTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/SetTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).SetTTL(ctx, req.(*SetTTLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_GetClusterTopologies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterTopologiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).GetClusterTopologies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mindtickle.storage.pb.tickleDb.StoreManager/GetClusterTopologies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).GetClusterTopologies(ctx, req.(*GetClusterTopologiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StoreManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.mindtickle.storage.pb.tickleDb.StoreManager",
	HandlerType: (*StoreManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _StoreManager_CreateCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _StoreManager_UpdateCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _StoreManager_DeleteCollection_Handler,
		},
		{
			MethodName: "RestoreCollection",
			Handler:    _StoreManager_RestoreCollection_Handler,
		},
		{
			MethodName: "GetCollectionID",
			Handler:    _StoreManager_GetCollectionID_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _StoreManager_GetCollection_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _StoreManager_ListCollections_Handler,
		},
		{
			MethodName: "GetUpdateCollectionStatus",
			Handler:    _StoreManager_GetUpdateCollectionStatus_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _StoreManager_CreateTable_Handler,
		},
		{
			MethodName: "GetCdcSourceId",
			Handler:    _StoreManager_GetCdcSourceId_Handler,
		},
		{
			MethodName: "GetCdcSourceInfo",
			Handler:    _StoreManager_GetCdcSourceInfo_Handler,
		},
		{
			MethodName: "GetTableInfo",
			Handler:    _StoreManager_GetTableInfo_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _StoreManager_DeleteTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _StoreManager_UpdateTable_Handler,
		},
		{
			MethodName: "GetUpdateTableStatus",
			Handler:    _StoreManager_GetUpdateTableStatus_Handler,
		},
		{
			MethodName: "RegisterNamespaceOnNode",
			Handler:    _StoreManager_RegisterNamespaceOnNode_Handler,
		},
		{
			MethodName: "InitNamespaceOnTrack",
			Handler:    _StoreManager_InitNamespaceOnTrack_Handler,
		},
		{
			MethodName: "DeleteNamespaceRoute",
			Handler:    _StoreManager_DeleteNamespaceRoute_Handler,
		},
		{
			MethodName: "ListNamespaceRoutes",
			Handler:    _StoreManager_ListNamespaceRoutes_Handler,
		},
		{
			MethodName: "SetTTL",
			Handler:    _StoreManager_SetTTL_Handler,
		},
		{
			MethodName: "GetClusterTopologies",
			Handler:    _StoreManager_GetClusterTopologies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store_manager.proto",
}

func init() { proto.RegisterFile("store_manager.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 3181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0xdb, 0x8f, 0x1b, 0x57,
	0x19, 0xf7, 0xf8, 0xee, 0xcf, 0x7b, 0xf1, 0x9e, 0x5c, 0xd6, 0xf1, 0x86, 0x5e, 0x26, 0x69, 0x49,
	0xb7, 0x65, 0x03, 0x4b, 0x69, 0x4b, 0x93, 0x36, 0xf8, 0x96, 0xac, 0x1b, 0x67, 0xbc, 0x8c, 0x67,
	0xdb, 0x86, 0x22, 0x4d, 0x67, 0x3d, 0x27, 0x9b, 0x21, 0xde, 0x19, 0x67, 0x66, 0x1c, 0x65, 0xcb,
	0x4b, 0x25, 0x1e, 0x10, 0x52, 0x11, 0x12, 0x42, 0x2a, 0x94, 0x57, 0x9e, 0x10, 0x6f, 0x3c, 0xf0,
	0xc4, 0x33, 0xff, 0x08, 0x88, 0x07, 0xde, 0x90, 0x10, 0xe2, 0x0d, 0x9d, 0xcb, 0x78, 0x2e, 0x1e,
	0x7b, 0xc7, 0xce, 0x06, 0xde, 0xe6, 0x9c, 0xe3, 0xef, 0x77, 0xbe, 0xf3, 0xdd, 0xcf, 0xc5, 0x70,
	0xce, 0x71, 0x2d, 0x1b, 0xab, 0xc7, 0x9a, 0xa9, 0x1d, 0x61, 0x7b, 0x67, 0x64, 0x5b, 0xae, 0x85,
	0xc4, 0x81, 0x75, 0xbc, 0x73, 0x6c, 0x98, 0xba, 0x6b, 0x0c, 0x1e, 0x0d, 0xf1, 0x0e, 0xf9, 0x8d,
	0x76, 0x84, 0x77, 0x46, 0x87, 0x3b, 0xac, 0xa7, 0x75, 0x28, 0xfe, 0x5c, 0x80, 0xad, 0x3b, 0xd8,
	0x6d, 0x0e, 0xc7, 0x8e, 0x8b, 0x6d, 0xc5, 0x1a, 0x59, 0x43, 0xeb, 0xc8, 0xc0, 0x8e, 0x8c, 0x1f,
	0x8f, 0xb1, 0xe3, 0xa2, 0xcb, 0x50, 0x32, 0xb5, 0x63, 0xec, 0x8c, 0xb4, 0x01, 0xae, 0x0a, 0x2f,
	0x09, 0xd7, 0x4a, 0xb2, 0xdf, 0x81, 0xb6, 0xa0, 0xe4, 0x62, 0x53, 0x33, 0x5d, 0xd5, 0xd0, 0xab,
	0x69, 0x3a, 0x5a, 0x64, 0x1d, 0x1d, 0x1d, 0xbd, 0x0c, 0x2b, 0x03, 0x06, 0xab, 0x12, 0x8a, 0x6a,
	0x86, 0x8e, 0x97, 0x79, 0x9f, 0xa4, 0x1d, 0x63, 0x54, 0x81, 0x0c, 0x36, 0x9f, 0x54, 0xb3, 0x74,
	0x84, 0x7c, 0x8a, 0x18, 0x2e, 0xc7, 0xb3, 0xe3, 0x8c, 0x2c, 0xd3, 0xc1, 0xa8, 0x0d, 0x05, 0x0e,
	0x50, 0x15, 0x5e, 0xca, 0x5c, 0x2b, 0xef, 0xbe, 0xbe, 0x73, 0xfa, 0x2a, 0x77, 0x38, 0x9e, 0xec,
	0xd1, 0x8a, 0xff, 0x16, 0xa0, 0xc0, 0x3b, 0x11, 0x82, 0x2c, 0xe5, 0x8f, 0xad, 0x8e, 0x7e, 0xa3,
	0x9b, 0x90, 0x35, 0x2d, 0x1d, 0x57, 0xd3, 0x74, 0x8e, 0x6b, 0x49, 0xe6, 0x90, 0x2c, 0x1d, 0xcb,
	0x94, 0x0a, 0x7d, 0x02, 0xa0, 0xb9, 0xae, 0x6d, 0x1c, 0x8e, 0x5d, 0xec, 0x54, 0x33, 0x14, 0xe3,
	0xc6, 0x02, 0x7c, 0xee, 0xd4, 0x27, 0xd4, 0x6d, 0xd3, 0xb5, 0x4f, 0xe4, 0x00, 0x5c, 0xed, 0x3d,
	0x58, 0x8f, 0x0c, 0x13, 0x31, 0x3e, 0xc2, 0x27, 0x7c, 0x01, 0xe4, 0x13, 0x9d, 0x87, 0xdc, 0x13,
	0x6d, 0x38, 0xc6, 0x5c, 0x29, 0xac, 0xf1, 0x6e, 0xfa, 0x1d, 0x41, 0x94, 0xa8, 0xbe, 0x0f, 0x46,
	0xba, 0xe6, 0x62, 0x45, 0x3b, 0x1c, 0xe2, 0xbe, 0xab, 0xb9, 0xe3, 0x89, 0xbe, 0xaf, 0xc3, 0xf9,
	0x31, 0x1d, 0x53, 0x5d, 0x32, 0xa8, 0xba, 0x9a, 0xf3, 0x88, 0x28, 0x97, 0x61, 0x6f, 0x8c, 0x7d,
	0x3a, 0x45, 0x73, 0x1e, 0x75, 0x74, 0x71, 0x9f, 0x2a, 0x2c, 0x06, 0x8f, 0x2b, 0xec, 0x22, 0xe4,
	0x1d, 0xda, 0xc3, 0x21, 0x78, 0x0b, 0x55, 0xa1, 0x70, 0x8c, 0x1d, 0x47, 0x3b, 0xf2, 0x78, 0xf4,
	0x9a, 0xe2, 0x1f, 0x04, 0x58, 0xed, 0x63, 0x57, 0x51, 0xba, 0x1e, 0x53, 0xdc, 0x4c, 0x84, 0x89,
	0x99, 0x84, 0xcd, 0x32, 0x1d, 0x35, 0xcb, 0xaf, 0x01, 0x30, 0xee, 0x03, 0x76, 0x57, 0xa2, 0x3d,
	0xd4, 0xea, 0xba, 0x00, 0xae, 0x3b, 0x54, 0x07, 0x96, 0xf9, 0xc0, 0x38, 0xa2, 0xc6, 0x57, 0xde,
	0xfd, 0x46, 0x12, 0xf5, 0x28, 0x4a, 0xb7, 0x49, 0x89, 0xe4, 0x92, 0xeb, 0x0e, 0xd9, 0xa7, 0xd8,
	0x84, 0xd2, 0xa4, 0x9f, 0xac, 0x0a, 0x9b, 0x64, 0x22, 0x26, 0xb1, 0xa2, 0xec, 0x35, 0xd1, 0x65,
	0x36, 0xa9, 0x61, 0xaa, 0x0e, 0x1e, 0x50, 0x96, 0xb3, 0x72, 0xd1, 0x75, 0x87, 0x1d, 0xb3, 0x8f,
	0x07, 0x62, 0x05, 0xd6, 0xbc, 0x25, 0x33, 0xb9, 0x89, 0xbf, 0x11, 0x20, 0x4b, 0x4c, 0x8a, 0x98,
	0xe7, 0x43, 0xcb, 0x71, 0x3d, 0xf3, 0x24, 0xdf, 0xe8, 0x16, 0xe4, 0x88, 0x18, 0xd9, 0xd2, 0xd7,
	0x76, 0x5f, 0x4b, 0xc2, 0x3c, 0xd1, 0x0b, 0x96, 0x19, 0x1d, 0xb1, 0x6f, 0xdb, 0x1a, 0x32, 0xd9,
	0xac, 0x25, 0xb3, 0x6f, 0xd9, 0x1a, 0x62, 0x99, 0x52, 0x89, 0x5f, 0x0a, 0xf0, 0x82, 0x8c, 0x8f,
	0x0c, 0xcf, 0x8f, 0xa9, 0xd4, 0x7b, 0x26, 0xf5, 0x80, 0x25, 0x55, 0xd6, 0x86, 0x12, 0x71, 0x1d,
	0xd5, 0x30, 0x1f, 0x58, 0x94, 0xab, 0x45, 0xbc, 0xae, 0x48, 0x48, 0x3b, 0xe6, 0x03, 0x4b, 0xfc,
	0x95, 0x00, 0x5b, 0x1d, 0xd3, 0x70, 0x03, 0x5c, 0x29, 0xb6, 0x36, 0x78, 0xf4, 0x7f, 0x66, 0xeb,
	0x65, 0x78, 0x71, 0xa6, 0xbc, 0xb8, 0xbe, 0x5f, 0x80, 0xcb, 0xf1, 0x8c, 0xf3, 0xf1, 0x77, 0x60,
	0xab, 0x85, 0x87, 0xd8, 0xc5, 0x93, 0x5f, 0xc8, 0xd6, 0xd8, 0x9d, 0xc8, 0xfb, 0x12, 0x14, 0x6d,
	0xd2, 0xf6, 0x7d, 0xb5, 0x40, 0xdb, 0x1d, 0x9d, 0x20, 0xc7, 0x53, 0x72, 0xe4, 0xcb, 0x50, 0xeb,
	0x1a, 0x8e, 0x1b, 0x1e, 0xf5, 0x02, 0x82, 0xf8, 0x77, 0x01, 0xb6, 0x62, 0x87, 0x19, 0x75, 0xed,
	0x2f, 0x02, 0xe4, 0x68, 0xd7, 0x1c, 0x16, 0xe6, 0xe7, 0x89, 0x2a, 0x14, 0x74, 0xca, 0x9f, 0x4e,
	0x25, 0x5c, 0x94, 0xbd, 0x26, 0xf1, 0xe3, 0x81, 0x8d, 0x35, 0x17, 0xeb, 0xaa, 0xe6, 0x52, 0x47,
	0xcd, 0xc8, 0x25, 0xde, 0x53, 0x77, 0xc9, 0x30, 0x8b, 0x47, 0x74, 0x38, 0xc7, 0x86, 0x79, 0x4f,
	0x7d, 0xa2, 0xeb, 0xfc, 0x0c, 0x5d, 0x17, 0x22, 0xba, 0x16, 0xbf, 0xc8, 0x02, 0x0a, 0xc4, 0xb1,
	0xe7, 0x14, 0x7c, 0xee, 0x01, 0x68, 0xba, 0xae, 0x0e, 0xac, 0xe1, 0xf8, 0xd8, 0xe4, 0xc1, 0xe7,
	0x8d, 0x24, 0x26, 0x55, 0xd7, 0xf5, 0xdb, 0x06, 0x1e, 0xea, 0x7b, 0x29, 0xb9, 0xa4, 0xe9, 0x7a,
	0x93, 0x02, 0xa0, 0x0f, 0x61, 0x95, 0xc7, 0x6b, 0x8e, 0x98, 0xa3, 0x88, 0xd7, 0x93, 0x20, 0xb2,
	0xc5, 0x7a, 0xa0, 0x2b, 0x0c, 0x87, 0xe3, 0xca, 0x50, 0xd6, 0x6d, 0x6b, 0xe4, 0xa1, 0xe6, 0x93,
	0xa3, 0x32, 0x5b, 0xf3, 0x50, 0x81, 0xa0, 0x70, 0xcc, 0xbb, 0x40, 0x18, 0x57, 0x0d, 0x53, 0xc7,
	0x4f, 0xa9, 0xf8, 0x93, 0xaf, 0xbc, 0x43, 0x68, 0xf6, 0x52, 0x72, 0x51, 0xe3, 0xdf, 0x48, 0x02,
	0x0a, 0xcd, 0xd1, 0x8a, 0xc9, 0x83, 0x78, 0xcb, 0xb6, 0x46, 0x1e, 0x5c, 0x49, 0xf7, 0x1a, 0x8d,
	0x75, 0x58, 0x65, 0xf2, 0xf0, 0x0c, 0xff, 0x36, 0x9c, 0x0b, 0x59, 0x03, 0xcf, 0x67, 0x0b, 0x27,
	0xc8, 0x7f, 0x09, 0x80, 0x98, 0x4c, 0x9e, 0xa7, 0x59, 0x9d, 0x83, 0x2c, 0x75, 0x2e, 0x5a, 0x4a,
	0xed, 0xa5, 0xe4, 0x0c, 0xf1, 0xac, 0xfb, 0x90, 0x73, 0x55, 0x6d, 0x38, 0xa4, 0x46, 0xb1, 0xb6,
	0xdb, 0x48, 0xae, 0xbe, 0x20, 0xab, 0x3b, 0x0a, 0xf7, 0xd4, 0xfa, 0x70, 0xb8, 0x97, 0x92, 0xb3,
	0x6e, 0x7d, 0x38, 0x14, 0x2f, 0x42, 0x39, 0xd0, 0x8d, 0x0a, 0x90, 0xa9, 0x77, 0xbb, 0x95, 0x54,
	0xa3, 0x08, 0x79, 0xe6, 0xd8, 0xe2, 0x05, 0x38, 0x17, 0xc2, 0xe2, 0xd1, 0xe6, 0x00, 0x50, 0x93,
	0x7a, 0x70, 0x48, 0x1a, 0xb7, 0x20, 0x47, 0xd7, 0x42, 0xe5, 0x51, 0x4e, 0x96, 0xd0, 0x18, 0x00,
	0xa3, 0x13, 0xdf, 0x84, 0x73, 0x21, 0x58, 0xae, 0xad, 0xb0, 0xd4, 0x84, 0x88, 0xd4, 0xc4, 0xff,
	0x64, 0x21, 0x47, 0x09, 0x4e, 0xf9, 0x21, 0x3a, 0x0f, 0x19, 0xd7, 0x1d, 0x52, 0xad, 0x64, 0x1a,
	0xe9, 0xaa, 0x20, 0x93, 0x26, 0x89, 0x5c, 0x4f, 0xb0, 0xed, 0x18, 0x96, 0x49, 0x15, 0x92, 0x91,
	0xbd, 0x66, 0x58, 0x97, 0xd9, 0xa8, 0x2e, 0xb9, 0xee, 0x73, 0xbe, 0xee, 0x9b, 0x50, 0x60, 0x9e,
	0xe6, 0x54, 0xf3, 0xb4, 0x5c, 0x4c, 0x24, 0x01, 0xea, 0x64, 0xb2, 0x47, 0x89, 0x7a, 0x50, 0x1e,
	0xd9, 0xc6, 0xb1, 0x66, 0x9f, 0xa8, 0xa4, 0x1c, 0x64, 0x1e, 0xb6, 0x93, 0x04, 0x68, 0x9f, 0x91,
	0xdd, 0xc5, 0x27, 0x32, 0x8c, 0x26, 0xdf, 0xa8, 0x0f, 0xab, 0xd4, 0xbd, 0x54, 0x8f, 0xb7, 0x22,
	0xe5, 0x2d, 0x11, 0x24, 0xf5, 0x2a, 0xc6, 0xe0, 0x0a, 0x05, 0x69, 0x72, 0x2e, 0x0f, 0x60, 0x6d,
	0x6c, 0x1a, 0x8f, 0xc7, 0x78, 0x82, 0x5a, 0x5a, 0x0a, 0x75, 0x95, 0xa1, 0x78, 0xb0, 0x3a, 0xa0,
	0x91, 0x66, 0xbb, 0x86, 0x6b, 0x58, 0xa6, 0xea, 0xb8, 0xb6, 0xe6, 0xe2, 0xa3, 0x93, 0x2a, 0x50,
	0xc3, 0xff, 0x4e, 0x22, 0x19, 0x78, 0xd4, 0x7d, 0x4e, 0x2c, 0x6f, 0x8c, 0xa2, 0x5d, 0xe8, 0x0a,
	0xac, 0xfa, 0xb3, 0x10, 0x21, 0x97, 0xa9, 0x0e, 0x57, 0x26, 0x9d, 0x44, 0x6c, 0x57, 0x61, 0xd5,
	0x70, 0x7a, 0x63, 0xf7, 0xd0, 0x7a, 0x4a, 0x8d, 0xab, 0xba, 0x42, 0xd3, 0x5a, 0xb8, 0x53, 0x7c,
	0x15, 0xc0, 0x17, 0x3b, 0x31, 0x25, 0x4f, 0x1c, 0x64, 0x5f, 0x53, 0x9a, 0x68, 0x55, 0x3c, 0x82,
	0x4d, 0xb2, 0x23, 0xd2, 0x07, 0x7d, 0x6b, 0x6c, 0x0f, 0x68, 0x3d, 0xe1, 0x79, 0xcd, 0x16, 0x14,
	0x99, 0xd1, 0x7a, 0xf1, 0x67, 0x2f, 0x25, 0x17, 0x68, 0x4f, 0x47, 0x47, 0xaf, 0xc0, 0xea, 0xc0,
	0x1a, 0x0e, 0xf1, 0x80, 0xf2, 0xea, 0xe5, 0x5d, 0x12, 0xe8, 0xfd, 0xee, 0x8e, 0x4e, 0x1c, 0xd6,
	0xa1, 0xc0, 0xe2, 0x9f, 0x05, 0xa8, 0x4e, 0xcf, 0xc4, 0x1d, 0x69, 0x1f, 0xc0, 0x27, 0xe3, 0x5e,
	0x9a, 0x48, 0x63, 0xcd, 0x09, 0x15, 0xc9, 0x06, 0x3e, 0x06, 0xaa, 0x7b, 0x2e, 0x9f, 0x5e, 0xd0,
	0xe5, 0xf7, 0x52, 0xdc, 0xe9, 0x1b, 0x2b, 0x00, 0x3e, 0xab, 0xa2, 0x0e, 0xe7, 0xee, 0x60, 0x97,
	0xfe, 0x24, 0x28, 0xa4, 0x53, 0x3c, 0x9b, 0xfb, 0x62, 0x7a, 0x46, 0x1c, 0xce, 0x44, 0xab, 0x84,
	0x3f, 0x09, 0x70, 0x21, 0x24, 0x25, 0xdd, 0x9b, 0xe8, 0xc5, 0xe9, 0x89, 0x48, 0x8a, 0xf1, 0xa7,
	0x7a, 0x0d, 0xd6, 0x03, 0x1a, 0xa1, 0xbf, 0xf2, 0x74, 0xb2, 0xe6, 0x0f, 0x04, 0xb9, 0xca, 0xcc,
	0xe0, 0x6a, 0x2a, 0xa2, 0x04, 0x22, 0x51, 0x2e, 0x14, 0x89, 0x02, 0xfa, 0xbd, 0x06, 0x17, 0xa3,
	0x8c, 0x73, 0xe5, 0xae, 0x41, 0x7a, 0x92, 0xc1, 0xd2, 0x86, 0x2e, 0x7e, 0x00, 0xe0, 0x3b, 0x1a,
	0x11, 0xe0, 0x03, 0xf2, 0xa1, 0x8e, 0x34, 0xf7, 0x21, 0xdd, 0x11, 0x97, 0xe4, 0x12, 0xed, 0xd9,
	0xd7, 0xdc, 0x87, 0x64, 0x98, 0x05, 0x89, 0x60, 0x62, 0xa2, 0x3d, 0x34, 0xc4, 0xfe, 0x33, 0x03,
	0xb9, 0x08, 0x8e, 0xbf, 0x72, 0x8e, 0x43, 0x97, 0xdc, 0x83, 0x92, 0xae, 0xb9, 0x9a, 0xea, 0x9e,
	0x8c, 0xbc, 0x7d, 0xc9, 0x6e, 0xe2, 0x20, 0xb8, 0xd3, 0xd2, 0x5c, 0x4d, 0x39, 0x19, 0x61, 0xb9,
	0xa8, 0xf3, 0x2f, 0xf4, 0x4d, 0x38, 0x8f, 0xcd, 0xf1, 0xb1, 0x8a, 0x9f, 0x8e, 0xf0, 0x80, 0x14,
	0x89, 0x74, 0x13, 0xec, 0x54, 0xb3, 0x74, 0x05, 0x88, 0x8c, 0xb5, 0xf9, 0xd0, 0x87, 0x74, 0x04,
	0x49, 0xb0, 0x6a, 0x62, 0x87, 0xfc, 0x94, 0xb2, 0xe5, 0x54, 0x73, 0x8b, 0xc6, 0xe2, 0x15, 0x46,
	0x4f, 0x1b, 0x0e, 0xaa, 0x41, 0xd1, 0xc6, 0x8f, 0xc7, 0x86, 0x8d, 0x75, 0x1a, 0x8d, 0x8b, 0xf2,
	0xa4, 0x4d, 0xb6, 0x75, 0x8e, 0xf1, 0x19, 0xa6, 0x95, 0x4b, 0x46, 0xa6, 0xdf, 0x24, 0xba, 0xe8,
	0xf8, 0x81, 0x36, 0x1e, 0xba, 0x8c, 0xd7, 0x6a, 0x89, 0x45, 0x17, 0xde, 0x49, 0xb9, 0x44, 0xdb,
	0xb0, 0x71, 0x84, 0x4d, 0x6c, 0xb3, 0xba, 0xd7, 0x21, 0xcb, 0xb3, 0x69, 0x9c, 0x2b, 0xc9, 0xeb,
	0x93, 0x81, 0xba, 0xd3, 0x7e, 0x3a, 0xb2, 0xc5, 0x27, 0x50, 0xf4, 0x04, 0x83, 0x2e, 0xc1, 0x85,
	0x56, 0x5d, 0xa9, 0xab, 0xca, 0xfd, 0xfd, 0xb6, 0x7a, 0x20, 0xf5, 0xf7, 0xdb, 0xcd, 0xce, 0xed,
	0x4e, 0xbb, 0x55, 0x49, 0x21, 0x80, 0x7c, 0x5f, 0x91, 0x3b, 0xd2, 0x9d, 0x8a, 0x40, 0x32, 0x79,
	0x47, 0x52, 0x2a, 0x69, 0x54, 0x82, 0x5c, 0x47, 0x52, 0xde, 0x7a, 0xb3, 0x92, 0x41, 0x45, 0xc8,
	0x36, 0x7a, 0xbd, 0x6e, 0x25, 0x8b, 0xd6, 0xa1, 0xdc, 0x96, 0x0e, 0xee, 0xb5, 0xe5, 0xba, 0xd2,
	0xe9, 0x49, 0x95, 0x1c, 0x19, 0xfa, 0xa0, 0xdf, 0x93, 0x2a, 0x79, 0x02, 0xd2, 0xea, 0x1d, 0x34,
	0xba, 0xed, 0x4a, 0x41, 0xfc, 0x6b, 0x16, 0xc0, 0x77, 0xfc, 0xa8, 0x7d, 0xa1, 0xaf, 0xcf, 0x70,
	0x84, 0x38, 0x37, 0x20, 0x69, 0x97, 0x25, 0xd7, 0x68, 0xca, 0xcd, 0x86, 0x53, 0x6e, 0x0f, 0xca,
	0xce, 0xe0, 0x21, 0x3e, 0xe6, 0x16, 0xc4, 0x4a, 0x9e, 0x44, 0x21, 0xaa, 0x4f, 0xc9, 0xa8, 0xf5,
	0x80, 0x33, 0xf9, 0x26, 0x53, 0x8d, 0x6c, 0xeb, 0x47, 0x78, 0xe0, 0xf2, 0x28, 0xef, 0x35, 0x3d,
	0xef, 0x5c, 0xf1, 0xbd, 0xb3, 0x0e, 0x79, 0x6e, 0x32, 0x0b, 0xa7, 0x6f, 0x4e, 0x88, 0xbe, 0x0f,
	0x2c, 0x4f, 0x7a, 0xb6, 0x57, 0x58, 0x2a, 0x2b, 0x96, 0x8d, 0xc9, 0xb7, 0x43, 0xf2, 0x37, 0x4f,
	0xb5, 0x1c, 0x73, 0xc9, 0xfc, 0xcd, 0x40, 0x38, 0xe8, 0x54, 0x0a, 0x2c, 0xc5, 0xa4, 0xc0, 0xff,
	0x49, 0x36, 0x16, 0xbf, 0xca, 0xc3, 0x45, 0x19, 0x0f, 0x35, 0xd2, 0xe9, 0x3c, 0x34, 0x46, 0x01,
	0x93, 0xdb, 0x86, 0x0d, 0xc7, 0x1e, 0xa8, 0x31, 0x19, 0x50, 0x5e, 0x77, 0xec, 0x41, 0x33, 0x90,
	0x02, 0xd1, 0x1b, 0x80, 0x74, 0xec, 0xb8, 0x91, 0x1f, 0xb3, 0x48, 0x56, 0x21, 0x23, 0xa1, 0x5f,
	0x33, 0x63, 0xce, 0x4e, 0x8c, 0x39, 0x60, 0x26, 0xb9, 0xb0, 0x99, 0xbc, 0x0e, 0x1b, 0x76, 0x80,
	0x3b, 0x66, 0xe8, 0x6c, 0x3b, 0x5a, 0x09, 0x0e, 0x04, 0x23, 0x7e, 0xc1, 0xb7, 0xa9, 0x80, 0xa9,
	0x17, 0xc3, 0xa6, 0x3e, 0xa5, 0xd7, 0xd2, 0x19, 0xe8, 0xd5, 0x37, 0x61, 0x38, 0x2b, 0x13, 0x2e,
	0x3f, 0xbb, 0x09, 0x4f, 0x59, 0xdb, 0x4a, 0x62, 0x6b, 0x5b, 0x3d, 0xe3, 0xda, 0xef, 0x53, 0x28,
	0xb1, 0x83, 0x09, 0xd5, 0x32, 0xab, 0x6b, 0x14, 0xbc, 0x99, 0xe8, 0xe0, 0x2c, 0xd6, 0x42, 0xf9,
	0x46, 0xab, 0x67, 0xca, 0x45, 0x9d, 0x7f, 0x89, 0x77, 0xa1, 0xe8, 0xf5, 0xd2, 0x70, 0xdd, 0xee,
	0xb6, 0x95, 0xb6, 0xda, 0x93, 0x22, 0xe1, 0xba, 0x00, 0x99, 0xbe, 0xdc, 0xac, 0xa4, 0x49, 0xf0,
	0x6d, 0xb5, 0xfb, 0x4a, 0x25, 0x43, 0xf7, 0x5f, 0xd2, 0xfd, 0x4a, 0x96, 0x74, 0x49, 0x3d, 0xa9,
	0x5d, 0xc9, 0x89, 0x06, 0x6c, 0xb2, 0x1d, 0x91, 0x3f, 0xa7, 0x57, 0xa9, 0x48, 0xa1, 0x62, 0x2e,
	0xbd, 0x4c, 0x31, 0x17, 0x2c, 0xe5, 0xc4, 0x5b, 0x50, 0x9d, 0x9e, 0x8a, 0xd7, 0x16, 0x57, 0xa2,
	0x65, 0x28, 0x4b, 0x03, 0xa1, 0x22, 0x54, 0x7c, 0x9f, 0xd5, 0xb8, 0x7e, 0x57, 0x6b, 0x31, 0xfa,
	0xbf, 0x65, 0x60, 0xf3, 0xc0, 0x3b, 0xbe, 0x88, 0x2c, 0x36, 0x09, 0x80, 0x77, 0x34, 0x41, 0xed,
	0x96, 0x0b, 0x64, 0xd1, 0x43, 0x99, 0xa2, 0xc6, 0xbf, 0x91, 0x02, 0xfc, 0x2c, 0x85, 0xe3, 0x65,
	0x96, 0x3d, 0x92, 0x29, 0x8f, 0xfd, 0x26, 0x41, 0xe5, 0xe6, 0xc7, 0x50, 0xb3, 0xcb, 0x1e, 0xc9,
	0x94, 0x75, 0xbf, 0x19, 0x3e, 0x93, 0xc9, 0x9d, 0xe9, 0x99, 0x4c, 0xfe, 0xec, 0xcf, 0x64, 0xb6,
	0xa1, 0x34, 0xf9, 0xe9, 0x29, 0x75, 0xa9, 0x88, 0xa1, 0xe8, 0x31, 0x19, 0xf9, 0xa9, 0x10, 0x2d,
	0x61, 0xb7, 0xa0, 0x64, 0x38, 0x2a, 0x8b, 0x86, 0x54, 0xfb, 0x45, 0xb9, 0x68, 0x38, 0x07, 0xb4,
	0x7d, 0x5a, 0x7d, 0x7b, 0x97, 0x4e, 0xc3, 0x84, 0x79, 0x0b, 0x72, 0x4c, 0x37, 0x0b, 0x9c, 0x62,
	0xb0, 0x98, 0xc7, 0xe8, 0xc4, 0x37, 0xa0, 0x1c, 0xd0, 0xd5, 0x14, 0xdb, 0x42, 0x78, 0x85, 0x7f,
	0x14, 0xa0, 0x1c, 0x30, 0x98, 0x48, 0x81, 0x2d, 0x44, 0x0b, 0xec, 0x59, 0xf5, 0x70, 0x7a, 0x66,
	0x3d, 0x1c, 0xac, 0x5f, 0x33, 0x33, 0xea, 0xd7, 0xec, 0xbc, 0xfa, 0x35, 0x37, 0x5d, 0xbf, 0x8a,
	0x9f, 0x40, 0x75, 0xda, 0x55, 0xb9, 0xb3, 0xdf, 0x82, 0xcb, 0xfe, 0x69, 0xa6, 0xe7, 0xb2, 0x36,
	0x53, 0xbe, 0xef, 0xba, 0x97, 0xc6, 0xf1, 0xae, 0xde, 0xd1, 0xc5, 0x01, 0xbc, 0x34, 0xb9, 0x8d,
	0xf2, 0xc7, 0xc3, 0x57, 0x5c, 0xcf, 0x3c, 0xc9, 0x11, 0xbc, 0x3c, 0x67, 0x12, 0xbe, 0x94, 0x46,
	0xe8, 0xde, 0x6b, 0x6d, 0x77, 0x3b, 0xe9, 0x1d, 0xcd, 0xd8, 0xf1, 0xee, 0xc8, 0xc4, 0x4f, 0x60,
	0x93, 0x99, 0x43, 0x82, 0xa8, 0x96, 0x8e, 0x89, 0x6a, 0xa1, 0x63, 0xf7, 0x4c, 0xf8, 0xd8, 0x5d,
	0xac, 0x41, 0x75, 0x1a, 0x9c, 0x1f, 0xd2, 0xfd, 0x10, 0xaa, 0x32, 0xa6, 0x57, 0xca, 0xcf, 0x63,
	0xe6, 0x1b, 0x70, 0x3e, 0x14, 0xed, 0x17, 0x41, 0x16, 0xb7, 0xe0, 0x52, 0x0c, 0x6b, 0x9c, 0xef,
	0x9f, 0x0a, 0x6c, 0x8f, 0x1b, 0x4a, 0x24, 0xa1, 0xf3, 0xd6, 0x74, 0xa8, 0xbe, 0xf2, 0x0a, 0xb7,
	0x4c, 0xb8, 0x70, 0x8b, 0xd9, 0x9f, 0x64, 0x63, 0xf7, 0x27, 0x33, 0xb7, 0xdd, 0xe2, 0x31, 0x5c,
	0xec, 0x1a, 0xc1, 0xca, 0xd1, 0x79, 0x9e, 0x8c, 0x88, 0x2a, 0x6c, 0x4e, 0x4d, 0xc7, 0x0d, 0xf1,
	0x15, 0x58, 0x0b, 0x49, 0xd5, 0x3b, 0x60, 0x5a, 0x0d, 0x8a, 0xd5, 0xa1, 0xc7, 0x24, 0x96, 0xab,
	0x0d, 0x55, 0xea, 0xd5, 0x69, 0x76, 0x99, 0x42, 0x7b, 0xfa, 0xc6, 0x67, 0x58, 0xfc, 0x4a, 0x80,
	0x2b, 0x2c, 0xc7, 0xc7, 0x97, 0x33, 0xde, 0xea, 0x1c, 0xd8, 0x0c, 0xd5, 0xbc, 0x53, 0x75, 0xc6,
	0xbb, 0xcb, 0x97, 0x4c, 0xf2, 0x45, 0x3b, 0xb6, 0x5f, 0xfc, 0x49, 0x06, 0xae, 0x78, 0x89, 0x62,
	0x1e, 0x73, 0xd1, 0xd2, 0x7d, 0xa1, 0x02, 0xdd, 0xaf, 0x8f, 0x4b, 0x67, 0x55, 0x1f, 0xc3, 0x73,
	0xa8, 0x8f, 0xcb, 0x89, 0xeb, 0xe3, 0x95, 0x33, 0xde, 0x8d, 0x7d, 0x2e, 0xc0, 0x15, 0x16, 0x51,
	0xe6, 0x6b, 0xe1, 0x26, 0xd4, 0x66, 0x98, 0xc8, 0xe4, 0x02, 0x43, 0xae, 0xc6, 0x6b, 0xfa, 0xb4,
	0xc8, 0xf2, 0x29, 0x0d, 0xff, 0xcf, 0x32, 0x7d, 0x7a, 0xfe, 0xf4, 0xe2, 0x97, 0x02, 0x88, 0x33,
	0xa7, 0x48, 0x18, 0x6d, 0x9e, 0x65, 0x9b, 0x18, 0x88, 0x38, 0x85, 0x70, 0xc4, 0xd1, 0xe1, 0xea,
	0x7c, 0x07, 0xe5, 0xf1, 0x60, 0xfe, 0xfa, 0x85, 0x53, 0xd6, 0xff, 0x2a, 0x5c, 0x9d, 0xef, 0x69,
	0x3c, 0x12, 0xbf, 0x0a, 0x57, 0xe7, 0xdb, 0x02, 0xff, 0xdd, 0x00, 0xae, 0xcc, 0x15, 0xe7, 0x59,
	0x30, 0xbd, 0xdd, 0x80, 0xac, 0x6c, 0x0d, 0x31, 0x3a, 0x0f, 0x15, 0xb9, 0xd7, 0x8d, 0x9e, 0x7e,
	0x79, 0x5b, 0x26, 0x01, 0x95, 0xa1, 0xb0, 0x2f, 0x77, 0xee, 0xd5, 0xe5, 0xfb, 0x95, 0x34, 0x5a,
	0x85, 0x52, 0xbf, 0xdd, 0xec, 0x49, 0x2d, 0xd2, 0xcc, 0x6c, 0x37, 0x20, 0x47, 0x5f, 0x50, 0xa0,
	0x0b, 0xb0, 0xd1, 0x57, 0xea, 0x4a, 0x14, 0xa5, 0x04, 0xb9, 0x9e, 0xb2, 0xd7, 0x96, 0x2b, 0x02,
	0x02, 0xc8, 0xf7, 0xa4, 0x6e, 0x47, 0x6a, 0x57, 0xd2, 0x04, 0xb2, 0x77, 0xfb, 0x36, 0x6d, 0x64,
	0xb6, 0x9b, 0x00, 0xfe, 0x59, 0x13, 0xda, 0x82, 0xcd, 0x7e, 0x73, 0xaf, 0x7d, 0x2f, 0xf6, 0x48,
	0x6e, 0x05, 0x8a, 0xb7, 0xbb, 0xed, 0x8f, 0x3b, 0x8d, 0x6e, 0x9b, 0x21, 0xf6, 0x15, 0xb9, 0xd3,
	0x54, 0x2a, 0xe9, 0xed, 0x8f, 0x61, 0x63, 0xca, 0x1d, 0x91, 0x08, 0x2f, 0xec, 0xd7, 0x65, 0xa5,
	0xa3, 0x74, 0x7a, 0x92, 0xda, 0x57, 0xe4, 0xba, 0xd2, 0xbe, 0x73, 0x3f, 0x02, 0xb9, 0x06, 0xb0,
	0x57, 0xef, 0xef, 0xa9, 0x8d, 0x7a, 0xbf, 0xdd, 0xaa, 0x08, 0x68, 0x1d, 0xca, 0x72, 0x5d, 0xba,
	0xd3, 0xe6, 0x1d, 0xe9, 0xed, 0x43, 0xc8, 0xb3, 0x02, 0x04, 0x5d, 0x04, 0x44, 0xd6, 0x78, 0xd0,
	0x8f, 0x40, 0x94, 0xa1, 0x70, 0x20, 0xdd, 0x95, 0x7a, 0x1f, 0x49, 0x4c, 0x5a, 0x1f, 0xd5, 0x3b,
	0x4a, 0x47, 0xba, 0xc3, 0xd6, 0x29, 0x1f, 0x48, 0x12, 0x69, 0x64, 0x88, 0xe8, 0x9a, 0xbd, 0x7b,
	0xfb, 0x64, 0xf7, 0xda, 0xaa, 0x64, 0x09, 0xf7, 0xb7, 0xeb, 0x9d, 0x6e, 0xbb, 0x55, 0xc9, 0xed,
	0xfe, 0x63, 0x13, 0x56, 0xfa, 0x24, 0x7b, 0xdf, 0x63, 0x4f, 0xd5, 0xd0, 0x2f, 0x04, 0xa8, 0x44,
	0x37, 0x8f, 0x28, 0xd9, 0x63, 0xa9, 0xf8, 0xdd, 0x6d, 0xed, 0xe6, 0x72, 0xc4, 0xdc, 0x20, 0x53,
	0x94, 0xa3, 0x68, 0x71, 0x97, 0x8c, 0xa3, 0x19, 0x5b, 0xd0, 0x64, 0x1c, 0xcd, 0x2a, 0x8a, 0x39,
	0x47, 0xd1, 0x5a, 0x2d, 0x19, 0x47, 0x33, 0xca, 0xc7, 0x64, 0x1c, 0xcd, 0x2c, 0x0f, 0x53, 0xe8,
	0x97, 0x02, 0x6c, 0x4c, 0x95, 0x61, 0xe8, 0x66, 0xb2, 0xdc, 0x1e, 0x5f, 0x58, 0xd6, 0xde, 0x5b,
	0x92, 0x7a, 0xc2, 0xd4, 0x17, 0x02, 0xac, 0x47, 0xaa, 0x3f, 0x94, 0xa8, 0xdc, 0x88, 0x2f, 0x19,
	0x6b, 0x37, 0x96, 0xa2, 0x9d, 0xb0, 0xf3, 0x63, 0x58, 0x0d, 0x0d, 0xa2, 0x77, 0x16, 0xc6, 0xf3,
	0x38, 0x59, 0xf0, 0x70, 0x86, 0xcb, 0x22, 0x52, 0x11, 0x26, 0x93, 0x45, 0x7c, 0xd5, 0x9a, 0x4c,
	0x16, 0x33, 0x4a, 0x50, 0x31, 0x85, 0x7e, 0x2f, 0xc0, 0xa5, 0x99, 0x7b, 0x26, 0xd4, 0x4a, 0x28,
	0x98, 0xb9, 0xfb, 0xba, 0x5a, 0xfb, 0x19, 0x51, 0x26, 0xcc, 0x7e, 0x2e, 0x40, 0x39, 0xf0, 0x98,
	0x00, 0xbd, 0x95, 0x3c, 0xa0, 0x04, 0x1f, 0x35, 0xd4, 0xde, 0x5e, 0x98, 0x6e, 0xc2, 0xc2, 0xcf,
	0x04, 0x58, 0x0b, 0x5f, 0xd6, 0xa1, 0xef, 0x26, 0xb5, 0x9e, 0xa9, 0x9b, 0xc9, 0xda, 0xbb, 0xcb,
	0x90, 0x86, 0xa2, 0x4f, 0xf4, 0x5e, 0x18, 0xdd, 0x58, 0x18, 0xd2, 0xbf, 0x92, 0x4d, 0x16, 0x7d,
	0x66, 0x5d, 0x45, 0x8b, 0x29, 0xe4, 0xc2, 0x4a, 0xf0, 0xa6, 0x17, 0xbd, 0x9d, 0x10, 0x2f, 0x7a,
	0x37, 0x5c, 0x4b, 0x7e, 0xe9, 0xcc, 0xcd, 0x22, 0xf0, 0xa2, 0x25, 0x99, 0x59, 0x4c, 0x3f, 0xa7,
	0x49, 0x66, 0x16, 0x71, 0x4f, 0x67, 0x18, 0x0b, 0x81, 0x47, 0x49, 0xc9, 0x58, 0x98, 0x7e, 0xd3,
	0x96, 0x8c, 0x85, 0x98, 0xd7, 0x4f, 0x62, 0x0a, 0xfd, 0x56, 0xa0, 0xbb, 0xf7, 0xa9, 0x07, 0xbf,
	0xe8, 0xd6, 0x42, 0xee, 0x37, 0xfd, 0xf4, 0xb8, 0xf6, 0xbd, 0xe5, 0x01, 0x26, 0xdc, 0xfd, 0x4e,
	0x80, 0xcd, 0x19, 0x2f, 0x2d, 0x51, 0x23, 0x59, 0x7e, 0x99, 0xf7, 0xac, 0xb5, 0xd6, 0x7c, 0x26,
	0x8c, 0x90, 0x10, 0xe3, 0x5e, 0x7b, 0x26, 0x13, 0xe2, 0x9c, 0x07, 0xae, 0xc9, 0x84, 0x38, 0xf7,
	0xa1, 0x29, 0xe3, 0x2e, 0xee, 0xc5, 0x68, 0x32, 0xee, 0xe6, 0xbc, 0x52, 0x4d, 0xc6, 0xdd, 0xdc,
	0xc7, 0xaa, 0x29, 0xf4, 0x6b, 0x01, 0xce, 0xc5, 0x3c, 0x48, 0x45, 0xef, 0x27, 0xcd, 0x50, 0xf1,
	0x0f, 0x5d, 0x6b, 0xb7, 0x96, 0xa6, 0x9f, 0xb0, 0xf6, 0x18, 0xf2, 0xec, 0x15, 0x37, 0xfa, 0x56,
	0xa2, 0xd3, 0xbe, 0xe0, 0x23, 0xf7, 0xda, 0xee, 0x22, 0x24, 0x51, 0x77, 0x9c, 0xfa, 0xc3, 0x44,
	0x62, 0x77, 0x9c, 0xf5, 0xcf, 0x8f, 0xc4, 0xee, 0x38, 0xf3, 0xbf, 0x1a, 0x62, 0xaa, 0x61, 0xc2,
	0xb5, 0x78, 0x10, 0xfa, 0x07, 0x15, 0x27, 0x08, 0xd5, 0xd8, 0x08, 0x6e, 0x0b, 0xf6, 0xc9, 0xf8,
	0x0f, 0xae, 0x1f, 0x19, 0xee, 0xc3, 0xf1, 0x21, 0x61, 0xe4, 0xfa, 0x3d, 0xc3, 0xd4, 0x15, 0xfa,
	0xdb, 0xeb, 0x21, 0x8c, 0xeb, 0xa3, 0xc3, 0xeb, 0x1e, 0xc6, 0x61, 0x9e, 0xf6, 0x7d, 0xfb, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x0b, 0x68, 0xb9, 0x0f, 0x33, 0x00, 0x00,
}
